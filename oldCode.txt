Directory Structure:

└── ./
    ├── models
    │   └── distillation.js
    ├── public
    │   ├── app.js
    │   ├── index.html
    │   └── styles.css
    ├── routes
    │   └── ai-settings.js
    ├── services
    │   ├── ai
    │   │   ├── providers
    │   │   │   ├── AnthropicProvider.js
    │   │   │   ├── DeepseekProvider.js
    │   │   │   ├── GoogleProvider.js
    │   │   │   ├── GrokProvider.js
    │   │   │   ├── OllamaProvider.js
    │   │   │   └── OpenAIProvider.js
    │   │   ├── AIProvider.js
    │   │   ├── AIProviderFactory.js
    │   │   ├── AISettingsManager.js
    │   │   └── NumberingProcessor.js
    │   ├── transcript
    │   │   └── YouTubeTranscriptExtractor.js
    │   ├── contentExtractor.js
    │   ├── database.js
    │   ├── ollama.js
    │   ├── ProcessingQueue.js
    │   └── processor.js
    ├── .gitignore
    ├── package-lock.json
    ├── package.json
    ├── README.md
    └── server.js



---
File: /models/distillation.js
---

/**
 * Distillation model for SAWRON
 * Represents a processed content distillation with metadata
 */
class Distillation {
    constructor({
        id = null,
        title = '',
        content = '',
        sourceUrl = '',
        sourceType = '',
        sourceFile = null,
        status = 'pending',
        processingStep = '',
        rawContent = '',
        createdAt = new Date(),
        completedAt = null,
        processingTime = 0,
        elapsedTime = 0,
        startTime = null,
        wordCount = 0,
        error = null,
        logs = []
    }) {
        this.id = id || Date.now().toString();
        this.title = title;
        this.content = content;
        this.sourceUrl = sourceUrl;
        this.sourceType = sourceType; // 'url', 'youtube', 'file'
        this.sourceFile = sourceFile;
        this.status = status; // 'pending', 'initializing', 'extracting', 'distilling', 'completed', 'error'
        this.processingStep = processingStep; // More detailed status message
        this.rawContent = rawContent; // Store the raw extracted content for debugging
        this.createdAt = createdAt;
        this.completedAt = completedAt;
        this.processingTime = processingTime; // in seconds (actual processing time)
        this.elapsedTime = elapsedTime; // in seconds (total elapsed time including waiting)
        this.startTime = startTime; // When processing actually started
        this.wordCount = wordCount;
        this.error = error;
        this.logs = logs || []; // Processing logs for debugging
    }

    toJSON() {
        return {
            id: this.id,
            title: this.title,
            content: this.content,
            sourceUrl: this.sourceUrl,
            sourceType: this.sourceType,
            sourceFile: this.sourceFile ? {
                name: this.sourceFile.name,
                type: this.sourceFile.type,
                size: this.sourceFile.size
            } : null,
            status: this.status,
            processingStep: this.processingStep,
            rawContent: this.rawContent,
            createdAt: this.createdAt,
            completedAt: this.completedAt,
            processingTime: this.processingTime,
            elapsedTime: this.elapsedTime,
            startTime: this.startTime,
            wordCount: this.wordCount,
            error: this.error,
            logs: this.logs
        };
    }

    static fromJSON(json) {
        return new Distillation({
            id: json.id,
            title: json.title,
            content: json.content,
            sourceUrl: json.sourceUrl,
            sourceType: json.sourceType,
            sourceFile: json.sourceFile,
            status: json.status,
            processingStep: json.processingStep,
            rawContent: json.rawContent,
            createdAt: new Date(json.createdAt),
            completedAt: json.completedAt ? new Date(json.completedAt) : null,
            processingTime: json.processingTime,
            elapsedTime: json.elapsedTime,
            startTime: json.startTime ? new Date(json.startTime) : null,
            wordCount: json.wordCount,
            error: json.error,
            logs: json.logs || []
        });
    }
    
    /**
     * Add a log entry to the distillation
     * @param {string} message - The log message
     * @param {string} level - The log level (info, warn, error)
     */
    addLog(message, level = 'info') {
        const timestamp = new Date();
        this.logs.push({
            timestamp,
            message,
            level
        });
        
        // Calculate elapsed time if processing has started
        if (this.startTime) {
            this.elapsedTime = (new Date() - this.startTime) / 1000;
        }
        
        console.log(`[${level.toUpperCase()}] [${this.id}] ${message}`);
        return this;
    }
    
    /**
     * Update the processing step
     * @param {string} step - The current processing step
     * @param {string} status - The status to update to
     */
    updateStep(step, status = null) {
        this.processingStep = step;
        if (status) {
            this.status = status;
        }
        
        // Start timing if this is the first step
        if (!this.startTime && (status === 'extracting' || status === 'initializing')) {
            this.startTime = new Date();
        }
        
        // Calculate elapsed time
        if (this.startTime) {
            this.elapsedTime = (new Date() - this.startTime) / 1000;
        }
        
        this.addLog(`Processing step: ${step} (Status: ${this.status})`);
        return this;
    }
}

module.exports = Distillation;


---
File: /public/app.js
---

// Download State Management System
class DownloadStateManager {
    constructor() {
        this.downloadStates = new Map(); // buttonId -> DownloadState
    }

    createDownloadState(buttonId) {
        const state = {
            buttonId: buttonId,
            state: 'idle', // 'idle', 'loading', 'cancellable', 'error'
            downloadId: null,
            abortController: null,
            errorMessage: null,
            startTime: null,
            originalContent: null
        };
        this.downloadStates.set(buttonId, state);
        return state;
    }

    getDownloadState(buttonId) {
        return this.downloadStates.get(buttonId) || this.createDownloadState(buttonId);
    }

    setDownloadState(buttonId, newState, options = {}) {
        const state = this.getDownloadState(buttonId);

        // Validate state transition
        if (!this.isValidStateTransition(state.state, newState)) {
            console.warn(`Invalid state transition from ${state.state} to ${newState} for button ${buttonId}`);
            return state;
        }

        state.state = newState;

        if (options.downloadId) state.downloadId = options.downloadId;
        if (options.abortController) state.abortController = options.abortController;
        if (options.errorMessage) state.errorMessage = options.errorMessage;
        if (options.startTime) state.startTime = options.startTime;
        if (options.originalContent) state.originalContent = options.originalContent;

        // Set timeout for stuck states
        if (newState === 'loading') {
            this.setDownloadTimeout(buttonId);
        } else {
            this.clearDownloadTimeout(buttonId);
        }

        this.updateButtonUI(buttonId, state);
        return state;
    }

    isValidStateTransition(currentState, newState) {
        const validTransitions = {
            'idle': ['loading', 'error'],
            'loading': ['cancellable', 'idle', 'error'],
            'cancellable': ['loading', 'idle', 'error'],
            'error': ['idle', 'loading']
        };

        return validTransitions[currentState]?.includes(newState) || false;
    }

    setDownloadTimeout(buttonId) {
        this.clearDownloadTimeout(buttonId);
        const state = this.getDownloadState(buttonId);

        // Set 5 minute timeout for downloads
        state.timeoutId = setTimeout(() => {
            console.warn(`Download timeout for button ${buttonId}`);
            this.setDownloadState(buttonId, 'error', {
                errorMessage: 'Download timed out. Please try again.'
            });
        }, 5 * 60 * 1000);
    }

    clearDownloadTimeout(buttonId) {
        const state = this.getDownloadState(buttonId);
        if (state.timeoutId) {
            clearTimeout(state.timeoutId);
            state.timeoutId = null;
        }
    }

    updateButtonUI(buttonId, state) {
        const button = document.getElementById(buttonId);
        if (!button) return;

        // Store original content if not already stored
        if (!state.originalContent) {
            state.originalContent = button.innerHTML;
        }

        // Remove existing listeners to prevent duplicates
        button.onmouseenter = null;
        button.onmouseleave = null;

        switch (state.state) {
            case 'idle':
                button.disabled = false;
                button.classList.remove('downloading', 'download-error', 'cancellable');
                if (state.originalContent) {
                    button.innerHTML = state.originalContent;
                }
                button.title = '';
                break;

            case 'loading':
                button.disabled = true;
                button.classList.add('downloading');
                button.classList.remove('download-error', 'cancellable');
                const iconSpan = button.querySelector('.btn-icon');
                const textSpan = button.querySelector('.btn-text');
                if (iconSpan && textSpan) {
                    iconSpan.innerHTML = '⏳';
                    textSpan.innerHTML = 'Downloading...';
                } else {
                    button.innerHTML = '<span class="btn-icon">⏳</span><span class="btn-text">Downloading...</span>';
                }
                button.title = 'Hover to cancel';

                // Add mouse enter listener to switch to cancellable state
                button.onmouseenter = () => {
                    this.setDownloadState(buttonId, 'cancellable');
                };
                break;

            case 'cancellable':
                button.disabled = false;
                button.classList.add('downloading', 'cancellable');
                const cancelIconSpan = button.querySelector('.btn-icon');
                const cancelTextSpan = button.querySelector('.btn-text');
                if (cancelIconSpan && cancelTextSpan) {
                    cancelIconSpan.innerHTML = '❌';
                    cancelTextSpan.innerHTML = 'Cancel';
                } else {
                    button.innerHTML = '<span class="btn-icon">❌</span><span class="btn-text">Cancel</span>';
                }
                button.title = 'Click to cancel download';

                // Add mouse leave listener to revert to loading state
                button.onmouseleave = () => {
                    this.setDownloadState(buttonId, 'loading');
                };
                break;

            case 'error':
                button.disabled = false;
                button.classList.add('download-error');
                button.classList.remove('downloading', 'cancellable');
                const errorIconSpan = button.querySelector('.btn-icon');
                const errorTextSpan = button.querySelector('.btn-text');
                if (errorIconSpan && errorTextSpan) {
                    errorIconSpan.innerHTML = '⚠️';
                    errorTextSpan.innerHTML = 'Error';
                } else {
                    button.innerHTML = '<span class="btn-icon">⚠️</span><span class="btn-text">Error</span>';
                }
                button.title = state.errorMessage || 'Download failed';

                // Auto-reset to idle after 3 seconds
                setTimeout(() => {
                    if (this.getDownloadState(buttonId).state === 'error') {
                        this.setDownloadState(buttonId, 'idle');
                    }
                }, 3000);
                break;
        }
    }

    cancelDownload(buttonId) {
        const state = this.getDownloadState(buttonId);

        // Abort the download if in progress
        if (state.abortController) {
            state.abortController.abort();
            state.abortController = null;
        }

        // Clear timeout
        this.clearDownloadTimeout(buttonId);

        // Reset all state properties
        state.downloadId = null;
        state.errorMessage = null;
        state.startTime = null;

        // Set to idle state
        this.setDownloadState(buttonId, 'idle');
    }

    clearDownloadState(buttonId) {
        this.downloadStates.delete(buttonId);
    }
}

// Viewport Boundary Detection Utilities
class ViewportUtils {
    static getViewportDimensions() {
        return {
            width: window.innerWidth,
            height: window.innerHeight
        };
    }

    static getElementPosition(element) {
        const rect = element.getBoundingClientRect();
        return {
            top: rect.top,
            left: rect.left,
            bottom: rect.bottom,
            right: rect.right,
            width: rect.width,
            height: rect.height
        };
    }

    static calculateAvailableSpace(element) {
        const elementPos = this.getElementPosition(element);
        const viewport = this.getViewportDimensions();

        return {
            top: elementPos.top,
            bottom: viewport.height - elementPos.bottom,
            left: elementPos.left,
            right: viewport.width - elementPos.right
        };
    }

    static wouldExtendBeyondViewport(element, dropdownWidth, dropdownHeight) {
        const elementPos = this.getElementPosition(element);
        const viewport = this.getViewportDimensions();

        return {
            right: (elementPos.right + dropdownWidth) > viewport.width,
            bottom: (elementPos.bottom + dropdownHeight) > viewport.height,
            left: (elementPos.left - dropdownWidth) < 0,
            top: (elementPos.top - dropdownHeight) < 0
        };
    }

    static getOptimalDropdownPosition(triggerElement, dropdownElement) {
        const triggerPos = this.getElementPosition(triggerElement);
        const dropdownRect = dropdownElement.getBoundingClientRect();
        const viewport = this.getViewportDimensions();

        let position = {
            top: triggerPos.bottom + 4, // Default: below trigger
            left: triggerPos.right - dropdownRect.width // Default: right-aligned
        };

        // Check if dropdown extends beyond right edge
        if (position.left + dropdownRect.width > viewport.width - 10) {
            position.left = triggerPos.left; // Left-align instead
        }

        // Check if dropdown extends beyond left edge
        if (position.left < 10) {
            position.left = 10;
        }

        // Check if dropdown extends beyond bottom edge
        if (position.top + dropdownRect.height > viewport.height - 10) {
            position.top = triggerPos.top - dropdownRect.height - 4; // Position above
        }

        // Check if dropdown extends beyond top edge
        if (position.top < 10) {
            position.top = triggerPos.bottom + 4; // Force below
        }

        return position;
    }
}

// Enhanced Tooltip Manager - Fixed positioning and stuck tooltip issues
class TooltipManager {
    constructor() {
        this.activeTooltip = null;
        this.showTimeoutId = null;
        this.hideTimeoutId = null;
        this.targetElement = null;
        this.isMouseOverTooltip = false;
    }

    showTooltip(element, text) {
        try {
            // Clear any pending hide timeout
            if (this.hideTimeoutId) {
                clearTimeout(this.hideTimeoutId);
                this.hideTimeoutId = null;
            }

            // If tooltip is already showing for this element, don't recreate
            if (this.activeTooltip && this.targetElement === element) {
                return;
            }

            this.cleanup();

            if (!element || !text || typeof text !== 'string' || text.trim() === '') {
                return;
            }

            // Only show tooltip if text is actually truncated
            if (!this.isTextTruncated(element, text)) {
                return;
            }

            // Delay showing tooltip to prevent flickering
            this.showTimeoutId = setTimeout(() => {
                this.createTooltip(element, text);
            }, 300);

        } catch (error) {
            console.warn('Error showing tooltip:', error);
            this.cleanup();
        }
    }

    createTooltip(element, text) {
        try {
            // Create tooltip
            this.activeTooltip = document.createElement('div');
            this.activeTooltip.className = 'tooltip';
            this.activeTooltip.textContent = text;
            document.body.appendChild(this.activeTooltip);

            // Position tooltip above the element with proper centering
            const elementRect = element.getBoundingClientRect();
            const tooltipRect = this.activeTooltip.getBoundingClientRect();

            let left = elementRect.left + (elementRect.width / 2) - (tooltipRect.width / 2);
            let top = elementRect.top;

            // Keep tooltip within viewport bounds
            const padding = 10;
            if (left < padding) {
                left = padding;
            } else if (left + tooltipRect.width > window.innerWidth - padding) {
                left = window.innerWidth - tooltipRect.width - padding;
            }

            // Ensure tooltip doesn't go above viewport
            if (top < padding + tooltipRect.height) {
                top = elementRect.bottom + 8;
                // Flip arrow direction if showing below
                this.activeTooltip.classList.add('tooltip-below');
            }

            this.activeTooltip.style.left = left + 'px';
            this.activeTooltip.style.top = top + 'px';
            this.activeTooltip.classList.add('show');

            this.targetElement = element;

        } catch (error) {
            console.warn('Error creating tooltip:', error);
            this.cleanup();
        }
    }

    hideTooltip() {
        // Delay hiding to prevent flickering when moving between elements
        this.hideTimeoutId = setTimeout(() => {
            this.cleanup();
        }, 100);
    }

    isTextTruncated(element, text) {
        // Check if the element's content is actually truncated
        const tempSpan = document.createElement('span');
        tempSpan.style.visibility = 'hidden';
        tempSpan.style.position = 'absolute';
        tempSpan.style.whiteSpace = 'nowrap';
        tempSpan.style.font = window.getComputedStyle(element).font;
        tempSpan.textContent = text;
        document.body.appendChild(tempSpan);

        const isOverflowing = tempSpan.offsetWidth > element.offsetWidth;
        document.body.removeChild(tempSpan);

        return isOverflowing;
    }

    cleanup() {
        if (this.showTimeoutId) {
            clearTimeout(this.showTimeoutId);
            this.showTimeoutId = null;
        }

        if (this.hideTimeoutId) {
            clearTimeout(this.hideTimeoutId);
            this.hideTimeoutId = null;
        }

        if (this.activeTooltip) {
            this.activeTooltip.remove();
            this.activeTooltip = null;
        }

        this.targetElement = null;
        this.isMouseOverTooltip = false;
    }

    cleanupStuckTooltips() {
        // Emergency cleanup for any stuck tooltips
        const stuckTooltips = document.querySelectorAll('.tooltip');
        stuckTooltips.forEach(tooltip => tooltip.remove());
        this.cleanup();
    }
}

// SAWRON App JavaScript
class SawronApp {
    constructor() {
        this.knowledgeBase = [];
        this.currentFilter = 'all';
        this.selectedFile = null;
        this.refreshInterval = null;
        this.selectedItems = new Set(); // Track selected item IDs
        this.downloadStateManager = new DownloadStateManager();
        this.tooltipManager = new TooltipManager();
        this.init();
    }

    init() {
        this.setupEventListeners();
        // Hide bulk actions bar initially to prevent flash
        const bulkActionsBar = document.getElementById('bulk-actions-bar');
        if (bulkActionsBar) {
            bulkActionsBar.style.display = 'none';
        }
        this.loadKnowledgeBase();
        this.startAutoRefresh();
        this.startChronometer();
        this.initializeTooltips();
    }

    setupEventListeners() {
        // Main input field
        const mainInput = document.getElementById('main-input');
        mainInput.addEventListener('input', (e) => {
            this.handleInputChange(e.target.value);
        });

        // File input
        const fileInput = document.getElementById('file-input');
        fileInput.addEventListener('change', (e) => {
            this.handleFileSelection(e.target.files);
        });

        // Search and filter
        document.getElementById('search-input').addEventListener('input', (e) => {
            this.filterKnowledgeBase(e.target.value, this.currentFilter);
        });

        document.getElementById('filter-select').addEventListener('change', (e) => {
            this.currentFilter = e.target.value;
            this.filterKnowledgeBase(document.getElementById('search-input').value, this.currentFilter);
        });

        // Modal close
        document.getElementById('distillation-modal').addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                this.closeDistillationModal();
            }
        });

        document.getElementById('raw-content-modal').addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                this.closeRawContentModal();
            }
        });

        document.getElementById('logs-modal').addEventListener('click', (e) => {
            if (e.target.classList.contains('modal')) {
                this.closeLogsModal();
            }
        });

        // Drag and drop on the entire input section
        const inputSection = document.querySelector('.input-section');
        const dropzone = document.getElementById('dropzone');

        inputSection.addEventListener('dragover', (e) => {
            e.preventDefault();
            dropzone.style.borderColor = 'var(--primary-orange)';
            dropzone.style.color = 'var(--text-secondary)';
        });

        inputSection.addEventListener('dragleave', (e) => {
            if (!inputSection.contains(e.relatedTarget)) {
                dropzone.style.borderColor = 'var(--border-color)';
                dropzone.style.color = 'var(--text-muted)';
            }
        });

        inputSection.addEventListener('drop', (e) => {
            e.preventDefault();
            dropzone.style.borderColor = 'var(--border-color)';
            dropzone.style.color = 'var(--text-muted)';
            this.handleFileSelection(e.dataTransfer.files);
        });

        // Click handler for dropzone
        dropzone.addEventListener('click', () => {
            document.getElementById('file-input').click();
        });
    }

    handleInputChange(value) {
        const trimmedValue = value.trim();

        // Clear file selection if user types in input
        if (trimmedValue && this.selectedFile) {
            this.removeFile();
        }

        // Update button states
        this.updateButtonStates();
    }

    handleFileSelection(files) {
        if (!files || files.length === 0) return;

        const file = files[0]; // Take only the first file

        // Clear input field if file is selected
        const mainInput = document.getElementById('main-input');
        if (mainInput.value.trim()) {
            mainInput.value = '';
        }

        this.selectedFile = file;
        this.showFileDisplay(file);
        this.updateButtonStates();
    }

    showFileDisplay(file) {
        const fileDisplay = document.getElementById('file-display');
        const fileName = document.getElementById('file-name');

        fileName.textContent = file.name;
        fileDisplay.style.display = 'block';
    }

    removeFile() {
        this.selectedFile = null;
        document.getElementById('file-display').style.display = 'none';
        document.getElementById('file-input').value = '';
        this.updateButtonStates();
    }

    updateButtonStates() {
        const mainInput = document.getElementById('main-input');
        const distillBtn = document.getElementById('distill-btn');

        const hasText = mainInput.value.trim().length > 0;
        const hasFile = this.selectedFile !== null;

        // Distill button: enabled if there's text or file selected
        if (hasText || hasFile) {
            distillBtn.classList.remove('disabled');
        } else {
            distillBtn.classList.add('disabled');
        }
    }

    isValidUrl(string) {
        try {
            new URL(string);
            return true;
        } catch (_) {
            return false;
        }
    }

    showStatus(message, progress = 0) {
        const statusSection = document.getElementById('status-section');
        const statusMessage = document.getElementById('status-message');
        const progressFill = document.getElementById('progress-fill');

        statusSection.style.display = 'block';
        statusMessage.textContent = message;
        progressFill.style.width = `${progress}%`;

    }

    hideStatus() {
        document.getElementById('status-section').style.display = 'none';
    }

    async startDistillation() {
        const distillBtn = document.getElementById('distill-btn');
        if (distillBtn.classList.contains('disabled')) {
            return;
        }

        const mainInput = document.getElementById('main-input');
        const url = mainInput.value.trim();

        try {
            if (this.selectedFile) {
                // Process file
                this.showStatus(`Processing ${this.selectedFile.name}...`, 25);

                const formData = new FormData();
                formData.append('file', this.selectedFile);

                const response = await fetch('/api/process/file', {
                    method: 'POST',
                    body: formData
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.message || 'Failed to process file');
                }

                const result = await response.json();
                this.showStatus(`File uploaded. Processing in background...`, 100);
                setTimeout(() => this.hideStatus(), 2000);

                this.removeFile();
                // Force MULTIPLE status updates to detect new item
                this.forceStatusUpdate();
                setTimeout(() => this.forceStatusUpdate(), 100);
                setTimeout(() => this.forceStatusUpdate(), 500);
                setTimeout(() => this.forceStatusUpdate(), 1000);
                setTimeout(() => this.forceStatusUpdate(), 2000);

            } else if (url) {
                // Process URL
                this.showStatus('Processing URL...', 25);

                const response = await fetch('/api/process/url', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ url })
                });

                if (!response.ok) {
                    const error = await response.json();
                    throw new Error(error.message || 'Failed to process URL');
                }

                const result = await response.json();
                this.showStatus(`URL submitted. Processing in background...`, 100);
                setTimeout(() => this.hideStatus(), 2000);

                mainInput.value = '';
                // Force MULTIPLE status updates to detect new item
                this.forceStatusUpdate();
                setTimeout(() => this.forceStatusUpdate(), 100);
                setTimeout(() => this.forceStatusUpdate(), 500);
                setTimeout(() => this.forceStatusUpdate(), 1000);
                setTimeout(() => this.forceStatusUpdate(), 2000);
            }

            this.updateButtonStates();

        } catch (error) {
            console.error('Error during distillation:', error);
            alert('Error: ' + error.message);
            this.hideStatus();
        }
    }

    startAutoRefresh() {
        // Start targeted status monitoring instead of full table refresh
        this.startStatusMonitoring();
    }

    startStatusMonitoring() {
        // Monitor for status changes every 2 seconds - much more reasonable
        this.statusMonitorInterval = setInterval(() => {
            this.checkForStatusUpdates();
        }, 2000);
    }

    startChronometer() {
        // Update processing times every 500ms for smooth live chronometer
        this.chronometerInterval = setInterval(() => {
            this.updateProcessingTimes();
        }, 500);
    }

    formatTimeDisplay(timeInSeconds) {
        // Helper function for consistent time formatting
        const totalSeconds = Math.floor(timeInSeconds);
        if (totalSeconds < 60) {
            return `${totalSeconds}s`;
        } else {
            const minutes = Math.floor(totalSeconds / 60);
            const seconds = totalSeconds % 60;
            return `${minutes}m ${seconds}s`;
        }
    }

    calculateProcessingTimeDisplay(item) {
        // Centralized time calculation to ensure consistency
        if (item.processingTime && item.status === 'completed') {
            return this.formatTimeDisplay(item.processingTime);
        } else if (item.status === 'pending') {
            return 'Waiting...';
        } else if (['extracting', 'distilling'].includes(item.status) && item.startTime) {
            try {
                const startTime = new Date(item.startTime);
                const currentTime = new Date();

                if (!isNaN(startTime.getTime()) && !isNaN(currentTime.getTime())) {
                    const elapsedSeconds = Math.floor((currentTime - startTime) / 1000);

                    if (elapsedSeconds >= 0) {
                        if (elapsedSeconds < 60) {
                            return `${elapsedSeconds}s`;
                        } else {
                            const minutes = Math.floor(elapsedSeconds / 60);
                            const seconds = elapsedSeconds % 60;
                            return `${minutes}m ${seconds}s`;
                        }
                    } else {
                        return '0s';
                    }
                }
            } catch (error) {
                console.warn('Error calculating processing time:', error);
            }
        } else if (item.elapsedTime && item.elapsedTime > 0) {
            const minutes = Math.floor(item.elapsedTime / 60);
            const seconds = Math.floor(item.elapsedTime % 60);
            return `${minutes}m ${seconds}s`;
        }
        return '';
    }

    updateProcessingTimes() {
        // Update processing times for items that are currently processing
        const processingItems = this.knowledgeBase.filter(item =>
            ['extracting', 'distilling'].includes(item.status) && item.startTime
        );

        processingItems.forEach(item => {
            const row = document.querySelector(`tr[data-id="${item.id}"]`);
            if (row) {
                const timeCell = row.querySelector('.time-cell');
                if (timeCell) {
                    const timeDisplay = this.calculateProcessingTimeDisplay(item);

                    // Only update if the time display actually changed to prevent flickering
                    if (timeDisplay && timeCell.textContent !== timeDisplay) {
                        timeCell.textContent = timeDisplay;
                    }
                }
            }
        });
    }

    initializeTooltips() {
        // Set up tooltip event listeners for truncated text elements
        document.addEventListener('mouseover', (e) => {
            const element = e.target.closest('[data-tooltip]');
            if (element) {
                const tooltipText = element.getAttribute('data-tooltip');
                if (tooltipText && tooltipText.trim()) {
                    this.tooltipManager.showTooltip(element, tooltipText);
                }
            }
        });

        document.addEventListener('mouseout', (e) => {
            const element = e.target.closest('[data-tooltip]');
            if (element) {
                this.tooltipManager.hideTooltip();
            }
        });

        // Clean up stuck tooltips on scroll or window events
        document.addEventListener('scroll', () => {
            this.tooltipManager.cleanupStuckTooltips();
        }, true);

        window.addEventListener('resize', () => {
            this.tooltipManager.cleanupStuckTooltips();
        });
    }

    forceStatusUpdate() {
        // Force an immediate status update (used after retry operations)
        this.checkForStatusUpdates();
    }

    async checkForStatusUpdates() {
        try {
            // Fetch latest data with error handling
            const response = await fetch('/api/summaries');
            if (!response.ok) {
                console.warn('Failed to fetch summaries:', response.status);
                return;
            }

            const latestData = await response.json();

            // Check ALL items for any changes
            const itemsToCheck = [...this.knowledgeBase];
            let needsReSort = false;
            itemsToCheck.forEach(oldItem => {
                const newItem = latestData.find(item => item.id === oldItem.id);
                if (newItem && this.hasItemChanged(oldItem, newItem)) {
                    // Check if status changed (which affects sorting)
                    if (oldItem.status !== newItem.status) {
                        needsReSort = true;
                    }
                    
                    // Status change detected - update silently
                    this.updateSingleRow(newItem);
                    // Update our local data
                    const index = this.knowledgeBase.findIndex(item => item.id === oldItem.id);
                    if (index !== -1) {
                        this.knowledgeBase[index] = newItem;
                    }
                }
            });
            
            // Re-sort if any status changed
            if (needsReSort) {
                this.knowledgeBase = this.sortKnowledgeBaseItems(this.knowledgeBase);
                this.renderKnowledgeBase();
                return; // Skip individual updates since we're re-rendering
            }

            // Check for any new items that might have been added
            const newItems = latestData.filter(item =>
                !this.knowledgeBase.find(existing => existing.id === item.id)
            );

            if (newItems.length > 0) {
                // Add new items and re-sort to maintain proper order
                this.knowledgeBase = this.sortKnowledgeBaseItems([...this.knowledgeBase, ...newItems]);

                // Re-render the entire table to maintain proper order
                this.renderKnowledgeBase();
            }

            // Check for deleted items
            const deletedItems = this.knowledgeBase.filter(oldItem =>
                !latestData.find(item => item.id === oldItem.id)
            );

            deletedItems.forEach(deletedItem => {
                const index = this.knowledgeBase.findIndex(item => item.id === deletedItem.id);
                if (index !== -1) {
                    this.knowledgeBase.splice(index, 1);
                    const row = document.querySelector(`tr[data-id="${deletedItem.id}"]`);
                    if (row) {
                        row.remove();
                    }
                }
            });

        } catch (error) {
            // Silently handle network errors to prevent console spam
            console.warn('Status update error:', error.message);
        }
    }

    clearAllSelections() {
        // Clear the selectedItems set
        this.selectedItems.clear();

        // Uncheck all checkboxes in the DOM
        const allCheckboxes = document.querySelectorAll('.row-checkbox');
        allCheckboxes.forEach(checkbox => checkbox.checked = false);

        // Update the bulk actions bar
        this.updateBulkActionsBar();
    }

    forceBulkActionsRefresh() {
        // Force clear selections and refresh bulk actions bar
        this.selectedItems.clear();

        // Uncheck all checkboxes in the DOM
        const allCheckboxes = document.querySelectorAll('.row-checkbox');
        allCheckboxes.forEach(checkbox => {
            if (checkbox.checked) {
                checkbox.checked = false;
            }
        });

        // Force update the bulk actions bar
        this.updateBulkActionsBar();

        // Also call handleRowSelection to ensure consistency
        this.handleRowSelection();
    }

    nuclearSelectionReset() {
        // Complete reset of selection state
        this.selectedItems = new Set();

        // Uncheck ALL checkboxes
        const allCheckboxes = document.querySelectorAll('.row-checkbox');
        allCheckboxes.forEach(checkbox => checkbox.checked = false);

        // Update the bulk actions bar
        this.updateBulkActionsBar();
        if (bulkDeleteBtn) bulkDeleteBtn.disabled = true;


    }

    handleRowSelection() {
        // Update selected items set based on checkbox states
        this.selectedItems.clear();
        const checkboxes = document.querySelectorAll('.row-checkbox:checked');
        checkboxes.forEach(checkbox => {
            this.selectedItems.add(checkbox.dataset.id);
        });

        // Update bulk actions bar visibility and content
        this.updateBulkActionsBar();
    }

    updateBulkActionsBar() {
        const bulkActionsBar = document.getElementById('bulk-actions-bar');
        const selectedCount = document.getElementById('selected-count');
        const bulkRetryBtn = document.getElementById('bulk-retry-btn');
        const bulkDownloadBtn = document.getElementById('bulk-download-btn');
        const bulkDeleteBtn = document.getElementById('bulk-delete-btn');
        const selectAllBtn = document.getElementById('select-all-btn');

        // Sync selectedItems with actual checked checkboxes to ensure consistency
        const checkedBoxes = document.querySelectorAll('.row-checkbox:checked');
        const actualSelectedIds = new Set(Array.from(checkedBoxes).map(cb => cb.dataset.id));

        // Also clean up selectedItems to remove any IDs that no longer exist in the DOM
        const allCheckboxIds = new Set(Array.from(document.querySelectorAll('.row-checkbox')).map(cb => cb.dataset.id));
        const cleanedSelectedItems = new Set();
        this.selectedItems.forEach(id => {
            if (allCheckboxIds.has(id)) {
                cleanedSelectedItems.add(id);
            }
        });

        // Update selectedItems to match actual DOM state (both checked and existing)
        this.selectedItems = actualSelectedIds;

        const selectedCount_value = this.selectedItems.size;
        const allCheckboxes = document.querySelectorAll('.row-checkbox');
        const totalCount = allCheckboxes.length;

        if (selectedCount_value > 0) {
            bulkActionsBar.style.display = 'flex';
            selectedCount.textContent = `${selectedCount_value} selected`;

            // Enable bulk action buttons
            bulkRetryBtn.disabled = false;
            bulkDeleteBtn.disabled = false;

            // Check if any selected items are completed for download
            const selectedItemsData = Array.from(this.selectedItems).map(id =>
                this.knowledgeBase.find(item => item.id === id)
            ).filter(Boolean);

            const hasCompletedItems = selectedItemsData.some(item => item.status === 'completed');

            // Only disable download button if no completed items AND not currently downloading
            const downloadState = this.downloadStateManager.getDownloadState('bulk-download-btn');
            if (downloadState.state === 'idle') {
                bulkDownloadBtn.disabled = !hasCompletedItems;
            }
            // If downloading, let the downloadStateManager handle the button state

            // Update select all button text based on actual selection state
            if (selectedCount_value === totalCount && totalCount > 0) {
                selectAllBtn.innerHTML = '<span class="btn-text">Unselect All</span>';
            } else {
                selectAllBtn.innerHTML = '<span class="btn-text">Select All</span>';
            }
        } else {
            bulkActionsBar.style.display = 'flex'; // Keep visible but disable buttons
            selectedCount.textContent = '0 selected';

            // Disable bulk action buttons
            bulkRetryBtn.disabled = true;
            bulkDeleteBtn.disabled = true;

            // Only disable download button if not currently downloading
            const downloadState = this.downloadStateManager.getDownloadState('bulk-download-btn');
            if (downloadState.state === 'idle') {
                bulkDownloadBtn.disabled = true;
            }

            // Reset select all button
            selectAllBtn.innerHTML = '<span class="btn-text">Select All</span>';
        }
    }

    toggleSelectAll() {
        const allCheckboxes = document.querySelectorAll('.row-checkbox');
        const checkedBoxes = document.querySelectorAll('.row-checkbox:checked');
        const shouldSelectAll = checkedBoxes.length !== allCheckboxes.length;

        if (shouldSelectAll) {
            // Select all
            allCheckboxes.forEach(checkbox => {
                checkbox.checked = true;
                this.selectedItems.add(checkbox.dataset.id);
            });
        } else {
            // Deselect all
            allCheckboxes.forEach(checkbox => {
                checkbox.checked = false;
            });
            this.selectedItems.clear();
        }

        this.updateBulkActionsBar();
    }

    hasItemChanged(oldItem, newItem) {
        // Comprehensive change detection - checks all relevant fields
        return (
            newItem.status !== oldItem.status ||
            newItem.processingStep !== oldItem.processingStep ||
            newItem.title !== oldItem.title ||
            newItem.startTime !== oldItem.startTime ||
            newItem.distillingStartTime !== oldItem.distillingStartTime ||
            newItem.completedAt !== oldItem.completedAt ||
            newItem.processingTime !== oldItem.processingTime ||
            newItem.wordCount !== oldItem.wordCount ||
            newItem.error !== oldItem.error ||
            newItem.elapsedTime !== oldItem.elapsedTime ||
            newItem.content !== oldItem.content ||
            newItem.rawContent !== oldItem.rawContent ||
            newItem.sourceUrl !== oldItem.sourceUrl ||
            newItem.sourceType !== oldItem.sourceType ||
            JSON.stringify(newItem.sourceFile) !== JSON.stringify(oldItem.sourceFile) ||
            JSON.stringify(newItem.logs) !== JSON.stringify(oldItem.logs)
        );
    }

    updateSingleRow(item) {
        const row = document.querySelector(`tr[data-id="${item.id}"]`);
        if (!row) return;

        // Check if this is a processing item with live chronometer
        const isProcessing = ['pending', 'extracting', 'distilling'].includes(item.status);
        const hasStartTime = item.startTime;
        const shouldPreserveTime = isProcessing && hasStartTime;

        if (shouldPreserveTime) {
            // Update individual cells to preserve the live chronometer
            this.updateRowCellsSelectively(row, item);
        } else {
            // Replace the entire row for non-processing items
            const newRowHtml = this.createTableRow(item);
            row.outerHTML = newRowHtml;
        }
    }

    updateRowCellsSelectively(row, item) {
        // Update only specific cells, preserving the time cell for live chronometer
        const statusConfig = this.getStatusConfig(item.status);
        const statusClass = statusConfig.class;
        const statusText = statusConfig.text;
        const statusDisplay = `<span class="status-icon">${statusConfig.icon}</span>${statusText}`;

        // Update status cell
        const statusCell = row.querySelector('.status-cell');
        if (statusCell) {
            statusCell.className = `status-cell ${statusClass} truncate-text`;
            statusCell.innerHTML = statusDisplay;
            // No tooltip for status cell
        }

        // Update title cell if it changed
        const titleCell = row.querySelector('.title-cell');
        if (titleCell && item.title) {
            const truncatedTitle = item.title.length > 50 ? item.title.substring(0, 50) + '...' : item.title;
            titleCell.textContent = truncatedTitle;
            titleCell.setAttribute('data-tooltip', item.title);
        }

        // Update actions cell
        const actionsCell = row.querySelector('.actions-cell');
        if (actionsCell) {
            actionsCell.innerHTML = this.createActionsDropdown(item);
        }

        // Note: We intentionally don't update the time cell to preserve the live chronometer
    }

    addSingleRow(item) {
        const tbody = document.getElementById('knowledge-base-tbody');
        const newRowHtml = this.createTableRow(item);

        // Check if table is empty (has empty state)
        const emptyState = tbody.querySelector('.empty-state-cell');
        if (emptyState) {
            tbody.innerHTML = newRowHtml;
        } else {
            // Add to the beginning of the table
            tbody.insertAdjacentHTML('afterbegin', newRowHtml);
        }
    }

    getStatusConfig(status) {
        const STATUS_CONFIG = {
            'pending': { icon: '⏳', text: 'QUEUED', class: 'status-queued' },
            'extracting': { icon: '🔍', text: 'EXTRACTING', class: 'status-processing' },
            'distilling': { icon: '💠', text: 'DISTILLING', class: 'status-processing' },
            'completed': { icon: '✅', text: 'COMPLETED', class: 'status-completed' },
            'error': { icon: '❌', text: 'ERROR', class: 'status-error' },
            'stopped': { icon: '⏹️', text: 'STOPPED', class: 'status-stopped' }
        };
        return STATUS_CONFIG[status] || { icon: '⏳', text: 'QUEUED', class: 'status-queued' };
    }

    createActionsDropdown(item) {
        const isCompleted = item.status === 'completed';
        const isProcessing = ['pending', 'extracting', 'distilling'].includes(item.status);
        const isError = item.status === 'error';

        return `
            <div class="action-dropdown" onclick="app.toggleActionDropdown(event, '${item.id}')">
                <button class="action-dropdown-btn">
                    Action
                    <span style="font-size: 0.7rem;">▼</span>
                </button>
                <div class="action-dropdown-content" id="dropdown-${item.id}" onclick="event.stopPropagation()">
                    ${isCompleted ? `
                        <button class="action-dropdown-item" onclick="event.stopPropagation(); app.showDistillationModal('${item.id}'); app.closeAllDropdowns();">
                            📄 View
                        </button>
                        <button class="action-dropdown-item" id="download-btn-${item.id}" 
                                onclick="event.stopPropagation(); app.handleDownloadClick('${item.id}'); app.closeAllDropdowns();">
                            <span class="btn-icon">📥</span>
                            <span class="btn-text">Download</span>
                        </button>
                    ` : ''}
                    ${isProcessing ? `
                        <button class="action-dropdown-item" onclick="event.stopPropagation(); app.stopProcessing('${item.id}'); app.closeAllDropdowns();">
                            ⏹️ Stop
                        </button>
                    ` : ''}
                    <button class="action-dropdown-item retry-item" onclick="event.stopPropagation(); app.retryDistillation('${item.id}'); app.closeAllDropdowns();">
                        🔄 Retry
                    </button>
                    ${(isCompleted || isError) && item.rawContent ? `
                        <button class="action-dropdown-item" onclick="event.stopPropagation(); app.showRawContent('${item.id}'); app.closeAllDropdowns();">
                            🔍 View Raw
                        </button>
                    ` : ''}
                    <button class="action-dropdown-item" onclick="event.stopPropagation(); app.showLogs('${item.id}'); app.closeAllDropdowns();">
                        📋 Logs
                    </button>
                    <button class="action-dropdown-item delete-item" onclick="event.stopPropagation(); app.deleteDistillation('${item.id}'); app.closeAllDropdowns();">
                        🗑️ Delete
                    </button>
                </div>
            </div>
        `;
    }



    stopAutoRefresh() {
        if (this.statusMonitorInterval) {
            clearInterval(this.statusMonitorInterval);
            this.statusMonitorInterval = null;
        }
        if (this.chronometerInterval) {
            clearInterval(this.chronometerInterval);
            this.chronometerInterval = null;
        }
    }

    initializeTooltips() {
        // Add event delegation for tooltips on truncated text elements
        document.addEventListener('mouseenter', (e) => {
            const element = e.target;

            // Check if element is a truncated cell that should show tooltip
            if (this.shouldShowTooltip(element)) {
                const text = this.getTooltipText(element);
                if (text) {
                    this.tooltipManager.showTooltip(element, text);
                }
            }
        }, true);

        document.addEventListener('mouseleave', (e) => {
            const element = e.target;

            // Hide tooltip when leaving truncated elements
            if (this.shouldShowTooltip(element)) {
                this.tooltipManager.hideTooltip();
            }
        }, true);

        // Emergency cleanup on window events
        window.addEventListener('resize', () => {
            this.tooltipManager.cleanupStuckTooltips();
        });

        window.addEventListener('scroll', () => {
            this.tooltipManager.cleanupStuckTooltips();
        }, true);

        // Cleanup on page visibility change
        document.addEventListener('visibilitychange', () => {
            if (document.hidden) {
                this.tooltipManager.cleanupStuckTooltips();
            }
        });
    }

    shouldShowTooltip(element) {
        // Only show tooltips for name and source columns, NOT status column
        // Also check that we're not in a status cell
        const isInStatusCell = element.classList.contains('status-cell') || element.closest('.status-cell');
        if (isInStatusCell) {
            return false;
        }

        return element.classList.contains('name-cell') ||
            element.classList.contains('source-cell') ||
            element.closest('.name-cell') ||
            element.closest('.source-cell');
    }

    getTooltipText(element) {
        // Get the appropriate text content for tooltip
        const cell = element.closest('.name-cell, .source-cell') || element;

        if (cell.classList.contains('name-cell')) {
            // For name cells, get the data-tooltip attribute which contains the full name
            return cell.getAttribute('data-tooltip') || cell.textContent.trim();
        } else if (cell.classList.contains('source-cell')) {
            const link = cell.querySelector('a');
            return link ? link.href : cell.textContent.trim();
        }

        return cell.textContent.trim();
    }



    async loadKnowledgeBase() {
        try {
            const response = await fetch('/api/summaries');
            if (!response.ok) {
                throw new Error(`Server responded with ${response.status}: ${response.statusText}`);
            }

            const data = await response.json();

            // Validate data structure
            if (!Array.isArray(data)) {
                throw new Error('Invalid data format received from server');
            }

            this.knowledgeBase = this.sortKnowledgeBaseItems(data);
            this.knowledgeBaseData = this.knowledgeBase; // Store for chronometer updates

            this.renderKnowledgeBase();

            // Ensure bulk actions bar visibility is correct after initial load
            this.updateBulkActionsBar();
        } catch (error) {
            console.error('Error loading knowledge base:', error);

            // Show fallback UI or retry mechanism
            if (!this.knowledgeBase || this.knowledgeBase.length === 0) {
                // If we have no cached data, show error state
                const tbody = document.getElementById('knowledge-base-tbody');
                if (tbody) {
                    tbody.innerHTML = `
                        <tr>
                            <td colspan="8" class="empty-state-cell">
                                <div class="empty-state">
                                    <div class="empty-icon">⚠️</div>
                                    <h3>Failed to Load Knowledge Base</h3>
                                    <p>Unable to connect to server. Please check your connection and try again.</p>
                                    <button onclick="app.loadKnowledgeBase()" style="margin-top: 1rem; padding: 0.5rem 1rem; background: var(--primary-orange); color: white; border: none; border-radius: 4px; cursor: pointer;">Retry</button>
                                </div>
                            </td>
                        </tr>
                    `;
                }
                // Hide bulk actions bar when there's an error and no data
                const bulkActionsBar = document.getElementById('bulk-actions-bar');
                if (bulkActionsBar) {
                    bulkActionsBar.style.display = 'none';
                }
            }
        }
    }

    filterKnowledgeBase(searchTerm, type) {
        let filtered = this.knowledgeBase;

        if (type !== 'all') {
            filtered = filtered.filter(s => s.sourceType === type);
        }

        if (searchTerm) {
            const term = searchTerm.toLowerCase();
            filtered = filtered.filter(s =>
                (s.title && s.title.toLowerCase().includes(term)) ||
                (s.content && s.content.toLowerCase().includes(term))
            );
        }

        // Sort items by status priority and then by start time
        filtered = this.sortKnowledgeBaseItems(filtered);

        this.renderFilteredKnowledgeBase(filtered);
    }

    sortKnowledgeBaseItems(items) {
        return items.sort((a, b) => {
            // Define status priority (lower number = higher priority in display)
            const statusPriority = {
                'completed': 1,
                'failed': 2,
                'stopped': 3,
                'distilling': 4,
                'extracting': 5,
                'pending': 6
            };

            const aPriority = statusPriority[a.status] || 7;
            const bPriority = statusPriority[b.status] || 7;

            // First sort by status priority
            if (aPriority !== bPriority) {
                return aPriority - bPriority;
            }

            // Within same status, sort by start time (most recent first)
            const aTime = new Date(a.startTime || a.createdAt || 0);
            const bTime = new Date(b.startTime || b.createdAt || 0);
            return bTime - aTime;
        });
    }

    renderKnowledgeBase() {
        const searchTerm = document.getElementById('search-input').value;
        this.filterKnowledgeBase(searchTerm, this.currentFilter);
    }

    renderFilteredKnowledgeBase(items) {
        const tbody = document.getElementById('knowledge-base-tbody');
        const bulkActionsBar = document.getElementById('bulk-actions-bar');

        // Preserve dropdown state before re-rendering
        const openDropdown = document.querySelector('.action-dropdown.show');
        const openDropdownId = openDropdown ? openDropdown.closest('tr')?.dataset.id : null;

        if (!items || items.length === 0) {
            tbody.innerHTML = `
                <tr>
                    <td colspan="8" class="empty-state-cell">
                        <div class="empty-state">
                            <div class="empty-icon">🎯</div>
                            <h3>Ready to Process Knowledge</h3>
                            <p>Start by entering a URL, YouTube video, or uploading a document above.</p>
                        </div>
                    </td>
                </tr>
            `;
            // Hide bulk actions bar when empty and clear selections
            if (bulkActionsBar) {
                bulkActionsBar.style.display = 'none';
                this.selectedItems.clear();
            }
            return;
        }

        tbody.innerHTML = items.map(item => this.createTableRow(item)).join('');

        // Show bulk actions bar when there are items (only after initial load)
        if (bulkActionsBar && this.knowledgeBase && this.knowledgeBase.length > 0) {
            bulkActionsBar.style.display = 'flex';
        }

        // Fix any text overflow issues after rendering
        this.fixTextOverflow();

        // Restore checkbox states after rendering
        this.restoreCheckboxStates();

        // Restore dropdown state after rendering
        if (openDropdownId) {
            const restoredDropdown = document.querySelector(`tr[data-id="${openDropdownId}"] .action-dropdown`);
            if (restoredDropdown) {
                restoredDropdown.classList.add('show');
                // Re-add event listeners for the restored dropdown
                this.addDropdownEventListeners();
            }
        }
    }

    fixTextOverflow() {
        // Ensure text truncation is working properly
        const nameElements = document.querySelectorAll('.name-cell');
        const statusElements = document.querySelectorAll('.status-cell');
        const sourceElements = document.querySelectorAll('.source-cell');

        [...nameElements, ...statusElements, ...sourceElements].forEach(element => {
            if (element.scrollWidth > element.clientWidth) {
                // Force CSS properties if they're not being applied
                element.style.overflow = 'hidden';
                element.style.textOverflow = 'ellipsis';
                element.style.whiteSpace = 'nowrap';
                element.style.maxWidth = '0';
                element.style.minWidth = '0';
            }
        });
    }

    restoreCheckboxStates() {
        // Restore selected states for checkboxes
        this.selectedItems.forEach(id => {
            const checkbox = document.querySelector(`.row-checkbox[data-id="${id}"]`);
            if (checkbox) {
                checkbox.checked = true;
            }
        });

        // Update UI based on current selection
        this.handleRowSelection();
    }

    showTemporaryMessage(message, type = 'info') {
        // Create or get existing message container
        let messageContainer = document.getElementById('temp-message-container');
        if (!messageContainer) {
            messageContainer = document.createElement('div');
            messageContainer.id = 'temp-message-container';
            messageContainer.style.cssText = `
                position: fixed;
                top: 20px;
                right: 20px;
                z-index: 10000;
                max-width: 400px;
            `;
            document.body.appendChild(messageContainer);
        }

        // Create message element
        const messageElement = document.createElement('div');
        messageElement.style.cssText = `
            padding: 12px 16px;
            margin-bottom: 10px;
            border-radius: 6px;
            color: white;
            font-weight: 500;
            box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
            animation: slideIn 0.3s ease-out;
            background: ${type === 'success' ? '#4caf50' : type === 'warning' ? '#ff9800' : type === 'error' ? '#f44336' : '#2196f3'};
        `;

        messageElement.textContent = message;
        messageContainer.appendChild(messageElement);

        // Add slide-in animation
        const style = document.createElement('style');
        style.textContent = `
            @keyframes slideIn {
                from { transform: translateX(100%); opacity: 0; }
                to { transform: translateX(0); opacity: 1; }
            }
            @keyframes slideOut {
                from { transform: translateX(0); opacity: 1; }
                to { transform: translateX(100%); opacity: 0; }
            }
        `;
        if (!document.getElementById('temp-message-styles')) {
            style.id = 'temp-message-styles';
            document.head.appendChild(style);
        }

        // Remove message after 4 seconds
        setTimeout(() => {
            messageElement.style.animation = 'slideOut 0.3s ease-in';
            setTimeout(() => {
                if (messageElement.parentNode) {
                    messageElement.parentNode.removeChild(messageElement);
                }
            }, 300);
        }, 4000);
    }

    extractItemName(item) {
        // Extract name from title, URL, or file
        let name = '';

        if (item.title && item.title !== 'Processing...' && !item.title.includes('Processing')) {
            name = item.title;
        } else if (item.sourceUrl) {
            // Extract name from URL
            try {
                const url = new URL(item.sourceUrl);
                if (url.hostname.includes('youtube.com') || url.hostname.includes('youtu.be')) {
                    name = 'YouTube Video';
                } else {
                    name = url.hostname.replace('www.', '');
                }
            } catch {
                name = 'Web Page';
            }
        } else if (item.sourceFile) {
            // Remove extension from file name
            name = item.sourceFile.name.replace(/\.[^/.]+$/, '');
        }

        return name;
    }

    truncateText(text, maxLength) {
        if (!text || text.length <= maxLength) {
            return text;
        }
        return text.substring(0, maxLength - 3) + '...';
    }

    createTableRow(item) {
        const isSelected = this.clearingSelections ? false : this.selectedItems.has(item.id);
        const status = item.status;
        const isCompleted = status === 'completed';
        const isPending = status === 'pending';
        const isProcessing = ['pending', 'extracting', 'distilling'].includes(status);
        const isError = status === 'error';

        // Debug logging for status issues
        if (window.DEBUG_STATUS) {
            // Debug item status info
        }

        // Enhanced status mapping with more granular stages
        const STATUS_CONFIG = {
            'pending': { icon: '⏳', text: 'QUEUED', class: 'status-queued' },
            'extracting': { icon: '🔍', text: 'EXTRACTING', class: 'status-processing' },
            'distilling': { icon: '💠', text: 'DISTILLING', class: 'status-processing' },
            'completed': { icon: '✅', text: 'COMPLETED', class: 'status-completed' },
            'error': { icon: '❌', text: 'ERROR', class: 'status-error' },
            'stopped': { icon: '⏹️', text: 'STOPPED', class: 'status-stopped' }
        };

        const statusConfig = STATUS_CONFIG[status] || STATUS_CONFIG['pending'] || {
            icon: '⏳', text: 'QUEUED', class: 'status-queued'
        };
        const statusClass = statusConfig.class;
        const statusIcon = statusConfig.icon;
        const statusText = statusConfig.text;

        const title = item.title || 'Processing...';

        // Extract name for display
        const fullName = this.extractItemName(item);
        // Ensure name isn't excessively long (fallback if CSS fails)
        const name = fullName.length > 100 ? fullName.substring(0, 97) + '...' : fullName;

        // Format source display
        let sourceDisplay = '';
        if (item.sourceUrl) {
            const truncatedUrl = this.truncateText(item.sourceUrl, 40);
            sourceDisplay = `<a href="${item.sourceUrl}" target="_blank" class="source-link" title="${item.sourceUrl}">${truncatedUrl}</a>`;
        } else if (item.sourceFile) {
            const truncatedFileName = this.truncateText(item.sourceFile.name, 30);
            sourceDisplay = `<span class="file-source" title="${item.sourceFile.name}">${truncatedFileName}</span>`;
        }

        // Format status display with step
        const statusDisplay = `<span class="status-icon">${statusIcon}</span><span class="status-text">${statusText}</span>`;

        // Format processing time with live chronometer using centralized calculation
        const processingTimeDisplay = this.calculateProcessingTimeDisplay(item);

        // Format created date
        const createdAt = new Date(item.createdAt);
        const formattedDate = this.formatDate(createdAt);

        // Format actions as dropdown
        const actions = `
            <div class="action-dropdown" onclick="app.toggleActionDropdown(event, '${item.id}')">
                <button class="action-dropdown-btn">
                    Action
                    <span style="font-size: 0.7rem;">▼</span>
                </button>
                <div class="action-dropdown-content" id="dropdown-${item.id}" onclick="event.stopPropagation()">
                    ${isCompleted ? `
                        <button class="action-dropdown-item" onclick="event.stopPropagation(); app.showDistillationModal('${item.id}'); app.closeAllDropdowns();">
                            📄 View
                        </button>
                        <button class="action-dropdown-item" id="download-btn-${item.id}" 
                                onclick="event.stopPropagation(); app.handleDownloadClick('${item.id}'); app.closeAllDropdowns();"
                            <span class="btn-icon">📥</span>
                            <span class="btn-text">Download</span>
                        </button>
                    ` : ''}
                    ${isProcessing ? `
                        <button class="action-dropdown-item" onclick="event.stopPropagation(); app.stopProcessing('${item.id}'); app.closeAllDropdowns();">
                            ⏹️ Stop
                        </button>
                    ` : ''}
                    <button class="action-dropdown-item retry-item" onclick="event.stopPropagation(); app.retryDistillation('${item.id}'); app.closeAllDropdowns();">
                        🔄 Retry
                    </button>
                    ${(isCompleted || isError) && item.rawContent ? `
                        <button class="action-dropdown-item" onclick="event.stopPropagation(); app.showRawContent('${item.id}'); app.closeAllDropdowns();">
                            🔍 View Raw
                        </button>
                    ` : ''}
                    <button class="action-dropdown-item" onclick="event.stopPropagation(); app.showLogs('${item.id}'); app.closeAllDropdowns();">
                        📋 Logs
                    </button>
                    <button class="action-dropdown-item delete-item" onclick="event.stopPropagation(); app.deleteDistillation('${item.id}'); app.closeAllDropdowns();">
                        🗑️ Delete
                    </button>
                </div>
            </div>
        `;

        return `
            <tr data-id="${item.id}">
                <td class="checkbox-column">
                    <input type="checkbox" class="row-checkbox" data-id="${item.id}" onchange="app.handleRowSelection()" ${isSelected ? 'checked' : ''}>
                </td>
                <td class="name-cell truncate-text" data-tooltip="${fullName}">${name}</td>
                <td class="source-cell truncate-text" data-tooltip="${item.sourceUrl || (item.sourceFile ? item.sourceFile.name : '')}">${sourceDisplay}</td>
                <td class="type-cell">${this.getTypeLabel(item.sourceType)}</td>
                <td class="status-cell ${statusClass}">${statusDisplay}</td>
                <td class="time-cell">${processingTimeDisplay}</td>
                <td class="date-cell">${formattedDate}</td>
                <td class="actions-cell">${actions}</td>
            </tr>
        `;
    }

    async showDistillationModal(id) {
        try {
            const response = await fetch(`/api/summaries/${id}`);
            if (!response.ok) {
                throw new Error('Failed to load distillation');
            }

            const distillation = await response.json();

            document.getElementById('modal-title').textContent = distillation.title;

            let metaHtml = '';

            if (distillation.sourceUrl) {
                metaHtml += `<strong>Source:</strong> <a href="${distillation.sourceUrl}" target="_blank">${distillation.sourceUrl}</a><br>`;
            } else if (distillation.sourceFile) {
                metaHtml += `<strong>Source:</strong> ${distillation.sourceFile.name}<br>`;
            }

            metaHtml += `<strong>Status:</strong> ${distillation.status.toUpperCase()}<br>`;

            if (distillation.processingStep) {
                metaHtml += `<strong>Processing Step:</strong> ${distillation.processingStep}<br>`;
            }

            metaHtml += `<strong>Created:</strong> ${this.formatDate(new Date(distillation.createdAt))}<br>`;

            if (distillation.completedAt) {
                metaHtml += `<strong>Completed:</strong> ${this.formatDate(new Date(distillation.completedAt))}<br>`;
            }

            if (distillation.processingTime) {
                metaHtml += `<strong>Processing Time:</strong> ${this.formatTimeDisplay(distillation.processingTime)}<br>`;
            } else if (distillation.elapsedTime) {
                const minutes = Math.floor(distillation.elapsedTime / 60);
                const seconds = Math.floor(distillation.elapsedTime % 60);
                metaHtml += `<strong>Processing Time:</strong> ${minutes}m ${seconds}s<br>`;
            }

            if (distillation.wordCount) {
                metaHtml += `<strong>Word Count:</strong> ${distillation.wordCount} words<br>`;
            }

            document.getElementById('distillation-meta').innerHTML = metaHtml;
            document.getElementById('distillation-content').innerHTML = this.formatContent(distillation.content || '');
            document.getElementById('distillation-modal').style.display = 'block';



        } catch (error) {
            console.error('Error showing distillation:', error);
            alert('Error loading distillation: ' + error.message);
        }
    }

    toggleActionDropdown(event, id) {
        event.stopPropagation();

        // Close all other dropdowns and remove row classes
        document.querySelectorAll('.action-dropdown').forEach(dropdown => {
            if (dropdown !== event.currentTarget) {
                dropdown.classList.remove('show');
                // Remove dropdown-open class from parent row
                const parentRow = dropdown.closest('tr');
                if (parentRow) {
                    parentRow.classList.remove('dropdown-open');
                }
            }
        });

        // Toggle current dropdown
        const dropdown = event.currentTarget;
        const isOpen = dropdown.classList.toggle('show');
        const parentRow = dropdown.closest('tr');

        if (isOpen) {
            // Add dropdown-open class to parent row for z-index elevation
            if (parentRow) {
                parentRow.classList.add('dropdown-open');
            }

            // FORCE MAXIMUM Z-INDEX AND POSITIONING
            const dropdownContent = dropdown.querySelector('.action-dropdown-content');
            if (dropdownContent) {
                dropdownContent.style.zIndex = '2147483647';
                dropdownContent.style.position = 'fixed';
            }

            // Position dropdown intelligently
            this.positionDropdown(dropdown);

            // Add event listeners when dropdown opens
            this.addDropdownEventListeners();
        } else {
            // Remove dropdown-open class from parent row
            if (parentRow) {
                parentRow.classList.remove('dropdown-open');
            }
            // Remove event listeners when dropdown closes
            this.removeDropdownEventListeners();
        }
    }

    positionDropdown(dropdown) {
        const dropdownContent = dropdown.querySelector('.action-dropdown-content');
        if (!dropdownContent) return;

        // FORCE MAXIMUM Z-INDEX AND FIXED POSITIONING
        dropdownContent.style.position = 'fixed';
        dropdownContent.style.zIndex = '2147483647';

        // Get trigger button position
        const triggerRect = dropdown.getBoundingClientRect();
        const dropdownRect = dropdownContent.getBoundingClientRect();
        const viewport = {
            width: window.innerWidth,
            height: window.innerHeight
        };

        // Calculate position
        let top = triggerRect.bottom + 4;
        let left = triggerRect.right - dropdownRect.width;

        // Adjust horizontal position if dropdown extends beyond viewport
        if (left < 10) {
            left = triggerRect.left; // Align to left edge of trigger
        }
        if (left + dropdownRect.width > viewport.width - 10) {
            left = viewport.width - dropdownRect.width - 10;
        }

        // Adjust vertical position if dropdown extends beyond viewport
        if (top + dropdownRect.height > viewport.height - 10) {
            top = triggerRect.top - dropdownRect.height - 4; // Position above
        }
        if (top < 10) {
            top = 10; // Minimum distance from top
        }

        // Apply calculated position with MAXIMUM Z-INDEX
        dropdownContent.style.top = `${top}px`;
        dropdownContent.style.left = `${left}px`;
        dropdownContent.style.right = 'auto';
        dropdownContent.style.bottom = 'auto';
        dropdownContent.style.zIndex = '2147483647';
    }

    addDropdownEventListeners() {
        // Remove existing listeners first to prevent duplicates
        this.removeDropdownEventListeners();

        // Add document click listener for outside clicks
        this.documentClickHandler = (event) => {
            const openDropdown = document.querySelector('.action-dropdown.show');
            if (openDropdown && !openDropdown.contains(event.target)) {
                openDropdown.classList.remove('show');
                // Remove dropdown-open class from parent row
                const parentRow = openDropdown.closest('tr');
                if (parentRow) {
                    parentRow.classList.remove('dropdown-open');
                }
                this.removeDropdownEventListeners();
            }
        };

        // Add keyboard listener for Escape key
        this.keyboardHandler = (event) => {
            if (event.key === 'Escape') {
                const openDropdown = document.querySelector('.action-dropdown.show');
                if (openDropdown) {
                    openDropdown.classList.remove('show');
                    // Remove dropdown-open class from parent row
                    const parentRow = openDropdown.closest('tr');
                    if (parentRow) {
                        parentRow.classList.remove('dropdown-open');
                    }
                    this.removeDropdownEventListeners();
                }
            }
        };

        // Add scroll listener to close dropdowns when scrolling
        this.scrollHandler = () => {
            const openDropdown = document.querySelector('.action-dropdown.show');
            if (openDropdown) {
                openDropdown.classList.remove('show');
                // Remove dropdown-open class from parent row
                const parentRow = openDropdown.closest('tr');
                if (parentRow) {
                    parentRow.classList.remove('dropdown-open');
                }
                this.removeDropdownEventListeners();
            }
        };

        // Add listeners immediately
        document.addEventListener('click', this.documentClickHandler);
        document.addEventListener('keydown', this.keyboardHandler);
        document.addEventListener('scroll', this.scrollHandler, true);
    }

    removeDropdownEventListeners() {
        if (this.documentClickHandler) {
            document.removeEventListener('click', this.documentClickHandler);
            this.documentClickHandler = null;
        }
        if (this.keyboardHandler) {
            document.removeEventListener('keydown', this.keyboardHandler);
            this.keyboardHandler = null;
        }
        if (this.scrollHandler) {
            document.removeEventListener('scroll', this.scrollHandler, true);
            this.scrollHandler = null;
        }
    }

    closeAllDropdowns() {
        document.querySelectorAll('.action-dropdown.show').forEach(dropdown => {
            dropdown.classList.remove('show');
            // Remove dropdown-open class from parent row
            const parentRow = dropdown.closest('tr');
            if (parentRow) {
                parentRow.classList.remove('dropdown-open');
            }
        });
        this.removeDropdownEventListeners();
    }


    async showRawContent(id) {
        try {
            const response = await fetch(`/api/summaries/${id}`);
            if (!response.ok) {
                throw new Error('Failed to load distillation');
            }

            const distillation = await response.json();

            if (!distillation.rawContent) {
                alert('No raw content available for this distillation');
                return;
            }

            document.getElementById('raw-content-title').textContent = `Raw Content: ${distillation.title}`;
            document.getElementById('raw-content-text').textContent = distillation.rawContent;
            document.getElementById('raw-content-modal').style.display = 'block';

        } catch (error) {
            console.error('Error showing raw content:', error);
            alert('Error loading raw content: ' + error.message);
        }
    }

    async showLogs(id) {
        try {
            const response = await fetch(`/api/summaries/${id}`);
            if (!response.ok) {
                throw new Error('Failed to load distillation');
            }

            const distillation = await response.json();

            document.getElementById('logs-title').textContent = `Processing Logs: ${distillation.title}`;

            // Create comprehensive logs including system information
            let logsHtml = '';

            // Add distillation information header
            logsHtml += `
                <div class="log-section">
                    <h4 class="log-section-title">📊 Distillation Information</h4>
                    <div class="log-entry log-info">
                        <span class="log-message"><strong>ID:</strong> ${distillation.id}</span>
                    </div>
                    <div class="log-entry log-info">
                        <span class="log-message"><strong>Source:</strong> ${distillation.sourceUrl || distillation.sourceFile || ''}</span>
                    </div>
                    <div class="log-entry log-info">
                        <span class="log-message"><strong>Type:</strong> ${distillation.sourceType || ''}</span>
                    </div>
                    <div class="log-entry log-info">
                        <span class="log-message"><strong>Status:</strong> ${distillation.status}</span>
                    </div>
                    <div class="log-entry log-info">
                        <span class="log-message"><strong>Processing Step:</strong> ${distillation.processingStep || 'N/A'}</span>
                    </div>
                    <div class="log-entry log-info">
                        <span class="log-message"><strong>Created:</strong> ${new Date(distillation.createdAt).toLocaleString()}</span>
                    </div>
                    ${distillation.completedAt ? `
                        <div class="log-entry log-info">
                            <span class="log-message"><strong>Completed:</strong> ${new Date(distillation.completedAt).toLocaleString()}</span>
                        </div>
                    ` : ''}
                    ${distillation.processingTime ? `
                        <div class="log-entry log-info">
                            <span class="log-message"><strong>Processing Time:</strong> ${this.formatTimeDisplay(distillation.processingTime)}</span>
                        </div>
                    ` : distillation.elapsedTime ? `
                        <div class="log-entry log-info">
                            <span class="log-message"><strong>Processing Time:</strong> ${Math.floor(distillation.elapsedTime / 60)}m ${Math.floor(distillation.elapsedTime % 60)}s</span>
                        </div>
                    ` : ''}
                    ${distillation.wordCount ? `
                        <div class="log-entry log-info">
                            <span class="log-message"><strong>Word Count:</strong> ${distillation.wordCount} words</span>
                        </div>
                    ` : ''}
                    ${distillation.error ? `
                        <div class="log-entry log-error">
                            <span class="log-message"><strong>Error:</strong> ${distillation.error}</span>
                        </div>
                    ` : ''}
                </div>
            `;

            // Add processing logs section
            if (distillation.logs && distillation.logs.length > 0) {
                logsHtml += `
                    <div class="log-section">
                        <h4 class="log-section-title">📋 Processing Logs</h4>
                `;

                distillation.logs.forEach(log => {
                    const timestamp = new Date(log.timestamp);
                    const formattedTime = timestamp.toLocaleTimeString();
                    const levelClass = `log-${log.level}`;

                    logsHtml += `
                        <div class="log-entry ${levelClass}">
                            <span class="log-time">[${formattedTime}]</span>
                            <span class="log-level">[${log.level.toUpperCase()}]</span>
                            <span class="log-message">${log.message}</span>
                        </div>
                    `;
                });

                logsHtml += `</div>`;
            } else {
                logsHtml += `
                    <div class="log-section">
                        <h4 class="log-section-title">📋 Processing Logs</h4>
                        <div class="log-entry log-info">
                            <span class="log-message">No detailed processing logs available for this item.</span>
                        </div>
                    </div>
                `;
            }

            // Add extraction metadata if available
            if (distillation.extractionMetadata) {
                logsHtml += `
                    <div class="log-section">
                        <h4 class="log-section-title">🔍 Extraction Details</h4>
                        <div class="log-entry log-info">
                            <span class="log-message"><strong>Content Type:</strong> ${distillation.extractionMetadata.contentType || ''}</span>
                        </div>
                        <div class="log-entry log-info">
                            <span class="log-message"><strong>Extraction Method:</strong> ${distillation.extractionMetadata.extractionMethod || ''}</span>
                        </div>
                        <div class="log-entry log-info">
                            <span class="log-message"><strong>Fallback Used:</strong> ${distillation.extractionMetadata.fallbackUsed ? 'Yes' : 'No'}</span>
                        </div>
                    </div>
                `;
            }

            document.getElementById('logs-content').innerHTML = logsHtml;
            document.getElementById('logs-modal').style.display = 'block';

        } catch (error) {
            console.error('Error showing logs:', error);
            alert('Error loading logs: ' + error.message);
        }
    }

    closeDistillationModal() {
        document.getElementById('distillation-modal').style.display = 'none';
    }

    closeRawContentModal() {
        document.getElementById('raw-content-modal').style.display = 'none';
    }

    closeLogsModal() {
        document.getElementById('logs-modal').style.display = 'none';
    }

    handleDownloadClick(id) {
        const buttonId = `download-btn-${id}`;
        const state = this.downloadStateManager.getDownloadState(buttonId);

        if (state.state === 'loading' || state.state === 'cancellable') {
            // Cancel the download
            this.downloadStateManager.cancelDownload(buttonId);
        } else {
            // Start the download
            this.downloadDistillation(id);
        }
    }



    async downloadDistillation(id) {
        const buttonId = `download-btn-${id}`;

        try {
            // Set loading state
            const abortController = new AbortController();
            this.downloadStateManager.setDownloadState(buttonId, 'loading', {
                downloadId: id,
                abortController: abortController,
                startTime: Date.now()
            });

            const response = await fetch(`/api/summaries/${id}/pdf`, {
                signal: abortController.signal
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to download distillation');
            }

            // Get filename from Content-Disposition header
            const contentDisposition = response.headers.get('Content-Disposition');
            let filename = `distillation-${id}.pdf`;

            if (contentDisposition) {
                const filenameMatch = contentDisposition.match(/filename="([^"]+)"/);
                if (filenameMatch) {
                    filename = filenameMatch[1];
                }
            }

            // Handle PDF download with proper blob type
            const blob = await response.blob();
            // Ensure blob is treated as PDF
            const pdfBlob = new Blob([blob], { type: 'application/pdf' });

            const url = window.URL.createObjectURL(pdfBlob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = filename;
            a.target = '_blank'; // Also try to open in new tab as fallback
            document.body.appendChild(a);
            a.click();

            // Wait a moment to ensure download has started before resetting state
            setTimeout(() => {
                this.downloadStateManager.setDownloadState(buttonId, 'idle');
            }, 1000);

            // Clean up after a delay
            setTimeout(() => {
                document.body.removeChild(a);
                window.URL.revokeObjectURL(url);
            }, 100);

        } catch (error) {
            if (error.name === 'AbortError') {
                // Download was cancelled, state already reset by cancelDownload
                return;
            }

            console.error('Error downloading distillation:', error);

            // Set error state
            this.downloadStateManager.setDownloadState(buttonId, 'error', {
                errorMessage: error.message || 'Download failed'
            });
        }
    }

    async stopProcessing(id) {
        try {
            const response = await fetch(`/api/summaries/${id}/stop`, {
                method: 'POST'
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to stop processing');
            }

            // Force immediate status updates to show the stopped status
            this.forceStatusUpdate();
            setTimeout(() => this.forceStatusUpdate(), 100);
            setTimeout(() => this.forceStatusUpdate(), 500);

        } catch (error) {
            console.error('Error stopping processing:', error);
            alert('Error: ' + error.message);
        }
    }

    async retryDistillation(id) {
        try {
            const url = `/api/summaries/${id}/retry`;

            const response = await fetch(url, {
                method: 'POST'
            });

            // Response received

            if (!response.ok) {
                let errorMessage = 'Failed to retry distillation';
                try {
                    const error = await response.json();
                    errorMessage = error.message || errorMessage;
                } catch (parseError) {
                    console.error('Failed to parse error response:', parseError);
                    errorMessage = `HTTP ${response.status}: ${response.statusText}`;
                }
                throw new Error(errorMessage);
            }

            // Retry initiated successfully - force MULTIPLE immediate status updates
            this.forceStatusUpdate();
            setTimeout(() => this.forceStatusUpdate(), 100);
            setTimeout(() => this.forceStatusUpdate(), 500);
            setTimeout(() => this.forceStatusUpdate(), 1000);
            setTimeout(() => this.forceStatusUpdate(), 2000);

        } catch (error) {
            console.error('Error retrying distillation:', error);
            alert('Error: ' + error.message);
        }
    }

    async deleteDistillation(id) {
        if (!confirm('Are you sure you want to delete this distillation?')) {
            return;
        }

        try {
            const response = await fetch(`/api/summaries/${id}`, {
                method: 'DELETE'
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.message || 'Failed to delete distillation');
            }

            // Remove the row from the table immediately
            const row = document.querySelector(`tr[data-id="${id}"]`);
            if (row) {
                row.remove();
            }

            // Remove from local data
            this.knowledgeBase = this.knowledgeBase.filter(item => item.id !== id);

            // Check if table is now empty
            const tbody = document.getElementById('knowledge-base-tbody');
            if (tbody.children.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8" class="empty-state-cell">
                            <div class="empty-state">
                                <div class="empty-icon">🎯</div>
                                <h3>Ready to Process Knowledge</h3>
                                <p>Start by entering a URL, YouTube video, or uploading a document above.</p>
                            </div>
                        </td>
                    </tr>
                `;
            }

        } catch (error) {
            console.error('Error deleting distillation:', error);
            alert('Error: ' + error.message);
        }
    }

    getTypeLabel(type) {
        const labels = {
            'url': '🌐 Web',
            'youtube': '📺 YouTube',
            'file': '📄 Document'
        };
        return labels[type] || type;
    }

    formatDate(date) {
        return new Intl.DateTimeFormat('en-US', {
            month: 'short',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        }).format(date);
    }

    formatContent(content) {
        if (!content) return '';

        // If content already contains HTML tags (like <strong>), preserve them but enhance numbered lists
        if (content.includes('<strong>') || content.includes('<')) {
            // Content already has HTML formatting, process it to enhance numbered lists
            let processedContent = content
                .split('\n\n')
                .map(paragraph => {
                    if (paragraph.trim()) {
                        // Check if this paragraph contains numbered list patterns that need bold formatting
                        const lines = paragraph.split('\n');
                        const processedLines = lines.map(line => {
                            const trimmedLine = line.trim();
                            // Handle nested numbering patterns like "1. 1. Text"
                            const nestedNumberMatch = trimmedLine.match(/^(\d+\.\s*)+(.+)$/);
                            if (nestedNumberMatch && !trimmedLine.includes('<strong>')) {
                                // Apply bold formatting to the entire line if not already present
                                return `<strong>${trimmedLine}</strong>`;
                            }
                            return line;
                        });

                        const processedParagraph = processedLines.join('\n');

                        // If paragraph already has HTML tags, don't wrap in <p>
                        if (processedParagraph.includes('<')) {
                            return processedParagraph.replace(/\n/g, '<br>');
                        } else {
                            return `<p>${processedParagraph.replace(/\n/g, '<br>')}</p>`;
                        }
                    }
                    return '';
                })
                .filter(p => p)
                .join('');

            return processedContent;
        }

        // Convert markdown to HTML for content without HTML tags
        return this.markdownToHtml(content);
    }

    markdownToHtml(markdown) {
        if (!markdown) return '';

        // Process markdown and convert numbered lists to sequential numbering
        let numberedItemCounter = 0;
        const lines = markdown.split('\n');
        const result = [];
        let currentParagraph = [];
        let inList = false;
        let listType = null;

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const trimmedLine = line.trim();

            // Empty line - end current paragraph or list
            if (!trimmedLine) {
                if (currentParagraph.length > 0) {
                    result.push(`<p>${currentParagraph.join('<br>')}</p>`);
                    currentParagraph = [];
                }
                if (inList) {
                    result.push(`</${listType}>`);
                    inList = false;
                    listType = null;
                    // DON'T reset numberedItemCounter here - keep it going across the document
                }
                continue;
            }

            // Headers
            if (trimmedLine.startsWith('### ')) {
                const state = this.flushParagraph(result, currentParagraph, inList, listType);
                inList = state.inList;
                listType = state.listType;
                // DON'T reset counter after headers - keep numbering continuous
                result.push(`<h3>${trimmedLine.substring(4)}</h3>`);
                continue;
            }
            if (trimmedLine.startsWith('## ')) {
                const state = this.flushParagraph(result, currentParagraph, inList, listType);
                inList = state.inList;
                listType = state.listType;
                // DON'T reset counter after headers - keep numbering continuous
                result.push(`<h2>${trimmedLine.substring(3)}</h2>`);
                continue;
            }
            if (trimmedLine.startsWith('# ')) {
                const state = this.flushParagraph(result, currentParagraph, inList, listType);
                inList = state.inList;
                listType = state.listType;
                // DON'T reset counter after headers - keep numbering continuous
                result.push(`<h1>${trimmedLine.substring(2)}</h1>`);
                continue;
            }

            // Unordered list items
            if (trimmedLine.startsWith('- ') || trimmedLine.startsWith('* ')) {
                if (currentParagraph.length > 0) {
                    result.push(`<p>${currentParagraph.join('<br>')}</p>`);
                    currentParagraph = [];
                }
                if (!inList || listType !== 'ul') {
                    if (inList) result.push(`</${listType}>`);
                    result.push('<ul>');
                    inList = true;
                    listType = 'ul';
                    // DON'T reset counter for unordered lists - keep numbering continuous
                }
                const content = this.processInlineMarkdown(trimmedLine.substring(2));
                result.push(`<li>${content}</li>`);
                continue;
            }

            // Enhanced numbered list processing - handles nested numbering like "1. 1. Text"
            const orderedMatch = trimmedLine.match(/^(\d+\.\s*)+(.+)$/);
            if (orderedMatch) {
                if (currentParagraph.length > 0) {
                    result.push(`<p>${currentParagraph.join('<br>')}</p>`);
                    currentParagraph = [];
                }

                if (!inList || listType !== 'ol') {
                    if (inList) result.push(`</${listType}>`);
                    result.push('<ol class="manual-numbered">');
                    inList = true;
                    listType = 'ol';
                    // DON'T reset counter here - keep incrementing across the entire document
                }

                numberedItemCounter++;
                // Extract the original numbering and content
                const originalNumbering = orderedMatch[1].trim(); // e.g., "1. 1."
                const textContent = orderedMatch[2]; // The actual content

                // Process the content for inline markdown (including bold)
                const processedContent = this.processInlineMarkdown(textContent);

                // Create list item with bold formatting for the entire line
                const listItem = `<li><strong><span class="list-number">${numberedItemCounter}.</span> ${processedContent}</strong></li>`;
                result.push(listItem);
                continue;
            }

            // Regular paragraph line
            if (inList) {
                result.push(`</${listType}>`);
                inList = false;
                listType = null;
                // DON'T reset numberedItemCounter here - keep it going
            }

            const processedLine = this.processInlineMarkdown(trimmedLine);
            currentParagraph.push(processedLine);
        }

        // Flush any remaining content
        this.flushParagraph(result, currentParagraph, inList, listType);

        return result.join('\n');
    }

    /**
     * Helper method to flush current paragraph and close lists
     */
    flushParagraph(result, currentParagraph, inList, listType) {
        if (currentParagraph.length > 0) {
            result.push(`<p>${currentParagraph.join('<br>')}</p>`);
            currentParagraph.length = 0;
        }
        if (inList) {
            result.push(`</${listType}>`);
            inList = false;
            listType = null;
        }
        return { inList: false, listType: null };
    }

    /**
     * Process inline markdown (bold, italic, code, links)
     * @param {string} text - Text to process
     * @returns {string} - Processed text
     */
    processInlineMarkdown(text) {
        if (!text) return '';

        let processed = text;

        // Code blocks (do first to avoid processing markdown inside code)
        processed = processed.replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>');
        processed = processed.replace(/`([^`]+)`/g, '<code>$1</code>');

        // Bold text
        processed = processed.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        processed = processed.replace(/__(.*?)__/g, '<strong>$1</strong>');

        // Italic text (avoid conflicts with bold)
        processed = processed.replace(/(?<!\*)\*([^*]+)\*(?!\*)/g, '<em>$1</em>');
        processed = processed.replace(/(?<!_)_([^_]+)_(?!_)/g, '<em>$1</em>');

        // Links
        processed = processed.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank">$1</a>');

        return processed;
    }

    truncateText(text, maxLength) {
        // Handle null, undefined, or non-string values
        if (!text || typeof text !== 'string') {
            return '';
        }

        if (text.length <= maxLength) return text;
        return text.substring(0, maxLength) + '...';
    }

    // Bulk Actions Methods


    getSelectedIds() {
        const checkedBoxes = document.querySelectorAll('.row-checkbox:checked');
        return Array.from(checkedBoxes).map(checkbox => checkbox.dataset.id);
    }

    handleBulkDownloadClick() {
        const buttonId = 'bulk-download-btn';
        const state = this.downloadStateManager.getDownloadState(buttonId);

        if (state.state === 'cancellable') {
            // Cancel the download
            this.downloadStateManager.cancelDownload(buttonId);
        } else {
            // Start the download
            this.bulkDownload();
        }
    }

    async bulkDownload() {
        const selectedIds = this.getSelectedIds();
        if (selectedIds.length === 0) {
            alert('Please select items to download');
            return;
        }

        // If only one item is selected, use single download logic but with bulk button state management
        if (selectedIds.length === 1) {
            this.downloadSingleFromBulk(selectedIds[0]);
            return;
        }

        const buttonId = 'bulk-download-btn';

        try {
            // Set loading state for bulk download
            const abortController = new AbortController();
            this.downloadStateManager.setDownloadState(buttonId, 'loading', {
                downloadId: 'bulk',
                abortController: abortController,
                startTime: Date.now()
            });

            // Request a ZIP file from the backend endpoint
            const response = await fetch('/api/summaries/bulk-download', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ ids: selectedIds }),
                signal: abortController.signal
            });

            if (!response.ok) {
                let errorMessage = 'Failed to download ZIP archive';
                try {
                    const error = await response.json();
                    errorMessage = error.message || errorMessage;
                } catch (e) {
                    errorMessage = `Server error: ${response.status} ${response.statusText}`;
                }
                throw new Error(errorMessage);
            }

            // Handle the ZIP file download
            const blob = await response.blob();
            const contentDisposition = response.headers.get('Content-Disposition');
            let filename = `sawron-download.zip`; // Default filename

            if (contentDisposition) {
                const filenameMatch = contentDisposition.match(/filename="([^"]+)"/);
                if (filenameMatch && filenameMatch[1]) {
                    filename = filenameMatch[1];
                }
            }

            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();

            // Wait a moment to ensure download has started before resetting state
            setTimeout(() => {
                this.downloadStateManager.setDownloadState(buttonId, 'idle');
            }, 1000);

            // Clean up after a delay
            setTimeout(() => {
                window.URL.revokeObjectURL(url);
                a.remove();
            }, 100);

        } catch (error) {
            if (error.name === 'AbortError') return;
            console.error('Error during bulk download:', error);
            this.downloadStateManager.setDownloadState(buttonId, 'error', {
                errorMessage: 'Bulk download failed'
            });
        }
    }

    async downloadSingleFromBulk(id) {
        const buttonId = 'bulk-download-btn';

        try {
            // Set loading state for bulk download button
            const abortController = new AbortController();
            this.downloadStateManager.setDownloadState(buttonId, 'loading', {
                downloadId: id,
                abortController: abortController,
                startTime: Date.now()
            });

            // Use the same logic as individual download but with bulk button state
            const response = await fetch(`/api/summaries/${id}/pdf`, {
                signal: abortController.signal
            });

            if (!response.ok) {
                let errorMessage = 'Failed to download PDF';
                try {
                    const error = await response.json();
                    errorMessage = error.message || errorMessage;
                } catch (e) {
                    errorMessage = `Server error: ${response.status} ${response.statusText}`;
                }
                throw new Error(errorMessage);
            }

            // Handle the PDF download
            const blob = await response.blob();
            const contentDisposition = response.headers.get('Content-Disposition');
            let filename = `distillation-${id}.pdf`; // Default filename

            if (contentDisposition) {
                const filenameMatch = contentDisposition.match(/filename="([^"]+)"/);
                if (filenameMatch && filenameMatch[1]) {
                    filename = filenameMatch[1];
                }
            }

            const url = window.URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.style.display = 'none';
            a.href = url;
            a.download = filename;
            document.body.appendChild(a);
            a.click();

            // Wait a moment to ensure download has started before resetting state
            setTimeout(() => {
                this.downloadStateManager.setDownloadState(buttonId, 'idle');
            }, 1000);

            // Clean up after a delay
            setTimeout(() => {
                window.URL.revokeObjectURL(url);
                a.remove();
            }, 100);

        } catch (error) {
            if (error.name === 'AbortError') return;
            console.error('Error during single download from bulk:', error);
            this.downloadStateManager.setDownloadState(buttonId, 'error', {
                errorMessage: error.message || 'Download failed'
            });
        }
    }

    async bulkDelete() {
        const selectedIds = this.getSelectedIds();
        if (selectedIds.length === 0) {
            alert('Please select items to delete');
            return;
        }

        const confirmMessage = selectedIds.length === 1
            ? 'Are you sure you want to delete this item? This action cannot be undone.'
            : `Are you sure you want to delete ${selectedIds.length} items? This action cannot be undone.`;

        if (!confirm(confirmMessage)) {
            return;
        }

        // Disable delete button during operation
        const deleteBtn = document.getElementById('bulk-delete-btn');
        const originalText = deleteBtn.innerHTML;
        deleteBtn.disabled = true;
        deleteBtn.innerHTML = '<span class="btn-icon">⏳</span><span class="btn-text">Deleting...</span>';

        try {
            const response = await fetch('/api/summaries/bulk-delete', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ ids: selectedIds })
            });

            if (!response.ok) {
                let errorMessage = 'Failed to delete items';
                try {
                    const error = await response.json();
                    errorMessage = error.message || errorMessage;
                } catch (e) {
                    errorMessage = `Server error: ${response.status} ${response.statusText}`;
                }
                throw new Error(errorMessage);
            }

            const result = await response.json();
            // Show success/partial success feedback
            if (result.deletedCount === selectedIds.length) {
                const itemText = result.deletedCount === 1 ? 'item' : 'items';
                this.showTemporaryMessage(`Successfully deleted ${result.deletedCount} ${itemText}`, 'success');
            } else if (result.deletedCount > 0) {
                this.showTemporaryMessage(`Deleted ${result.deletedCount} of ${selectedIds.length} items. Some items could not be deleted.`, 'warning');
            } else {
                this.showTemporaryMessage('No items were deleted. Please try again.', 'error');
            }

            // Handle any deletion errors silently

            // Remove deleted rows from table (use selectedIds since we know which ones were requested)
            selectedIds.forEach(id => {
                const row = document.querySelector(`tr[data-id="${id}"]`);
                if (row) {
                    row.remove();
                }
            });

            // Update local data
            this.knowledgeBase = this.knowledgeBase.filter(item => !selectedIds.includes(item.id));

            // Check if table is now empty
            const tbody = document.getElementById('knowledge-base-tbody');
            if (tbody.children.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8" class="empty-state-cell">
                            <div class="empty-state">
                                <div class="empty-icon">🎯</div>
                                <h3>Ready to Process Knowledge</h3>
                                <p>Start by entering a URL, YouTube video, or uploading a document above.</p>
                            </div>
                        </td>
                    </tr>
                `;
            }

            // Hide bulk actions bar
            document.getElementById('bulk-actions-bar').style.display = 'none';

            // Clear selection
            this.clearAllSelections();

            // Force refresh bulk actions bar to ensure consistency
            setTimeout(() => this.nuclearSelectionReset(), 100);
            setTimeout(() => this.nuclearSelectionReset(), 500);

        } catch (error) {
            console.error('Error deleting items:', error);

            // Show user-friendly error message
            let userMessage = 'Failed to delete items. ';
            if (error.message.includes('network') || error.message.includes('fetch')) {
                userMessage += 'Please check your internet connection and try again.';
            } else if (error.message.includes('Server error: 5')) {
                userMessage += 'Server error occurred. Please try again later.';
            } else {
                userMessage += error.message;
            }

            alert(userMessage);
        } finally {
            // Re-enable delete button
            deleteBtn.disabled = false;
            deleteBtn.innerHTML = originalText;
        }
    }

    async bulkRetry() {
        const selectedIds = this.getSelectedIds();
        if (selectedIds.length === 0) {
            alert('Please select items to retry.');
            return;
        }

        if (!confirm(`Are you sure you want to retry ${selectedIds.length} selected item(s)?`)) {
            return;
        }

        try {
            // Process selected items from bottom to top (reverse order) with delay to ensure proper sequencing
            const idsToRetry = [...selectedIds].reverse();
            for (let i = 0; i < idsToRetry.length; i++) {
                const id = idsToRetry[i];
                // Add small delay between retries to ensure bottom-to-top processing order
                if (i > 0) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
                await this.retryDistillation(id);
            }

            this.showTemporaryMessage(`Retrying ${selectedIds.length} selected items...`, 'info');

            // Clear selection after retry
            this.clearAllSelections();

            // Force status updates to detect new items
            this.forceStatusUpdate();
            setTimeout(() => this.forceStatusUpdate(), 500);
            setTimeout(() => this.forceStatusUpdate(), 1000);

        } catch (error) {
            console.error('Error retrying selected items:', error);
            alert('Error retrying selected items: ' + error.message);
        }
    }

    async bulkRetryAll() {
        if (!confirm('Are you sure you want to retry ALL items in the knowledge base? This will reprocess all distillations.')) {
            return;
        }

        try {
            const allItems = this.knowledgeBase;
            if (allItems.length === 0) {
                alert('No items to retry.');
                return;
            }

            // Process items from bottom to top (reverse order) with delay to ensure proper sequencing
            const itemsToRetry = [...allItems].reverse();
            for (let i = 0; i < itemsToRetry.length; i++) {
                const item = itemsToRetry[i];
                // Add small delay between retries to ensure bottom-to-top processing order
                if (i > 0) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
                await this.retryDistillation(item.id);
            }

            this.showTemporaryMessage(`Retrying all ${allItems.length} items...`, 'info');

            // Force MULTIPLE immediate status updates after retry all
            this.forceStatusUpdate();
            setTimeout(() => this.forceStatusUpdate(), 100);
            setTimeout(() => this.forceStatusUpdate(), 500);
            setTimeout(() => this.forceStatusUpdate(), 1000);
            setTimeout(() => this.forceStatusUpdate(), 2000);

        } catch (error) {
            console.error('Error retrying all items:', error);
            alert('Error retrying all items: ' + error.message);
        }
    }

    async bulkRetryFailed() {
        try {
            const failedItems = this.knowledgeBase.filter(item => item.status === 'error');

            if (failedItems.length === 0) {
                alert('No failed items to retry');
                return;
            }

            if (!confirm(`Are you sure you want to retry ${failedItems.length} failed item(s)?`)) {
                return;
            }

            // Process failed items from bottom to top (reverse order) with delay to ensure proper sequencing
            const itemsToRetry = [...failedItems].reverse();
            for (let i = 0; i < itemsToRetry.length; i++) {
                const item = itemsToRetry[i];
                // Add small delay between retries to ensure bottom-to-top processing order
                if (i > 0) {
                    await new Promise(resolve => setTimeout(resolve, 100));
                }
                await this.retryDistillation(item.id);
            }

            this.showTemporaryMessage(`Retrying ${failedItems.length} failed items...`, 'info');

            // Force MULTIPLE immediate status updates after retry failed
            this.forceStatusUpdate();
            setTimeout(() => this.forceStatusUpdate(), 100);
            setTimeout(() => this.forceStatusUpdate(), 500);
            setTimeout(() => this.forceStatusUpdate(), 1000);
            setTimeout(() => this.forceStatusUpdate(), 2000);

        } catch (error) {
            console.error('Error retrying failed items:', error);
            alert('Error retrying failed items: ' + error.message);
        }
    }



    async bulkDelete() {
        const selectedItems = Array.from(this.selectedItems);

        if (selectedItems.length === 0) {
            alert('No items selected for deletion');
            return;
        }

        if (!confirm(`Are you sure you want to delete ${selectedItems.length} selected item(s)?`)) {
            return;
        }

        try {
            // Delete items one by one
            for (const id of selectedItems) {
                const response = await fetch(`/api/summaries/${id}`, {
                    method: 'DELETE'
                });

                if (response.ok) {
                    // Remove the row from the table immediately
                    const row = document.querySelector(`tr[data-id="${id}"]`);
                    if (row) {
                        row.remove();
                    }

                    // Remove from local data
                    this.knowledgeBase = this.knowledgeBase.filter(item => item.id !== id);
                    this.selectedItems.delete(id);
                }
            }

            this.showTemporaryMessage(`Deleted ${selectedItems.length} items`, 'success');
            this.updateBulkActionsBar();

            // Check if table is now empty
            const tbody = document.getElementById('knowledge-base-tbody');
            if (tbody.children.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="8" class="empty-state-cell">
                            <div class="empty-state">
                                <div class="empty-icon">🎯</div>
                                <h3>Ready to Process Knowledge</h3>
                                <p>Start by entering a URL, YouTube video, or uploading a document above.</p>
                            </div>
                        </td>
                    </tr>
                `;
            }

        } catch (error) {
            console.error('Error deleting items:', error);
            alert('Error deleting items: ' + error.message);
        }
    }


}

// Global functions for HTML onclick handlers
async function pasteFromClipboard(event) {
    if (event) {
        event.preventDefault();
        event.stopPropagation();
    }

    try {
        // Try to read from clipboard directly
        const text = await navigator.clipboard.readText();
        const mainInput = document.getElementById('main-input');
        mainInput.value = text;
        mainInput.focus();
        app.handleInputChange(text);
        // Text pasted successfully
    } catch (err) {
        console.error('Failed to read clipboard:', err);

        // Fallback: show alert and focus input for manual paste
        alert('Unable to access clipboard automatically, please paste manually');
        const mainInput = document.getElementById('main-input');
        mainInput.focus();
        mainInput.select();
    }
}

// Removed triggerFileUpload function - now handled by dropzone click event

function startDistillation() {
    app.startDistillation();
}

function removeFile() {
    app.removeFile();
}

function closeDistillationModal() {
    app.closeDistillationModal();
}

function closeRawContentModal() {
    app.closeRawContentModal();
}

function closeLogsModal() {
    app.closeLogsModal();
}

function refreshKnowledgeBase() {
    // Manual refresh - reload the entire knowledge base
    app.loadKnowledgeBase();
}

function toggleSelectAll() {
    app.toggleSelectAll();
}

function handleBulkDownloadClick() {
    app.handleBulkDownloadClick();
}

function bulkDelete() {
    app.bulkDelete();
}

function bulkRetry() {
    app.bulkRetry();
}

function bulkRetryAll() {
    app.bulkRetryAll();
}

function bulkRetryFailed() {
    app.bulkRetryFailed();
}

// Initialize app
const app = new SawronApp();

// Make functions globally accessible for HTML onclick handlers
window.startDistillation = startDistillation;
window.removeFile = removeFile;
window.closeDistillationModal = closeDistillationModal;
window.closeRawContentModal = closeRawContentModal;
window.closeLogsModal = closeLogsModal;
window.refreshKnowledgeBase = refreshKnowledgeBase;
window.toggleSelectAll = toggleSelectAll;
window.handleBulkDownloadClick = handleBulkDownloadClick;
window.bulkDelete = bulkDelete;
window.bulkRetry = bulkRetry;
window.bulkRetryAll = bulkRetryAll;
window.bulkRetryFailed = bulkRetryFailed;

// AI Settings Management
class AISettingsManager {
    constructor() {
        this.settings = this.getDefaultSettings(); // Start with defaults
        this.loadSettings().then(settings => {
            this.settings = settings;
        });
        this.providerModels = {
            openai: ['o3-mini', 'o4-mini', 'gpt-4o', 'gpt-4.1'],
            anthropic: ['claude-opus-4-20250514', 'claude-sonnet-4-20250514', 'claude-3-7-sonnet-latest', 'claude-3-5-haiku-latest'],
            google: ['gemini-2.5-pro', 'gemini-2.5-flash', 'gemini-2.5-flash-lite'],
            grok: ['grok-4-0709', 'grok-3', 'grok-3-mini', 'grok-3-fast'],
            deepseek: ['deepseek-chat', 'deepseek-reasoner']
        };
        this.providerInfo = {
            openai: { name: 'OpenAI', keyPrefix: 'sk-', help: 'Get your API key from https://platform.openai.com/api-keys' },
            anthropic: { name: 'Anthropic Claude', keyPrefix: 'sk-ant-', help: 'Get your API key from https://console.anthropic.com/' },
            google: { name: 'Google Gemini', keyPrefix: '', help: 'Get your API key from https://makersuite.google.com/app/apikey' },
            grok: { name: 'Grok', keyPrefix: 'xai-', help: 'Get your API key from https://console.x.ai/' },
            deepseek: { name: 'Deepseek', keyPrefix: 'sk-', help: 'Get your API key from https://platform.deepseek.com/' }
        };
    }

    async loadSettings() {
        try {
            // Try to load from backend first
            const response = await fetch('/api/ai-settings');
            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    return result.settings;
                }
            }

            // Fallback to localStorage
            const stored = localStorage.getItem('ai-provider-settings');
            if (stored) {
                return JSON.parse(stored);
            }
        } catch (error) {
            console.error('Error loading AI settings:', error);
        }

        return this.getDefaultSettings();
    }

    getDefaultSettings() {
        return {
            mode: 'offline',
            concurrentProcessing: 1,
            offline: {
                model: '',
                endpoint: 'http://localhost:11434'
            },
            online: {
                provider: 'openai',
                apiKey: '',
                model: 'gpt-3.5-turbo',
                endpoint: ''
            },
            lastUpdated: new Date().toISOString()
        };
    }

    async saveSettings(settings) {
        try {
            this.settings = { ...settings, lastUpdated: new Date().toISOString() };
            // Save to backend (in-memory only for security)
            const response = await fetch('/api/ai-settings', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(this.settings)
            });

            if (response.ok) {
                const result = await response.json();
                if (result.success) {
                    // Save non-sensitive settings to localStorage for UI persistence
                    const localSettings = { ...this.settings };
                    if (localSettings.online && localSettings.online.apiKey) {
                        localSettings.online.apiKey = ''; // Don't store API key locally
                    }
                    localStorage.setItem('ai-provider-settings', JSON.stringify(localSettings));
                    return true;
                } else {
                    throw new Error(result.error || 'Failed to save settings to backend');
                }
            } else {
                throw new Error(`HTTP ${response.status}: ${response.statusText}`);
            }
        } catch (error) {
            console.error('Error saving AI settings to backend:', error);

            // Fallback to localStorage only (without API key)
            try {
                const localSettings = { ...this.settings };
                if (localSettings.online && localSettings.online.apiKey) {
                    localSettings.online.apiKey = ''; // Don't store API key locally
                }
                localStorage.setItem('ai-provider-settings', JSON.stringify(localSettings));
                return true;
            } catch (localError) {
                console.error('Error saving AI settings to localStorage:', localError);
                return false;
            }
        }
    }

    getCurrentProviderConfig() {
        if (this.settings.mode === 'offline') {
            return {
                type: 'ollama',
                model: this.settings.offline.model,
                endpoint: this.settings.offline.endpoint
            };
        } else {
            return {
                type: this.settings.online.provider,
                apiKey: this.settings.online.apiKey,
                model: this.settings.online.model,
                endpoint: this.settings.online.endpoint
            };
        }
    }
}

// Global AI settings manager instance
const aiSettingsManager = new AISettingsManager();

// AI Settings Modal Functions
async function openAISettingsModal() {
    const modal = document.getElementById('ai-settings-modal');
    modal.style.display = 'flex';
    await loadAISettingsUI();
}

function closeAISettingsModal() {
    const modal = document.getElementById('ai-settings-modal');
    modal.style.display = 'none';
}

// Make functions globally accessible
window.openAISettingsModal = openAISettingsModal;
window.closeAISettingsModal = closeAISettingsModal;
window.toggleApiKeyVisibility = toggleApiKeyVisibility;
window.testOllamaConnection = testOllamaConnection;
window.testProviderConnection = testProviderConnection;
window.adjustConcurrentProcessing = adjustConcurrentProcessing;
window.saveAIConfiguration = saveAIConfiguration;
window.resetAIConfiguration = resetAIConfiguration;

async function loadAISettingsUI() {
    const settings = await aiSettingsManager.loadSettings();
    aiSettingsManager.settings = settings;

    // Set mode toggle
    const modeToggle = document.getElementById('mode-toggle');
    modeToggle.checked = settings.mode === 'online';
    updateModeUI(settings.mode);

    // Load offline settings
    document.getElementById('ollama-model').value = settings.offline.model || '';
    document.getElementById('ollama-model').placeholder = 'Enter model name (e.g., llama3, phi4-mini)';
    document.getElementById('ollama-endpoint').value = settings.offline.endpoint || 'http://localhost:11434';

    // Load online settings
    document.getElementById('provider-select').value = settings.online.provider || 'openai';
    document.getElementById('api-key').value = settings.online.apiKey || '';

    // Update provider-specific UI
    handleProviderChange();

    // Set model
    const modelSelect = document.getElementById('model-select');
    if (modelSelect.querySelector(`option[value="${settings.online.model}"]`)) {
        modelSelect.value = settings.online.model;
    }
}

function handleModeToggle() {
    const modeToggle = document.getElementById('mode-toggle');
    const mode = modeToggle.checked ? 'online' : 'offline';
    updateModeUI(mode);
}

function updateModeUI(mode) {
    const offlineConfig = document.getElementById('offline-config');
    const onlineConfig = document.getElementById('online-config');
    const modeDescription = document.getElementById('mode-description');
    const offlineLabel = document.getElementById('offline-label');
    const onlineLabel = document.getElementById('online-label');

    if (mode === 'offline') {
        offlineConfig.classList.remove('hidden');
        onlineConfig.classList.add('hidden');
        modeDescription.textContent = 'Use local Ollama installation for AI processing';
        offlineLabel.classList.add('active');
        onlineLabel.classList.remove('active');
    } else {
        offlineConfig.classList.add('hidden');
        onlineConfig.classList.remove('hidden');
        modeDescription.textContent = 'Use cloud-based AI providers for processing';
        offlineLabel.classList.remove('active');
        onlineLabel.classList.add('active');
    }
}

function handleProviderChange() {
    const provider = document.getElementById('provider-select').value;
    const modelSelect = document.getElementById('model-select');
    const apiKeyHelp = document.getElementById('api-key-help');

    // Update model options
    modelSelect.innerHTML = '';
    const models = aiSettingsManager.providerModels[provider] || [];
    models.forEach(model => {
        const option = document.createElement('option');
        option.value = model;
        option.textContent = model;
        modelSelect.appendChild(option);
    });

    // Update help text
    const providerInfo = aiSettingsManager.providerInfo[provider];
    if (providerInfo) {
        apiKeyHelp.textContent = providerInfo.help;
    }
}

function toggleApiKeyVisibility() {
    const apiKeyInput = document.getElementById('api-key');
    const visibilityIcon = document.getElementById('visibility-icon');

    if (apiKeyInput.type === 'password') {
        apiKeyInput.type = 'text';
        visibilityIcon.textContent = '🙈';
    } else {
        apiKeyInput.type = 'password';
        visibilityIcon.textContent = '👁️';
    }
}

async function testOllamaConnection() {
    const testBtn = document.getElementById('test-ollama-btn');
    const model = document.getElementById('ollama-model').value;
    const endpoint = document.getElementById('ollama-endpoint').value || 'http://localhost:11434';

    setTestButtonState(testBtn, 'testing');
    showTestResult('Testing Ollama connection...', 'info');

    try {
        const response = await fetch('/api/test-ai-provider', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: 'ollama',
                model: model,
                endpoint: endpoint
            })
        });

        const result = await response.json();

        if (result.success) {
            setTestButtonState(testBtn, 'success');
            showTestResult(`✅ Connection successful! Latency: ${result.latency}ms`, 'success');
        } else {
            setTestButtonState(testBtn, 'error');
            showTestResult(`❌ Connection failed: ${result.error}`, 'error');
        }
    } catch (error) {
        setTestButtonState(testBtn, 'error');
        showTestResult(`❌ Test failed: ${error.message}`, 'error');
    }

    setTimeout(() => setTestButtonState(testBtn, 'default'), 3000);
}

async function testProviderConnection() {
    const testBtn = document.getElementById('test-provider-btn');
    const provider = document.getElementById('provider-select').value;
    const apiKey = document.getElementById('api-key').value;
    const model = document.getElementById('model-select').value;

    if (!apiKey) {
        showTestResult('❌ Please enter an API key first', 'error');
        return;
    }

    setTestButtonState(testBtn, 'testing');
    showTestResult('Testing API connection...', 'info');

    try {
        const response = await fetch('/api/test-ai-provider', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                type: provider,
                apiKey: apiKey,
                model: model
            })
        });

        const result = await response.json();

        if (result.success) {
            setTestButtonState(testBtn, 'success');
            let message = `✅ Connection successful! Latency: ${result.latency}ms`;
            if (result.tokensUsed) {
                message += `, Tokens used: ${result.tokensUsed}`;
            }
            showTestResult(message, 'success');
        } else {
            setTestButtonState(testBtn, 'error');
            showTestResult(`❌ Connection failed: ${result.error}`, 'error');
        }
    } catch (error) {
        setTestButtonState(testBtn, 'error');
        showTestResult(`❌ Test failed: ${error.message}`, 'error');
    }

    setTimeout(() => setTestButtonState(testBtn, 'default'), 3000);
}

function setTestButtonState(button, state) {
    button.classList.remove('testing', 'success', 'error');

    const btnText = button.querySelector('.btn-text');
    const btnIcon = button.querySelector('.btn-icon');

    switch (state) {
        case 'testing':
            button.classList.add('testing');
            button.disabled = true;
            btnText.textContent = 'Testing...';
            btnIcon.textContent = '⏳';
            break;
        case 'success':
            button.classList.add('success');
            btnText.textContent = 'Success!';
            btnIcon.textContent = '✅';
            break;
        case 'error':
            button.classList.add('error');
            btnText.textContent = 'Failed';
            btnIcon.textContent = '❌';
            break;
        default:
            button.disabled = false;
            btnText.textContent = button.id.includes('ollama') ? 'Test Connection' : 'Test API Key';
            btnIcon.textContent = '🔍';
    }
}

function showTestResult(message, type) {
    const testResults = document.getElementById('test-results');
    const testResultContent = document.getElementById('test-result-content');

    testResultContent.textContent = message;
    testResultContent.className = `test-result-content ${type}`;
    testResults.style.display = 'block';

    setTimeout(() => {
        testResults.style.display = 'none';
    }, 5000);
}



async function validateAIConfiguration(settings) {
    // Client-side validation
    const errors = [];

    if (!settings.mode || !['offline', 'online'].includes(settings.mode)) {
        errors.push('Invalid mode selected');
    }

    if (settings.mode === 'offline') {
        if (!settings.offline.model || settings.offline.model.trim() === '') {
            errors.push('Ollama model name is required');
        }
        if (!settings.offline.endpoint || !isValidUrl(settings.offline.endpoint)) {
            errors.push('Valid Ollama endpoint URL is required');
        }
    } else if (settings.mode === 'online') {
        if (!settings.online.provider) {
            errors.push('AI provider must be selected');
        }
        if (!settings.online.apiKey || settings.online.apiKey.trim() === '') {
            errors.push('API key is required for online mode');
        } else {
            // Validate API key format
            const keyValidation = validateApiKeyFormat(settings.online.provider, settings.online.apiKey);
            if (!keyValidation.valid) {
                errors.push(keyValidation.error);
            }
        }
        if (!settings.online.model) {
            errors.push('Model must be selected');
        }
    }

    if (errors.length > 0) {
        return { valid: false, errors };
    }

    // Server-side validation
    try {
        const config = settings.mode === 'offline'
            ? { type: 'ollama', model: settings.offline.model, endpoint: settings.offline.endpoint }
            : { type: settings.online.provider, apiKey: settings.online.apiKey, model: settings.online.model };

        const response = await fetch('/api/validate-ai-config', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(config)
        });

        const result = await response.json();
        return { valid: result.valid, errors: result.errors || [] };
    } catch (error) {
        console.warn('Server validation failed, using client-side validation only:', error);
        return { valid: true, errors: [] };
    }
}

function validateApiKeyFormat(provider, apiKey) {
    const formats = {
        openai: { prefix: 'sk-', minLength: 50 },
        anthropic: { prefix: 'sk-ant-', minLength: 90 },
        google: { prefix: '', minLength: 30 },
        microsoft: { prefix: '', minLength: 20 },
        grok: { prefix: 'xai-', minLength: 40 },
        deepseek: { prefix: 'sk-', minLength: 40 }
    };

    const format = formats[provider];
    if (!format) {
        return { valid: true }; // Provider not found, skip validation
    }

    if (format.prefix && !apiKey.startsWith(format.prefix)) {
        return {
            valid: false,
            error: `${aiSettingsManager.providerInfo[provider].name} API key should start with "${format.prefix}"`
        };
    }

    if (apiKey.length < format.minLength) {
        return {
            valid: false,
            error: `${aiSettingsManager.providerInfo[provider].name} API key appears to be too short`
        };
    }

    return { valid: true };
}

function isValidUrl(string) {
    try {
        new URL(string);
        return true;
    } catch (_) {
        return false;
    }
}

async function resetAIConfiguration() {
    if (confirm('Are you sure you want to reset to default settings? This will clear all your configuration.')) {
        const defaultSettings = aiSettingsManager.getDefaultSettings();
        await aiSettingsManager.saveSettings(defaultSettings);
        await loadAISettingsUI();
        showTestResult('✅ Configuration reset to defaults', 'success');
    }
}

// Close modal when clicking outside
document.getElementById('ai-settings-modal').addEventListener('click', (e) => {
    if (e.target.classList.contains('modal')) {
        closeAISettingsModal();
    }
});

// Initialize AI settings on page load
document.addEventListener('DOMContentLoaded', async () => {
    // Load initial settings
    const settings = await aiSettingsManager.loadSettings();

    // Dropdown auto-close behavior removed - dropdowns stay open until manually toggled
    aiSettingsManager.settings = settings;

});// Processing Queue Configuration Functions
function adjustConcurrentProcessing(delta) {
    const input = document.getElementById('concurrent-processing');
    const currentValue = parseInt(input.value) || 1;
    const newValue = Math.max(1, Math.min(10, currentValue + delta));
    input.value = newValue;
}

// Update the loadAISettingsUI function to include concurrent processing
const originalLoadAISettingsUI = loadAISettingsUI;
loadAISettingsUI = async function () {
    await originalLoadAISettingsUI();

    // Load concurrent processing setting
    const settings = aiSettingsManager.settings;
    const concurrentProcessing = settings.concurrentProcessing || 1;
    document.getElementById('concurrent-processing').value = concurrentProcessing;
};

// Update the saveAIConfiguration function to include concurrent processing
async function saveAIConfiguration() {
    try {
        const modeToggle = document.getElementById('mode-toggle');
        const mode = modeToggle.checked ? 'online' : 'offline';

        const concurrentProcessing = parseInt(document.getElementById('concurrent-processing').value) || 1;

        const settings = {
            mode: mode,
            concurrentProcessing: concurrentProcessing,
            offline: {
                model: document.getElementById('ollama-model').value || 'llama2',
                endpoint: document.getElementById('ollama-endpoint').value || 'http://localhost:11434'
            },
            online: {
                provider: document.getElementById('provider-select').value,
                apiKey: document.getElementById('api-key').value,
                model: document.getElementById('model-select').value
            }
        };

        const success = await aiSettingsManager.saveSettings(settings);

        // Update processing queue settings
        if (success && settings.concurrentProcessing) {
            try {
                const queueResponse = await fetch('/api/processing-queue/settings', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        concurrentProcessing: settings.concurrentProcessing
                    })
                });

                if (queueResponse.ok) {
                    // Processing queue settings updated
                } else {
                    console.warn('Failed to update processing queue settings');
                }
            } catch (error) {
                console.warn('Error updating processing queue settings:', error);
            }
        }

        if (success) {
            // Update button state
            const saveBtn = document.getElementById('save-config-btn');
            const originalText = saveBtn.innerHTML;
            saveBtn.innerHTML = '<span class="btn-icon">✅</span><span class="btn-text">Saved!</span>';
            saveBtn.style.background = 'var(--status-completed)';

            setTimeout(() => {
                saveBtn.innerHTML = originalText;
                saveBtn.style.background = '';
            }, 2000);
        } else {
            throw new Error('Failed to save settings');
        }

    } catch (error) {
        console.error('Error saving AI configuration:', error);
        alert('Error saving configuration: ' + error.message);
    }
}


---
File: /public/index.html
---

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SAWRON</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>💠</text></svg>">
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="styles.css">
</head>

<body>
    <div class="app-container">
        <!-- Header -->
        <header class="header">
            <div class="header-actions left-aligned-settings">
                <button class="settings-btn" onclick="openAISettingsModal()" title="Settings">
                    <span class="btn-icon">⚙️</span>
                </button>
            </div>
            <div class="header-content">
                <h1 class="logo">
                    <span class="logo-text">SAWRON</span>
                </h1>
                <p class="tagline">CONNECT THE DOTS & FILL THE GAPS</p>
            </div>
        </header>

        <!-- Main Content -->
        <main class=" main-content">
            <section class="input-section">
                <div class="input-bar">
                    <input type="text" id="main-input" placeholder="Paste a URL..." class="main-input-field unified-input">
                    
                    <label for="file-input" class="file-upload-btn">...choose a file...</label>
                    <input type="file" id="file-input" hidden accept=".pdf,.doc,.docx,.txt" />
                    
                    <div class="dropzone-inline" id="dropzone">...or drop it here
                    </div>
                    
                    <button class="distill-btn disabled" id="distill-btn" onclick="startDistillation()">
                        <span class="btn-icon">💠</span>
                        <span class="btn-text">DISTILL</span>
                    </button>
                </div>

                <!-- File Info -->
                <div class="file-display" id="file-display" style="display: none;">
                    <div class="file-info">
                        <span class="file-icon">📄</span>
                        <span class="file-name" id="file-name"></span>
                        <button class="remove-file-btn" onclick="removeFile()">×</button>
                    </div>
                </div>

                <!-- URL Type Indicator -->
                <div class="url-type-indicator" id="url-type-indicator" style="display: none;">
                    <span class="type-icon" id="type-icon"></span>
                    <span class="type-text" id="type-text"></span>
                </div>
            </section>
              

                        <!-- Processing Status -->
                        <section class="status-section" id="status-section" style="display: none;">
                            <div class="status-card">
                                <div class="status-header">
                                    <div class="status-icon">⚡</div>
                                    <h3 class="status-title">Processing Content</h3>
                                </div>
                                <div class="progress-bar">
                                    <div class="progress-fill" id="progress-fill"></div>
                                </div>
                                <p class="status-message" id="status-message">Initializing...</p>
                            </div>
                        </section>

                        <!-- Knowledge Base Section -->
                        <section class="knowledge-base-section">
                            <div class="knowledge-base-header">
                                <h2 class="section-title">KNOWLEDGE BASE</h2>
                                <div class="knowledge-base-controls">
                                    <input type="text" id="search-input" placeholder="Search knowledge base..."
                                        class="search-input">
                                    <select id="filter-select" class="filter-select">
                                        <option value="all">All Types</option>
                                        <option value="url">Web Page</option>
                                        <option value="youtube">YouTube Video</option>
                                        <option value="file">Document</option>
                                    </select>
                                    <button class="refresh-btn" onclick="refreshKnowledgeBase()">
                                        <span class="btn-icon">🔄</span>
                                    </button>
                                </div>
                            </div>

                            <!-- Enhanced Bulk Actions Bar - Always Visible -->
                            <div class="bulk-actions-bar" id="bulk-actions-bar">
                                <div class="bulk-actions-left">
                                    <button class="bulk-action-btn select-all-btn" id="select-all-btn"
                                        onclick="toggleSelectAll()">
                                        <span class="btn-text">Select All</span>
                                    </button>
                                    <span class="selected-count" id="selected-count">0 selected</span>
                                </div>
                                <div class="bulk-actions-right">
                                    <button class="bulk-action-btn retry-btn" id="bulk-retry-btn" disabled
                                        onclick="bulkRetry()">
                                        <span class="btn-icon">🔄</span>
                                        <span class="btn-text">Retry</span>
                                    </button>
                                    <button class="bulk-action-btn retry-all-btn" id="bulk-retry-all-btn"
                                        onclick="bulkRetryAll()">
                                        <span class="btn-icon">🔄</span>
                                        <span class="btn-text">Retry All</span>
                                    </button>
                                    <button class="bulk-action-btn retry-failed-btn" id="bulk-retry-failed-btn"
                                        onclick="bulkRetryFailed()">
                                        <span class="btn-icon">🔄</span>
                                        <span class="btn-text">Retry Failed</span>
                                    </button>
                                    <button class="bulk-action-btn download-btn" id="bulk-download-btn" disabled
                                        onclick="handleBulkDownloadClick()">
                                        <span class="btn-icon">📥</span>
                                        <span class="btn-text">Download</span>
                                    </button>
                                    <button class="bulk-action-btn delete-btn" id="bulk-delete-btn" disabled
                                        onclick="bulkDelete()">
                                        <span class="btn-icon">🗑️</span>
                                        <span class="btn-text">Delete</span>
                                    </button>
                                </div>
                            </div>

                            <div class="knowledge-base-table-container">
                                <table class="knowledge-base-table" id="knowledge-base-table">
                                    <thead>
                                        <tr>
                                            <th class="checkbox-column">
                                                <!-- Header checkbox removed - use Select All button instead -->
                                            </th>
                                            <th>Name</th>
                                            <th>Source</th>
                                            <th>Type</th>
                                            <th>Status</th>
                                            <th>Duration</th>
                                            <th>Created On</th>
                                            <th></th>
                                        </tr>
                                    </thead>
                                    <tbody id="knowledge-base-tbody">
                                        <!-- Table rows will be populated here -->
                                    </tbody>
                                </table>
                            </div>
                        </section>

                        <!-- Raw Content Modal -->
                        <div class="modal" id="raw-content-modal">
                            <div class="modal-content large-modal">
                                <div class="modal-header">
                                    <h3 class="modal-title" id="raw-content-title">Raw Content</h3>
                                    <button class="modal-close" onclick="closeRawContentModal()">&times;</button>
                                </div>
                                <div class="modal-body">
                                    <pre id="raw-content-text" class="raw-content"></pre>
                                </div>
                            </div>
                        </div>

                        <!-- Logs Modal -->
                        <div class="modal" id="logs-modal">
                            <div class="modal-content large-modal">
                                <div class="modal-header">
                                    <h3 class="modal-title" id="logs-title">Processing Logs</h3>
                                    <button class="modal-close" onclick="closeLogsModal()">&times;</button>
                                </div>
                                <div class="modal-body">
                                    <div id="logs-content" class="logs-content"></div>
                                </div>
                            </div>
                        </div>
                        </main>
            </div>

            <!-- Distillation Modal -->
            <div class="modal" id="distillation-modal">
                <div class="modal-content">
                    <div class="modal-header">
                        <h3 class="modal-title" id="modal-title">Distillation</h3>
                        <button class="modal-close" onclick="closeDistillationModal()">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="distillation-meta" id="distillation-meta"></div>
                        <div class="distillation-content" id="distillation-content"></div>
                    </div>
                </div>
            </div>

            <!-- AI Settings Modal -->
            <div class="modal" id="ai-settings-modal">
                <div class="modal-content large-modal">
                    <div class="modal-header">
                        <h3 class="modal-title">Settings</h3>
                        <button class="modal-close" onclick="closeAISettingsModal()">&times;</button>
                    </div>
                    <div class="modal-body">
                        <div class="ai-provider-config">
                            <!-- Mode Toggle -->
                            <div class="config-section">
                                <h4 class="config-section-title">Processing Mode</h4>
                                <div class="mode-toggle-container">
                                    <div class="mode-toggle">
                                        <input type="checkbox" id="mode-toggle" onchange="handleModeToggle()" checked>
                                        <label for="mode-toggle" class="toggle-slider"></label>
                                    </div>
                                    <div class="mode-labels">
                                        <span class="mode-label" id="offline-label">Offline</span>
                                        <span class="mode-label active" id="online-label">Online</span>
                                    </div>
                                </div>
                                <p class="mode-description" id="mode-description">
                                    Use cloud-based AI providers for processing
                                </p>
                            </div>

                            <!-- Offline Configuration -->
                            <div class="config-section hidden" id="offline-config">
                                <div class="form-group">
                                    <label for="ollama-model" class="form-label">Model Name</label>
                                    <input type="text" id="ollama-model" class="form-input" placeholder="llama2">
                                    <small class="form-help">Enter the name of the Ollama model to use</small>
                                </div>
                                <div class="form-group">
                                    <label for="ollama-endpoint" class="form-label">Endpoint</label>
                                    <input type="text" id="ollama-endpoint" class="form-input"
                                        placeholder="http://localhost:11434">
                                    <small class="form-help">Ollama server endpoint URL</small>
                                </div>
                                <button class="test-btn" id="test-ollama-btn" onclick="testOllamaConnection()">
                                    <span class="btn-icon">🔍</span>
                                    <span class="btn-text">Test Connection</span>
                                </button>
                            </div>

                            <!-- Online Configuration -->
                            <div class="config-section" id="online-config">
                                <div class="form-group">
                                    <label for="provider-select" class="form-label">AI Provider</label>
                                    <select id="provider-select" class="form-select" onchange="handleProviderChange()">
                                        <option value="openai">OpenAI</option>
                                        <option value="anthropic">Anthropic</option>
                                        <option value="google">Gemini</option>
                                        <option value="grok">Grok</option>
                                        <option value="deepseek">DeepSeek</option>
                                    </select>
                                </div>

                                <div class="form-group">
                                    <label for="model-select" class="form-label">Model</label>
                                    <select id="model-select" class="form-select">
                                        <!-- Options populated based on provider selection -->
                                    </select>
                                </div>

                                <div class="form-group">
                                    <label for="api-key" class="form-label">API Key</label>
                                    <div class="api-key-input-container">
                                        <input type="password" id="api-key" class="form-input"
                                            placeholder="Enter your API key">
                                        <button class="toggle-visibility-btn" onclick="toggleApiKeyVisibility()">
                                            <span id="visibility-icon">👁️</span>
                                        </button>
                                    </div>
                                    <small class="form-help" id="api-key-help">Enter your API key for the selected
                                        provider</small>
                                    <div class="security-notice">
                                        <span class="security-icon">🔒</span>
                                        <small class="security-text">API keys are stored only in memory only and are not
                                            saved to disk for security</small>
                                    </div>
                                </div>

                                <button class="test-btn" id="test-provider-btn" onclick="testProviderConnection()">
                                    <span class="btn-icon">🔍</span>
                                    <span class="btn-text">Test API Key</span>
                                </button>
                            </div>

                            <!-- Test Results -->
                            <div class="test-results" id="test-results" style="display: none;">
                                <div class="test-result-content" id="test-result-content"></div>
                            </div>

                            <!-- Processing Queue Configuration -->
                            <div class="config-section">
                                <div class="form-group">
                                    <label for="concurrent-processing" class="form-label">Simultaneous Processing
                                        Limit</label>
                                    <div class="number-input-container">
                                        <button type="button" class="number-btn number-down"
                                            onclick="adjustConcurrentProcessing(-1)">−</button>
                                        <input type="number" id="concurrent-processing" class="form-input number-input"
                                            min="1" max="10" value="1" step="1">
                                        <button type="button" class="number-btn number-up"
                                            onclick="adjustConcurrentProcessing(1)">+</button>
                                    </div>
                                    <small class="form-help">Maximum number of items that can be processed
                                        simultaneously, lower values reduce API rate limit issues</small>
                                </div>
                            </div>

                            <!-- Action Buttons -->
                            <div class="modal-actions">
                                <button class="save-btn" id="save-config-btn" onclick="saveAIConfiguration()">
                                    <span class="btn-icon">💾</span>
                                    <span class="btn-text">Save</span>
                                </button>
                                <button class="reset-btn" onclick="resetAIConfiguration()">
                                    <span class="btn-icon">🔄</span>
                                    <span class="btn-text">Reset</span>
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <script src="app.js"></script>
</body>

</html>


---
File: /public/styles.css
---

/* Reset and Base Styles */
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

:root {
    --primary-orange: #ff6b35;
    --orange-hover: #e55a2b;
    --orange-light: #ff8c5a;
    --orange-dark: #cc4a1f;
    --bg-primary: #0a0a0a;
    --bg-secondary: #1a1a1a;
    --bg-tertiary: #2a2a2a;
    --text-primary: #ffffff;
    --text-secondary: #b0b0b0;
    --text-muted: #808080;
    --border-color: #333333;
    --border-hover: #444444;
    --shadow-light: rgba(255, 107, 53, 0.1);
    --shadow-medium: rgba(255, 107, 53, 0.2);
    --shadow-heavy: rgba(0, 0, 0, 0.3);

    /* Status colors */
    --status-completed: #4caf50;
    --status-processing: #2196f3;
    --status-error: #f44336;
    --status-pending: #ff9800;
    --status-stopped: #9e9e9e;
}

body {
    font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
    background: var(--bg-primary);
    color: var(--text-primary);
    line-height: 1.6;
    font-size: 14px;
    overflow-x: hidden;
}

/* App Container */
.app-container {
    min-height: 100vh;
    display: flex;
    flex-direction: column;
}

/* Header */
.header {
    background: var(--bg-secondary);
    border-bottom: 1px solid var(--border-color);
    padding: 1.5rem 0;
    position: relative;
}

.header-content {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 2rem;
    text-align: center;
}

/* Align settings button to the far left of the header */
.left-aligned-settings {
    position: absolute;
    top: 1.5rem;
    left: 2rem;
}

@media (max-width: 768px) {
    .left-aligned-settings {
        left: 1rem;
        top: 1rem;
    }
    
    .header-content {
        padding: 0 1rem;
    }
}

.header-actions {
    position: absolute;
    top: 1.5rem;
    right: 2rem;
}

.settings-btn {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 0.75rem;
    color: var(--text-secondary);
    cursor: pointer;
    transition: all 0.15s ease;
    display: flex;
    align-items: center;
    justify-content: center;
}

.settings-btn:hover {
    background: var(--bg-primary);
    border-color: var(--primary-orange);
    color: var(--primary-orange);
}

.logo {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--text-primary);
    margin-bottom: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
}

.logo-icon {
    font-size: 2.5rem;
    filter: hue-rotate(25deg);
}

.tagline {
    color: var(--primary-orange);
    font-size: 1rem;
    font-weight: 500;
    text-transform: uppercase;
    letter-spacing: 0.1em;
}

/* Main Content */
.main-content {
    flex: 1;
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    width: 100%;
    position: relative;
    z-index: auto;
}

/* Input Section */
.input-section {
    background: var(--bg-secondary);
    border-radius: 16px;
    padding: 2rem;
    margin-bottom: 3rem;
    border: 1px solid var(--border-color);
    position: relative;
    z-index: 1;
}

.main-input-group {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

.url-input-container {
    position: relative;
    width: 100%;
}

.main-input-field {
    width: 100%;
    background: var(--bg-primary);
    border: 2px solid var(--border-color);
    border-radius: 12px;
    padding: 1rem 4rem 1rem 1.5rem;
    color: var(--text-primary);
    font-size: 1rem;
    transition: all 0.2s ease;
    box-sizing: border-box;
    text-align: center;
}

.main-input-field:focus {
    outline: none;
    border-color: var(--primary-orange);
    box-shadow: 0 0 0 3px var(--shadow-light);
}

.main-input-field::placeholder {
    color: white;
    opacity: 1;
}

.paste-btn-inside {
    position: absolute;
    right: 8px;
    top: 50%;
    transform: translateY(-50%);
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 0.5rem;
    color: var(--text-secondary);
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    width: 32px;
    height: 32px;
}

.paste-btn-inside:hover {
    background: var(--bg-primary);
    border-color: var(--primary-orange);
    color: var(--primary-orange);
}

.paste-btn {
    background: var(--bg-tertiary);
    border: 2px solid var(--border-color);
    border-radius: 12px;
    padding: 1rem 1.5rem;
    color: var(--text-secondary);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
}

.paste-btn:hover {
    background: var(--bg-primary);
    border-color: var(--primary-orange);
    color: var(--text-primary);
}

.action-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
}

.upload-btn,
.distill-btn {
    background: var(--primary-orange);
    border: none;
    border-radius: 12px;
    padding: 1rem 2rem;
    color: white;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
    min-width: 150px;
    justify-content: center;
}

.upload-btn:hover,
.distill-btn:hover {
    background: var(--orange-hover);
    transform: translateY(-1px);
    box-shadow: 0 8px 25px var(--shadow-medium);
}

.upload-btn:active,
.distill-btn:active {
    transform: translateY(0);
}

/* Button icon sizing */
.btn-icon {
    font-size: 1.2rem;
    display: inline-block;
}

.settings-btn .btn-icon {
    font-size: 3.5rem;
}

.upload-btn .btn-icon,
.distill-btn .btn-icon {
    font-size: 1.2rem;
}

.upload-btn .btn-text,
.distill-btn .btn-text {
    font-size: 1.1rem;
    font-weight: 700;
    letter-spacing: 0.05em;
}

.refresh-btn .btn-icon {
    font-size: 1rem;
}

.upload-btn.disabled,
.distill-btn.disabled {
    background: var(--bg-tertiary);
    color: var(--text-muted);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.upload-btn.disabled:hover,
.distill-btn.disabled:hover {
    background: var(--bg-tertiary);
    color: var(--text-muted);
    transform: none;
    box-shadow: none;
}

/* File Display */
.file-display {
    background: var(--bg-primary);
    border: 2px solid var(--primary-orange);
    border-radius: 12px;
    padding: 1rem 1.5rem;
    margin-top: 1rem;
}

.file-info {
    display: flex;
    align-items: center;
    gap: 1rem;
}

.file-info .file-icon {
    font-size: 1.5rem;
}

.file-name {
    flex: 1;
    color: var(--text-primary);
    font-weight: 500;
}

.remove-file-btn {
    background: none;
    border: none;
    color: var(--text-muted);
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: all 0.2s ease;
}

.remove-file-btn:hover {
    background: var(--bg-tertiary);
    color: var(--text-primary);
}

/* URL Type Indicator */
.url-type-indicator {
    background: var(--bg-primary);
    border: 2px solid var(--primary-orange);
    border-radius: 12px;
    padding: 1rem 1.5rem;
    margin-top: 1rem;
    display: flex;
    align-items: center;
    gap: 1rem;
}

.type-icon {
    font-size: 1.5rem;
}

.type-text {
    color: var(--primary-orange);
    font-weight: 600;
    text-transform: uppercase;
    font-size: 0.9rem;
}

/* Status Section */
.status-section {
    margin-bottom: 3rem;
}

.status-card {
    background: var(--bg-secondary);
    border-radius: 16px;
    padding: 2rem;
    border: 1px solid var(--border-color);
}

.status-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1.5rem;
}

.status-icon {
    font-size: 1.5rem;
}

.status-title {
    font-size: 1.2rem;
    font-weight: 600;
}

.progress-bar {
    background: var(--bg-primary);
    border-radius: 8px;
    height: 8px;
    margin-bottom: 1rem;
    overflow: hidden;
}

.progress-fill {
    background: linear-gradient(90deg, var(--primary-orange), var(--orange-light));
    height: 100%;
    width: 0%;
    transition: width 0.3s ease;
    border-radius: 8px;
}

.status-message {
    color: var(--text-secondary);
    font-size: 0.9rem;
}

/* Knowledge Base Section */
.knowledge-base-section {
    margin-top: 3rem;
    position: relative;
    overflow: visible;
    z-index: auto;
}

.knowledge-base-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    gap: 2rem;
}

.section-title {
    font-size: 1.8rem;
    font-weight: 700;
    color: var(--text-primary);
}

.knowledge-base-controls {
    display: flex;
    gap: 1rem;
    align-items: center;
}

.search-input,
.filter-select {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 0.75rem 1rem;
    color: var(--text-primary);
    font-size: 0.9rem;
    height: 44px;
    box-sizing: border-box;
}

.filter-select {
    text-align: center;
    text-align-last: center;
}

.search-input {
    width: 250px;
}

.search-input:focus,
.filter-select:focus {
    outline: none;
    border-color: var(--primary-orange);
}

.refresh-btn {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 0.75rem 1rem;
    color: var(--text-secondary);
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
    height: 44px;
    box-sizing: border-box;
}

.refresh-btn:hover {
    background: var(--bg-primary);
    border-color: var(--primary-orange);
    color: var(--text-primary);
}

/* Knowledge Base Table */
.knowledge-base-table-container {
    background: var(--bg-secondary);
    border-radius: 12px;
    border: 1px solid var(--border-color);
    overflow-x: auto;
    overflow-y: visible;
    width: 100%;
    max-width: 100%;
    box-sizing: border-box;
    position: relative;
}

.knowledge-base-table {
    width: 100%;
    border-collapse: collapse;
    table-layout: fixed;
    border-radius: 12px;
    overflow: visible;
    max-width: 100%;
}

.knowledge-base-table th:nth-child(1) {
    width: 40px;
}

/* Checkbox */
.knowledge-base-table th:nth-child(2) {
    width: 22%;
}

/* Name */
.knowledge-base-table th:nth-child(3) {
    width: 22%;
}

/* Source */
.knowledge-base-table th:nth-child(4) {
    width: 10%;
}

/* Type */
.knowledge-base-table th:nth-child(5) {
    width: 15%;
}

/* Status */
.knowledge-base-table th:nth-child(6) {
    width: 10%;
}

/* Time */
.knowledge-base-table th:nth-child(7) {
    width: 15%;
}

/* Date */
.knowledge-base-table th:nth-child(8) {
    width: 100px;
}

/* Actions */

.knowledge-base-table td:nth-child(1) {
    width: 40px;
}

/* Checkbox */
.knowledge-base-table td:nth-child(2) {
    width: 22%;
    max-width: 0;
    min-width: 0;
}

/* Name */
.knowledge-base-table td:nth-child(3) {
    width: 22%;
    max-width: 0;
    min-width: 0;
}

/* Source */
.knowledge-base-table td:nth-child(4) {
    width: 10%;
}

/* Type */
.knowledge-base-table td:nth-child(5) {
    width: 15%;
}

/* Status */
.knowledge-base-table td:nth-child(6) {
    width: 10%;
}

/* Time */
.knowledge-base-table td:nth-child(7) {
    width: 15%;
}

/* Date */
.knowledge-base-table td:nth-child(8) {
    width: 100px;
}

/* Actions */

.knowledge-base-table th {
    background: var(--bg-tertiary);
    color: var(--text-primary);
    font-weight: 600;
    padding: 1rem;
    text-align: center;
    border-bottom: 1px solid var(--border-color);
    font-size: 0.9rem;
}

.knowledge-base-table th:first-child {
    border-top-left-radius: 12px;
}

.knowledge-base-table th:last-child {
    border-top-right-radius: 12px;
}

.knowledge-base-table td {
    padding: 0.75rem 0.5rem;
    border-bottom: 1px solid var(--border-color);
    color: var(--text-secondary);
    font-size: 0.85rem;
    vertical-align: middle;
    height: 60px;
    overflow: hidden;
}



/* Checkbox column */
.checkbox-column {
    text-align: center;
    padding: 0.75rem 0.5rem !important;
    vertical-align: middle;
    position: relative;
}

.checkbox-column input[type="checkbox"] {
    margin: 0;
    vertical-align: middle;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 16px;
    height: 16px;
}

/* Name column */
.name-cell {
    font-weight: 500;
    color: var(--text-primary);
    overflow: hidden !important;
    text-overflow: ellipsis !important;
    white-space: nowrap !important;
    max-width: 0 !important;
    width: 22%;
    min-width: 0 !important;
    position: relative;
}

.source-cell {
    overflow: hidden !important;
    text-overflow: ellipsis !important;
    white-space: nowrap !important;
    max-width: 0 !important;
    width: 22%;
    min-width: 0 !important;
}

.source-cell a,
.source-cell span {
    display: block;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    max-width: 100%;
}

/* Type column */
.type-cell {
    text-align: center;
    font-size: 0.8rem;
}

/* Status column */
.status-cell {
    text-align: center;
    overflow: hidden !important;
    text-overflow: ellipsis !important;
    white-space: nowrap !important;
    max-width: 0 !important;
    min-width: 0 !important;
}

/* Time and date columns */
.time-cell,
.date-cell {
    text-align: center;
    font-size: 0.8rem;
    white-space: nowrap;
}

/* Actions column */
.actions-cell {
    text-align: center;
    padding: 0.75rem 1rem !important;
    position: relative;
    vertical-align: middle;
}

.knowledge-base-table tbody tr:hover {
    background: var(--bg-primary);
    transition: background-color 0.15s ease;
}

.knowledge-base-table tbody tr {
    position: relative;
    transition: background-color 0.15s ease;
}

.knowledge-base-table tbody tr td {
    overflow: visible;
}

.knowledge-base-table tbody tr:last-child td {
    border-bottom: none;
}

/* Text truncation classes */
.truncate-text {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    position: relative;
}

/* Enhanced Tooltip styles - Fixed positioning and stuck tooltip issues */
.tooltip {
    position: fixed;
    background: var(--bg-primary);
    color: var(--text-primary);
    padding: 0.5rem 0.75rem;
    border-radius: 6px;
    font-size: 0.8rem;
    border: 2px solid var(--primary-orange);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.4);
    z-index: 10000;
    max-width: 300px;
    word-wrap: break-word;
    white-space: normal;
    opacity: 0;
    pointer-events: none;
    transition: opacity 0.15s ease;
    line-height: 1.4;
    transform: translateY(-100%);
    margin-top: -8px;
}

.tooltip.show {
    opacity: 1;
}

.tooltip::before {
    content: '';
    position: absolute;
    bottom: -6px;
    left: 50%;
    transform: translateX(-50%);
    border-left: 6px solid transparent;
    border-right: 6px solid transparent;
    border-top: 6px solid var(--primary-orange);
}

.tooltip::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 50%;
    transform: translateX(-50%);
    border-left: 4px solid transparent;
    border-right: 4px solid transparent;
    border-top: 4px solid var(--bg-primary);
}

/* Tooltip positioned below element */
.tooltip.tooltip-below {
    transform: translateY(0);
    margin-top: 8px;
}

.tooltip.tooltip-below::before {
    top: -6px;
    bottom: auto;
    border-top: 6px solid var(--primary-orange);
    border-bottom: none;
}

.tooltip.tooltip-below::after {
    top: -4px;
    bottom: auto;
    border-top: 4px solid var(--bg-primary);
    border-bottom: none;
}

.source-link {
    color: var(--primary-orange);
    text-decoration: none;
}

.source-link:hover {
    text-decoration: underline;
}

.file-source {
    color: var(--text-secondary);
}

.type-cell {
    white-space: nowrap;
}

.status-cell {
    white-space: nowrap;
}

.status-cell .status-icon {
    margin-right: 0.5rem;
}

.status-cell .status-text {
    font-weight: 600;
    font-size: 0.8rem;
}

.status-cell .processing-step {
    font-size: 0.8rem;
    color: var(--text-muted);
    margin-top: 0.25rem;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

.status-cell.status-completed .status-text {
    color: var(--status-completed);
}

.status-cell.status-queued .status-text {
    color: var(--status-pending);
}

.status-cell.status-processing .status-text {
    color: var(--status-processing);
}

.status-cell.status-processing .status-icon {
    /* No animation for better performance */
}

.status-cell.status-error .status-text {
    color: var(--status-error);
}

.status-cell.status-unknown .status-text {
    color: var(--text-muted);
}

.status-cell.status-stopped .status-text {
    color: var(--status-stopped);
}

.time-cell {
    white-space: nowrap;
    text-align: center;
}

.date-cell {
    white-space: nowrap;
}

.actions-cell {
    min-width: 200px;
    width: auto;
}

.table-actions {
    display: flex;
    gap: 0.25rem;
    flex-wrap: wrap;
    justify-content: flex-end;
    align-items: center;
    min-width: 0;
    height: 100%;
}

.table-actions .action-btn {
    margin: 0;
    padding: 0.25rem 0.4rem;
    font-size: 0.7rem;
    min-height: 24px;
    flex-shrink: 0;
}

/* Empty state in table */
.empty-state-cell {
    padding: 3rem 1rem;
    text-align: center;
}

/* Action buttons - Fixed flickering */
.action-btn {
    padding: 0.4rem 0.6rem;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.15s ease, border-color 0.15s ease, color 0.15s ease;
    border: none;
    white-space: nowrap;
    flex-shrink: 0;
    min-height: 32px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    backface-visibility: hidden;
    transform: translateZ(0);
}

.action-btn:focus {
    outline: 2px solid var(--primary-orange);
    outline-offset: 2px;
}

.action-btn:focus:not(:focus-visible) {
    outline: none;
}

/* Action Dropdown Styles - Fixed positioning and flickering */
.action-dropdown {
    position: relative;
    display: inline-block;
    z-index: 1;
}

/* When dropdown is open, elevate the entire row and dropdown */
.action-dropdown.show {
    z-index: 2147483647;
    position: relative;
}

/* Ensure the parent row gets elevated when dropdown is open */
.knowledge-base-table tbody tr:has(.action-dropdown.show) {
    position: relative;
    z-index: 2147483646;
}

/* Fallback for browsers that don't support :has() */
.knowledge-base-table tbody tr.dropdown-open {
    position: relative;
    z-index: 2147483646;
}

/* Ensure action buttons don't interfere with dropdown stacking */
.action-buttons {
    position: relative;
    z-index: 1;
}

/* Ensure upload and distill buttons don't interfere with dropdowns */
.upload-btn,
.distill-btn {
    position: relative;
    z-index: 1;
}

/* Ensure table cells don't create stacking contexts that interfere with dropdowns */
.actions-cell {
    position: relative;
    z-index: auto;
}

.action-dropdown-btn {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    border-radius: 6px;
    padding: 0.4rem 0.6rem;
    color: var(--text-secondary);
    font-size: 0.75rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.15s ease, border-color 0.15s ease, color 0.15s ease;
    display: flex;
    align-items: center;
    gap: 0.25rem;
    white-space: nowrap;
    min-height: 32px;
    backface-visibility: hidden;
    transform: translateZ(0);
}

.action-dropdown-btn:hover {
    background: var(--bg-primary);
    border-color: var(--primary-orange);
    color: var(--text-primary);
}

.action-dropdown-btn:focus {
    outline: 2px solid var(--primary-orange);
    outline-offset: 2px;
}

.action-dropdown-content {
    display: none;
    position: fixed !important;
    background: var(--bg-primary);
    border: 2px solid var(--primary-orange);
    border-radius: 8px;
    box-shadow: 0 8px 24px rgba(0, 0, 0, 0.3);
    z-index: 2147483647 !important;
    min-width: max-content;
    width: auto;
    overflow: hidden;
    /* Ensure dropdown is always on top */
    isolation: isolate;
    /* Force hardware acceleration for better rendering */
    transform: translateZ(0);
    will-change: transform;
}

.action-dropdown.show .action-dropdown-content {
    display: block !important;
    z-index: 2147483647 !important;
    position: fixed !important;
}

.action-dropdown-item {
    display: block;
    width: 100%;
    padding: 0.75rem 1rem;
    background: none;
    border: none;
    color: var(--text-secondary);
    font-size: 0.8rem;
    text-align: left;
    cursor: pointer;
    transition: all 0.2s ease;
    border-bottom: 1px solid var(--border-color);
    white-space: nowrap;
    line-height: 1.3;
}

.action-dropdown-item:last-child {
    border-bottom: none;
}

.action-dropdown-item:hover {
    background: var(--bg-tertiary);
    color: var(--text-primary);
}

.action-dropdown-item:focus {
    outline: none;
    background: var(--bg-tertiary);
    color: var(--text-primary);
}

.action-dropdown-item.delete-item:hover {
    background: var(--status-error);
    color: white;
}

.action-dropdown-item.retry-item:hover {
    background: var(--primary-orange);
    color: white;
}

/* Bulk Actions Bar */
.bulk-actions-bar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 12px 16px;
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    margin-bottom: 16px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    position: relative;
    z-index: 10;
}

.bulk-actions-left {
    display: flex;
    align-items: center;
    gap: 16px;
}

.bulk-actions-right {
    display: flex;
    align-items: center;
    gap: 8px;
}

.bulk-action-btn {
    padding: 0.4rem 0.6rem;
    border-radius: 6px;
    font-size: 0.75rem;
    font-weight: 500;
    cursor: pointer;
    transition: background-color 0.15s ease, border-color 0.15s ease, color 0.15s ease;
    border: none;
    white-space: nowrap;
    flex-shrink: 0;
    min-height: 32px;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    gap: 6px;
    appearance: none;
    outline: none;
    box-shadow: none;
    text-decoration: none;
    backface-visibility: hidden;
    transform: translateZ(0);
}

.bulk-action-btn:focus {
    outline: 2px solid var(--primary-orange);
    outline-offset: 2px;
}

.bulk-action-btn:focus:not(:focus-visible) {
    outline: none;
}

.bulk-action-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
}

.bulk-action-btn.select-all-btn {
    background: var(--primary-orange);
    color: white;
}

.bulk-action-btn.select-all-btn:hover:not(:disabled) {
    background: var(--orange-hover);
}

.bulk-action-btn.download-btn {
    background: var(--status-completed);
    color: white;
}

.bulk-action-btn.download-btn:hover:not(:disabled) {
    background: #45a049;
}

.bulk-action-btn.delete-btn {
    background: var(--status-error);
    color: white;
}

.bulk-action-btn.delete-btn:hover:not(:disabled) {
    background: #d32f2f;
}

.bulk-action-btn.retry-btn {
    background: var(--primary-orange);
    color: white;
}

.bulk-action-btn.retry-btn:hover:not(:disabled) {
    background: var(--orange-hover);
}

.bulk-action-btn.retry-all-btn {
    background: #2196f3;
    color: white;
}

.bulk-action-btn.retry-all-btn:hover:not(:disabled) {
    background: #1976d2;
}

.bulk-action-btn.retry-failed-btn {
    background: #ff9800;
    color: white;
}

.bulk-action-btn.retry-failed-btn:hover:not(:disabled) {
    background: #f57c00;
}

.selected-count {
    color: var(--text-secondary);
    font-size: 0.875rem;
    font-weight: 500;
}

.view-btn {
    background: var(--primary-orange);
    color: white;
    order: 1;
}

.view-btn:hover {
    background: var(--orange-hover);
}

.download-btn {
    background: var(--bg-tertiary);
    color: var(--text-primary);
    order: 2;
}

.download-btn:hover {
    background: var(--border-color);
}

.stop-btn {
    background: var(--status-error);
    color: white;
}

.stop-btn:hover {
    background: #d32f2f;
}

.debug-btn {
    background: var(--bg-tertiary);
    color: var(--text-secondary);
    order: 3;
}

.debug-btn:hover {
    background: var(--border-color);
    color: var(--text-primary);
}

.delete-btn {
    background: transparent;
    color: var(--text-muted);
    border: 1px solid var(--border-color);
    order: 5;
}

.delete-btn:hover {
    background: var(--status-error);
    color: white;
    border-color: var(--status-error);
}

.stop-btn {
    order: 4;
}

/* Modal */
.modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.8);
    z-index: 1000;
    backdrop-filter: blur(4px);
}

.modal-content {
    background: var(--bg-secondary);
    border-radius: 16px;
    max-width: 800px;
    width: 90%;
    max-height: 90%;
    margin: 5% auto;
    border: 1px solid var(--border-color);
    overflow: hidden;
    display: flex;
    flex-direction: column;
}

.large-modal {
    max-width: 1000px;
}

.modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem 2rem;
    border-bottom: 1px solid var(--border-color);
}

.modal-title {
    font-size: 1.3rem;
    font-weight: 600;
}

.modal-close {
    background: none;
    border: none;
    color: var(--text-secondary);
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 4px;
    transition: all 0.2s ease;
}

.modal-close:hover {
    background: var(--bg-tertiary);
    color: var(--text-primary);
}

.modal-body {
    padding: 2rem;
    overflow-y: auto;
    flex: 1;
}

.distillation-meta {
    background: var(--bg-primary);
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1.5rem;
    font-size: 0.9rem;
    color: var(--text-secondary);
}

/* Modal content formatting - Manual numbered lists */
.modal-body ol.manual-numbered {
    padding-left: 0 !important;
    list-style: none !important;
    margin-left: 0 !important;
    margin-bottom: 1rem !important;
    counter-reset: none !important;
}

.modal-body ol.manual-numbered li {
    display: block !important;
    margin-bottom: 0.5rem !important;
    padding-left: 0 !important;
    position: relative !important;
    list-style: none !important;
    list-style-type: none !important;
    counter-increment: none !important;
}

.modal-body ol.manual-numbered li::before {
    display: none !important;
    content: none !important;
}

.modal-body ol.manual-numbered li .list-number {
    color: var(--primary-orange) !important;
    font-weight: bold !important;
    margin-right: 0.5rem !important;
    display: inline-block !important;
    min-width: 1.5rem !important;
    text-align: left !important;
}

/* Fallback for regular ol elements */
.modal-body ol:not(.manual-numbered) {
    padding-left: 1.5rem !important;
    list-style-type: decimal !important;
}

.modal-body ol:not(.manual-numbered) li {
    display: list-item !important;
    margin-bottom: 0.5rem !important;
    list-style-type: decimal !important;
}

/* Additional reset for manual numbered lists */
.modal-body ol.manual-numbered,
.modal-body ol.manual-numbered * {
    list-style: none !important;
    list-style-type: none !important;
    counter-reset: none !important;
    counter-increment: none !important;
}

.modal-body ol.manual-numbered li::marker {
    display: none !important;
    content: none !important;
}

/* Force override any browser defaults */
ol.manual-numbered {
    padding-left: 0 !important;
    list-style: none !important;
    margin-left: 0 !important;
    margin-bottom: 1rem !important;
    counter-reset: none !important;
}

ol.manual-numbered li {
    display: block !important;
    margin-bottom: 0.5rem !important;
    padding-left: 0 !important;
    position: relative !important;
    list-style: none !important;
    list-style-type: none !important;
    counter-increment: none !important;
}

ol.manual-numbered li::before {
    display: none !important;
    content: none !important;
}

ol.manual-numbered li::marker {
    display: none !important;
    content: none !important;
}

ol.manual-numbered li .list-number {
    color: var(--primary-orange) !important;
    font-weight: bold !important;
    margin-right: 0.5rem !important;
    display: inline-block !important;
    min-width: 1.5rem !important;
    text-align: left !important;
}

/* Numbered list styling */
.modal-body ol.manual-numbered li .list-number {
    color: var(--primary-orange);
    font-weight: bold;
    margin-right: 0.5rem;
}

/* Ultimate fix - use hardcoded color values to avoid any variable issues */
.modal-body ol.manual-numbered li .list-number,
ol.manual-numbered li .list-number,
.list-number {
    color: #ff6b35 !important;
    font-weight: bold !important;
    margin-right: 0.5rem !important;
    display: inline-block !important;
    min-width: 1.5rem !important;
    text-align: left !important;
    background: rgba(255, 107, 53, 0.2) !important;
    border: 1px solid #ff6b35 !important;
    padding: 0.1rem 0.3rem !important;
    border-radius: 3px !important;
}

/* Removed debug marker */

.modal-body ul {
    padding-left: 1.5rem;
}

.modal-body ul>li {
    margin-bottom: 0.5rem;
    list-style-type: disc;
}

.modal-body p {
    margin-bottom: 1rem;
    line-height: 1.6;
}

.modal-body h1,
.modal-body h2,
.modal-body h3 {
    margin-top: 1.5rem;
    margin-bottom: 0.8rem;
    color: var(--primary-orange);
}

.modal-body h1 {
    font-size: 1.5rem;
    border-bottom: 2px solid var(--primary-orange);
    padding-bottom: 0.3rem;
}

.modal-body h2 {
    font-size: 1.3rem;
}

.modal-body h3 {
    font-size: 1.1rem;
}

.modal-body strong {
    color: var(--text-primary);
    font-weight: 600;
}

.modal-body em {
    font-style: italic;
    color: var(--text-secondary);
}

.modal-body code {
    background: var(--bg-primary);
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
    font-family: 'Monaco', 'Consolas', monospace;
    font-size: 0.9rem;
    color: var(--primary-orange);
}

.modal-body pre {
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 5px;
    padding: 1rem;
    overflow-x: auto;
    margin-bottom: 1rem;
}

.modal-body pre code {
    background: none;
    padding: 0;
    color: var(--text-primary);
}

.modal-body a {
    color: var(--primary-orange);
    text-decoration: none;
}

.modal-body a:hover {
    text-decoration: underline;
}

.distillation-content {
    line-height: 1.7;
    color: var(--text-primary);
}

.distillation-content h1,
.distillation-content h2,
.distillation-content h3 {
    color: var(--primary-orange);
    margin: 1.5rem 0 1rem 0;
}

.distillation-content p {
    margin-bottom: 1rem;
}

.distillation-content ol,
.distillation-content ul {
    margin: 1rem 0;
    padding-left: 2rem;
}

.distillation-content li {
    margin-bottom: 0.5rem;
}

.distillation-content strong {
    font-weight: bold !important;
    font-weight: 700 !important;
    /* Bulletproof bold rendering across all browsers */
}

/* Additional bulletproof bold styling */
.distillation-content b,
.distillation-content strong {
    font-weight: bold !important;
    font-weight: 700 !important;
}

/* Raw content and logs */
.raw-content {
    background: var(--bg-primary);
    padding: 1rem;
    border-radius: 8px;
    white-space: pre-wrap;
    font-family: monospace;
    font-size: 0.9rem;
    color: var(--text-secondary);
    max-height: 500px;
    overflow-y: auto;
}

.logs-content {
    background: var(--bg-primary);
    padding: 1rem;
    border-radius: 8px;
    font-family: monospace;
    font-size: 0.9rem;
    color: var(--text-secondary);
    max-height: 500px;
    overflow-y: auto;
}

.log-entry {
    margin-bottom: 0.5rem;
    padding: 0.25rem 0;
    border-bottom: 1px solid var(--border-color);
}

.log-time {
    color: var(--text-muted);
    margin-right: 0.5rem;
}

.log-info {
    color: var(--text-secondary);
}

.log-warn {
    color: #ff9800;
}

.log-error {
    color: var(--status-error);
}

/* Enhanced log styling */
.log-section {
    margin-bottom: 2rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
}

.log-section-title {
    background: var(--bg-tertiary);
    color: var(--text-primary);
    padding: 0.75rem 1rem;
    margin: 0;
    font-size: 0.9rem;
    font-weight: 600;
    border-bottom: 1px solid var(--border-color);
}

.log-entry {
    padding: 0.5rem 1rem;
    border-bottom: 1px solid var(--border-color);
    font-family: 'Monaco', 'Consolas', monospace;
    font-size: 0.8rem;
    line-height: 1.4;
}

.log-entry:last-child {
    border-bottom: none;
}

.log-level {
    font-weight: bold;
    margin-right: 0.5rem;
    min-width: 60px;
    display: inline-block;
}

.log-message {
    word-wrap: break-word;
}

/* Distilly meta info */
.distillation-meta {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
    margin-bottom: 1rem;
}

.elapsed-time,
.word-count {
    font-size: 0.8rem;
    color: var(--text-muted);
    display: flex;
    align-items: center;
    gap: 0.25rem;
}

/* Responsive Design */

/* Tablet breakpoint */
@media (max-width: 1024px) and (min-width: 769px) {
    .knowledge-base-table th:nth-child(2) {
        width: 20%;
    }

    /* Name */
    .knowledge-base-table th:nth-child(3) {
        width: 20%;
    }

    /* Source */
    .knowledge-base-table th:nth-child(5) {
        width: 12%;
    }

    /* Status */

    .knowledge-base-table td:nth-child(2) {
        width: 20%;
    }

    /* Name */
    .knowledge-base-table td:nth-child(3) {
        width: 20%;
    }

    /* Source */
    .knowledge-base-table td:nth-child(5) {
        width: 12%;
    }

    /* Status */
}

/* Mobile breakpoint */
@media (max-width: 768px) {
    .main-content {
        padding: 1rem;
    }

    .main-input-group {
        gap: 1rem;
    }

    .url-input-container {
        position: relative;
    }

    .main-input-field {
        padding: 1rem 4rem 1rem 1rem;
    }

    .action-buttons {
        flex-direction: column;
    }

    .upload-btn,
    .distill-btn {
        min-width: auto;
    }

    .knowledge-base-header {
        flex-direction: column;
        align-items: stretch;
        gap: 1rem;
    }

    .knowledge-base-controls {
        flex-direction: column;
    }

    .search-input {
        width: 100%;
    }

    .knowledge-base-table {
        display: table;
        overflow: visible;
        font-size: 0.8rem;
    }

    .knowledge-base-table th {
        padding: 0.75rem 0.5rem;
        font-size: 0.8rem;
    }

    .knowledge-base-table td {
        padding: 0.75rem 0.5rem;
    }

    /* Adjust column widths for mobile */
    .knowledge-base-table th:nth-child(1) {
        width: 30px;
    }

    /* Checkbox */
    .knowledge-base-table th:nth-child(2) {
        width: 25%;
    }

    /* Name */
    .knowledge-base-table th:nth-child(3) {
        width: 20%;
    }

    /* Source */
    .knowledge-base-table th:nth-child(4) {
        width: 8%;
    }

    /* Type */
    .knowledge-base-table th:nth-child(5) {
        width: 12%;
    }

    /* Status */
    .knowledge-base-table th:nth-child(6) {
        width: 10%;
    }

    /* Duration */
    .knowledge-base-table th:nth-child(7) {
        width: 15%;
    }

    /* Date */
    .knowledge-base-table th:nth-child(8) {
        width: 80px;
    }

    /* Actions */

    .knowledge-base-table td:nth-child(1) {
        width: 30px;
    }

    /* Checkbox */
    .knowledge-base-table td:nth-child(2) {
        width: 25%;
        max-width: 0;
        min-width: 0;
    }

    /* Name */
    .knowledge-base-table td:nth-child(3) {
        width: 20%;
        max-width: 0;
        min-width: 0;
    }

    /* Source */
    .knowledge-base-table td:nth-child(4) {
        width: 8%;
    }

    /* Type */
    .knowledge-base-table td:nth-child(5) {
        width: 12%;
    }

    /* Status */
    .knowledge-base-table td:nth-child(6) {
        width: 10%;
    }

    /* Duration */
    .knowledge-base-table td:nth-child(7) {
        width: 15%;
    }

    /* Date */
    .knowledge-base-table td:nth-child(8) {
        width: 80px;
    }

    /* Actions */

    .table-actions {
        gap: 0.25rem;
        flex-direction: column;
        align-items: stretch;
    }

    .action-btn {
        padding: 0.4rem 0.5rem;
        font-size: 0.7rem;
    }

    /* Ensure text truncation works on mobile */
    .name-cell,
    .source-cell {
        max-width: 0;
        min-width: 0;
        overflow: hidden;
        text-overflow: ellipsis;
        white-space: nowrap;
    }
}

/* Very small screens */
@media (max-width: 480px) {
    .knowledge-base-table {
        min-width: 600px;
        /* Force horizontal scroll on very small screens */
    }

    .knowledge-base-table-container {
        overflow-x: scroll;
    }

    .action-dropdown-content {
        right: 0;
        min-width: 180px;
        max-width: 200px;
    }
}

.actions-cell {
    min-width: 80px;
    text-align: center;
    padding: 0.75rem 0.5rem !important;
}

/* Ensure text truncation works on mobile */
.name-cell,
.source-cell {
    max-width: 0;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
}

/* Tablet responsive styles */
@media (max-width: 1024px) and (min-width: 769px) {
    .knowledge-base-table {
        font-size: 0.9rem;
    }

    .table-actions {
        gap: 0.3rem;
    }

    .action-btn {
        padding: 0.35rem 0.55rem;
        font-size: 0.75rem;
    }

    .actions-cell {
        min-width: 100px;
        text-align: center;
        padding: 0.75rem 0.5rem !important;
    }
}

/* Tablet responsive styles */
@media (max-width: 1024px) and (min-width: 769px) {
    .knowledge-base-table {
        font-size: 0.9rem;
    }

    .table-actions {
        gap: 0.3rem;
    }

    .action-btn {
        padding: 0.35rem 0.55rem;
        font-size: 0.75rem;
    }

    .actions-cell {
        min-width: 100px;
        text-align: center;
        padding: 0.75rem 0.5rem !important;
    }
}

@media (max-width: 768px) {
    .modal-content {
        width: 95%;
        margin: 2.5% auto;
    }

    .modal-body {
        padding: 1.5rem;
    }
}

/* Download Button States */
.downloading {
    position: relative;
    opacity: 0.8;
}

.downloading .btn-icon {
    animation: pulse 1.5s ease-in-out infinite;
}

.downloading.cancellable {
    opacity: 1;
    background: var(--status-error) !important;
    color: white !important;
}

.downloading.cancellable:hover {
    background: #d32f2f !important;
}

.download-error {
    background: var(--status-error) !important;
    color: white !important;
    animation: errorFlash 0.3s ease-in-out;
}

.download-error:hover {
    background: #d32f2f !important;
}

@keyframes errorFlash {
    0% {
        background: var(--status-error);
    }

    50% {
        background: #ff6b6b;
    }

    100% {
        background: var(--status-error);
    }
}

/* Loading Animation */
.loading {
    opacity: 0.6;
    pointer-events: none;
}

.btn-loading {
    position: relative;
}

.btn-loading::after {
    content: '';
    position: absolute;
    width: 16px;
    height: 16px;
    margin: auto;
    border: 2px solid transparent;
    border-top-color: #ffffff;
    border-radius: 50%;
    animation: spin 1s linear infinite;
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }

    100% {
        transform: rotate(360deg);
    }
}

@keyframes pulse {

    0%,
    100% {
        opacity: 1;
    }

    50% {
        opacity: 0.5;
    }
}

/* AI 
Settings Styles */
.header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 2rem;
}

.header-actions {
    display: flex;
    gap: 1rem;
}

.settings-btn {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    color: var(--text-primary);
    padding: 0.5rem 1rem;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
    transition: all 0.2s ease;
}

.settings-btn:hover {
    background: var(--border-hover);
    border-color: var(--border-hover);
}

/* AI Provider Configuration */
.ai-provider-config {
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

.config-section {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 1.5rem;
}

.config-section-title {
    color: var(--text-primary);
    font-size: 1.1rem;
    font-weight: 600;
    margin-bottom: 1rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

/* Mode Toggle */
.mode-toggle-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.mode-toggle {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 30px;
}

.mode-toggle input[type="checkbox"] {
    opacity: 0;
    width: 0;
    height: 0;
}

.toggle-slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: var(--bg-tertiary);
    border: 2px solid var(--border-color);
    transition: 0.3s;
    border-radius: 30px;
}

.toggle-slider:before {
    position: absolute;
    content: "";
    height: 22px;
    width: 22px;
    left: 2px;
    bottom: 2px;
    background-color: var(--text-secondary);
    transition: 0.3s;
    border-radius: 50%;
}

input:checked+.toggle-slider {
    background-color: var(--primary-orange);
    border-color: var(--primary-orange);
}

input:checked+.toggle-slider:before {
    transform: translateX(30px);
    background-color: white;
}

.mode-labels {
    display: flex;
    gap: 2rem;
    align-items: center;
}

.mode-label {
    font-size: 0.9rem;
    color: var(--text-secondary);
    transition: color 0.3s ease;
}

.mode-label.active {
    color: var(--primary-orange);
    font-weight: 500;
}

.mode-description {
    color: var(--text-muted);
    font-size: 0.875rem;
    margin-top: 0.5rem;
}

/* Form Elements */
.form-group {
    margin-bottom: 1.5rem;
}

.form-label {
    display: block;
    color: var(--text-primary);
    font-weight: 500;
    margin-bottom: 0.5rem;
    font-size: 0.9rem;
}

.form-input,
.form-select {
    width: 100%;
    padding: 0.75rem;
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 0.9rem;
    transition: all 0.2s ease;
}

.form-input:focus,
.form-select:focus {
    outline: none;
    border-color: var(--primary-orange);
    box-shadow: 0 0 0 2px var(--shadow-light);
}

.form-input::placeholder {
    color: var(--text-muted);
}

.form-help {
    display: block;
    color: var(--text-muted);
    font-size: 0.8rem;
    margin-top: 0.25rem;
}

.security-notice {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 4px;
}

.security-icon {
    font-size: 0.875rem;
}

.security-text {
    color: var(--text-muted);
    font-size: 0.75rem;
    line-height: 1.3;
}

/* API Key Input */
.api-key-input-container {
    position: relative;
    display: flex;
}

.api-key-input-container .form-input {
    padding-right: 3rem;
}

.toggle-visibility-btn {
    position: absolute;
    right: 0.5rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: var(--text-muted);
    cursor: pointer;
    padding: 0.25rem;
    border-radius: 4px;
    transition: color 0.2s ease;
}

.toggle-visibility-btn:hover {
    color: var(--text-secondary);
}

/* Test Button */
.test-btn {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    color: var(--text-primary);
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    transition: all 0.2s ease;
    margin-top: 1rem;
}

.test-btn:hover {
    background: var(--border-hover);
    border-color: var(--border-hover);
}

.test-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.test-btn.testing {
    background: var(--status-processing);
    border-color: var(--status-processing);
}

.test-btn.success {
    background: var(--status-completed);
    border-color: var(--status-completed);
}

.test-btn.error {
    background: var(--status-error);
    border-color: var(--status-error);
}

/* Test Results */
.test-results {
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 1rem;
    margin-top: 1rem;
}

.test-result-content {
    font-size: 0.9rem;
}

.test-result-content.success {
    color: var(--status-completed);
}

.test-result-content.error {
    color: var(--status-error);
}

.test-result-content.info {
    color: var(--status-processing);
}

/* Modal Actions */
.modal-actions {
    display: flex;
    gap: 1rem;
    justify-content: flex-end;
    padding-top: 1.5rem;
    border-top: 1px solid var(--border-color);
    margin-top: 2rem;
}

.save-btn {
    background: var(--primary-orange);
    border: 1px solid var(--primary-orange);
    color: white;
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    font-weight: 500;
    transition: all 0.2s ease;
    min-width: 180px;
    width: 180px;
}

.save-btn:hover {
    background: var(--orange-hover);
    border-color: var(--orange-hover);
}

.save-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
}

.reset-btn {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    color: var(--text-primary);
    padding: 0.75rem 1.5rem;
    border-radius: 8px;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.9rem;
    transition: all 0.2s ease;
}

.reset-btn:hover {
    background: var(--border-hover);
    border-color: var(--border-hover);
}

/* Hidden class */
.hidden {
    display: none !important;
}

/* Large modal for settings */
.large-modal {
    max-width: 600px;
    width: 90vw;
}

/* Responsive adjustments */
@media (max-width: 768px) {
    .header {
        flex-direction: column;
        gap: 1rem;
        text-align: center;
    }

    .header-actions {
        justify-content: center;
    }

    .mode-labels {
        flex-direction: column;
        gap: 0.5rem;
        text-align: center;
    }

    .modal-actions {
        flex-direction: column;
    }

    .large-modal {
        width: 95vw;
        margin: 1rem;
    }
}

/* NUMBERE
D LIST FIX - Black Bold Numbers */
/* Force override browser defaults for manual numbered lists */
ol.manual-numbered {
    padding-left: 0 !important;
    list-style: none !important;
    margin-left: 0 !important;
    margin-bottom: 1rem !important;
    counter-reset: none !important;
}

ol.manual-numbered li {
    display: block !important;
    margin-bottom: 0.5rem !important;
    padding-left: 0 !important;
    position: relative !important;
    list-style: none !important;
    list-style-type: none !important;
    counter-increment: none !important;
}

ol.manual-numbered li::before {
    display: none !important;
    content: none !important;
}

ol.manual-numbered li::marker {
    display: none !important;
    content: none !important;
}

/* Black bold numbers as requested */
.modal-body ol.manual-numbered li .list-number,
ol.manual-numbered li .list-number,
.list-number {
    color: var(--text-primary) !important;
    font-weight: bold !important;
    margin-right: 0.5rem !important;
    display: inline-block !important;
    min-width: 1.5rem !important;
    text-align: left !important;
    background: none !important;
    border: none !important;
    padding: 0 !important;
}

/* Additional reset for manual numbered lists */
.modal-body ol.manual-numbered,
.modal-body ol.manual-numbered * {
    list-style: none !important;
    list-style-type: none !important;
    counter-reset: none !important;
    counter-increment: none !important;
}

.modal-body ol.manual-numbered li::marker {
    display: none !important;
    content: none !important;
}

/* Fallback for regular ol elements */
.modal-body ol:not(.manual-numbered) {
    padding-left: 1.5rem !important;
    list-style-type: decimal !important;
}

.modal-body ol:not(.manual-numbered) li {
    display: list-item !important;
    margin-bottom: 0.5rem !important;
    list-style-type: decimal !important;
}

.modal-body ul {
    padding-left: 1.5rem;
}

.modal-body ul>li {
    margin-bottom: 0.5rem;
    list-style-type: disc;
}

.modal-body p {
    margin-bottom: 1rem;
    line-height: 1.6;
}

.modal-body h1,
.modal-body h2,
.modal-body h3 {
    margin-top: 1.5rem;
    margin-bottom: 0.8rem;
    color: var(--primary-orange);
}

.modal-body h1 {
    font-size: 1.5rem;
    border-bottom: 2px solid var(--primary-orange);
    padding-bottom: 0.3rem;
}

.modal-body h2 {
    font-size: 1.3rem;
}

.modal-body h3 {
    font-size: 1.1rem;
}

.modal-body strong {
    color: var(--text-primary);
    font-weight: 600;
}

.modal-body em {
    font-style: italic;
    color: var(--text-secondary);
}

.modal-body code {
    background: var(--bg-primary);
    padding: 0.2rem 0.4rem;
    border-radius: 3px;
    font-family: 'Monaco', 'Consolas', monospace;
    font-size: 0.9rem;
    color: var(--primary-orange);
}

.modal-body pre {
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 5px;
    padding: 1rem;
    overflow-x: auto;
    margin-bottom: 1rem;
}

.modal-body pre code {
    background: none;
    padding: 0;
    color: var(--text-primary);
}

.modal-body a {
    color: var(--primary-orange);
    text-decoration: none;
}

.modal-body a:hover {
    text-decoration: underline;
}

.distillation-content {
    line-height: 1.7;
    color: var(--text-primary);
}

.distillation-content h1,
.distillation-content h2,
.distillation-content h3 {
    color: var(--primary-orange);
    margin: 1.5rem 0 1rem 0;
}

.distillation-content p {
    margin-bottom: 1rem;
}

.distillation-content ol,
.distillation-content ul {
    margin: 1rem 0;
    padding-left: 2rem;
}

.distillation-content li {
    margin-bottom: 0.5rem;
}

/* ==
=== NUMBERED LIST FIX - COMPREHENSIVE RESET ===== */

/* Step 1: Complete browser default override for manual numbered lists */
ol.manual-numbered {
    list-style: none !important;
    list-style-type: none !important;
    padding-left: 0 !important;
    margin-left: 0 !important;
    margin-bottom: 1rem !important;
    counter-reset: none !important;
    counter-increment: none !important;
}

/* Step 2: Reset all list item defaults */
ol.manual-numbered li {
    list-style: none !important;
    list-style-type: none !important;
    display: block !important;
    margin-bottom: 0.5rem !important;
    padding-left: 0 !important;
    position: relative !important;
    counter-increment: none !important;
}

/* Step 3: Disable browser-generated markers and pseudo-elements */
ol.manual-numbered li::before {
    display: none !important;
    content: none !important;
}

ol.manual-numbered li::marker {
    display: none !important;
    content: none !important;
}

ol.manual-numbered li::after {
    display: none !important;
    content: none !important;
}

/* Step 4: Apply to modal context specifically */
.modal-body ol.manual-numbered {
    list-style: none !important;
    list-style-type: none !important;
    padding-left: 0 !important;
    margin-left: 0 !important;
    counter-reset: none !important;
}

.modal-body ol.manual-numbered li {
    list-style: none !important;
    list-style-type: none !important;
    display: block !important;
    counter-increment: none !important;
}

.modal-body ol.manual-numbered li::before,
.modal-body ol.manual-numbered li::marker,
.modal-body ol.manual-numbered li::after {
    display: none !important;
    content: none !important;
}

/* ===
== BLACK BOLD NUMBER STYLING ===== */

/* Primary styling for list numbers - black bold without decoration */
.list-number {
    color: var(--text-primary) !important;
    font-weight: bold !important;
    margin-right: 0.5rem !important;
    display: inline-block !important;
    min-width: 1.5rem !important;
    text-align: left !important;
    background: none !important;
    background-color: transparent !important;
    border: none !important;
    padding: 0 !important;
    box-shadow: none !important;
    outline: none !important;
}

/* Modal context specific styling */
.modal-body .list-number {
    color: var(--text-primary) !important;
    font-weight: bold !important;
    margin-right: 0.5rem !important;
    display: inline-block !important;
    background: none !important;
    border: none !important;
    padding: 0 !important;
}

/* High specificity override for any conflicting styles */
.modal-body ol.manual-numbered li .list-number {
    color: var(--text-primary) !important;
    font-weight: bold !important;
    margin-right: 0.5rem !important;
    display: inline-block !important;
    min-width: 1.5rem !important;
    text-align: left !important;
    background: none !important;
    background-color: transparent !important;
    border: none !important;
    padding: 0 !important;
    box-shadow: none !important;
}

/* Ultimate fallback with maximum specificity */
ol.manual-numbered li .list-number {
    color: var(--text-primary) !important;
    font-weight: bold !important;
    margin-right: 0.5rem !important;
    display: inline-block !important;
    background: none !important;
    border: none !important;
    padding: 0 !important;
}

/* Clean numbered list styling */

/* Clean numbered list styling */
ol.manual-numbered {
    padding-left: 0 !important;
    margin-left: 0 !important;
}

ol.manual-numbered li {
    position: relative !important;
}

/* List number styling */

/* Fallback CSS rules with multiple specificity levels */
html body .modal-body ol.manual-numbered li .list-number,
html body ol.manual-numbered li .list-number,
html body .list-number {
    color: var(--text-primary) !important;
    font-weight: bold !important;
    margin-right: 0.5rem !important;
    display: inline-block !important;
    background: none !important;
    border: none !important;
    padding: 0 !important;
}

/* Processing Queue Configuration Styles */
.number-input-container {
    display: flex;
    align-items: center;
    gap: 8px;
    width: fit-content;
}

.number-input {
    width: 80px !important;
    text-align: center;
    padding: 8px 12px !important;
    appearance: textfield;
}

/* Remove arrows from number input in Chrome, Safari, Edge */
.number-input::-webkit-outer-spin-button,
.number-input::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
}

.number-btn {
    background: var(--bg-tertiary);
    border: 1px solid var(--border-color);
    color: var(--text-secondary);
    width: 32px;
    height: 32px;
    font-size: 16px;
    font-weight: bold;
    line-height: 1;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
    border-radius: 4px;
}

.number-btn:hover {
    background: var(--border-hover);
    color: var(--text-primary);
}

.number-btn:active {
    background: var(--primary-orange);
    color: white;
}

/* Action Dropdown */
.action-dropdown {
    position: relative;
    display: inline-block;
    width: 100%;
}

/* Duplicate rules removed */

.action-dropdown-item {
    display: block;
    width: 100%;
    padding: 0.6rem 0.8rem;
    color: var(--text-secondary);
    text-decoration: none;
    font-size: 0.8rem;
    border: none;
    background: none;
    cursor: pointer;
    text-align: left;
    transition: all 0.2s ease;
    border-bottom: 1px solid var(--border-color);
}

.action-dropdown-item:last-child {
    border-bottom: none;
}

.action-dropdown-item:hover {
    background: var(--bg-tertiary);
    color: var(--text-primary);
}

.action-dropdown-item.delete-item:hover {
    background: var(--error-bg);
    color: var(--error-color);
}

.action-dropdown-item.retry-item:hover {
    background: var(--primary-orange);
    color: white;
}

/* Enhan
ced Logs Styling */
.log-section {
    margin-bottom: 1.5rem;
    border: 1px solid var(--border-color);
    border-radius: 8px;
    overflow: hidden;
}

.log-section-title {
    background: var(--bg-tertiary);
    color: var(--text-primary);
    padding: 0.75rem 1rem;
    margin: 0;
    font-size: 0.9rem;
    font-weight: 600;
    border-bottom: 1px solid var(--border-color);
}

.log-entry {
    padding: 0.5rem 1rem;
    border-bottom: 1px solid var(--border-color);
    font-family: 'Courier New', monospace;
    font-size: 0.85rem;
    line-height: 1.4;
}

.log-entry:last-child {
    border-bottom: none;
}

.log-time {
    color: var(--text-muted);
    margin-right: 0.5rem;
}

.log-level {
    font-weight: bold;
    margin-right: 0.5rem;
    min-width: 60px;
    display: inline-block;
}

.log-message {
    color: var(--text-secondary);
}

.log-info {
    background: var(--bg-primary);
}

.log-info .log-level {
    color: var(--primary-blue);
}

.log-warn {
    background: var(--warning-bg);
}

.log-warn .log-level {
    color: var(--warning-color);
}

.log-error {
    background: var(--error-bg);
}

.log-error .log-level {
    color: var(--error-color);
}

.log-success {
    background: var(--success-bg);
}

.log-success .log-level {
    color: var(--success-color);
}

/* Ensure
 dropdown is visible on smaller screens */
@media (max-width: 768px) {
    .action-dropdown-content {
        right: 10px;
        min-width: 160px;
    }

    .action-dropdown-btn {
        min-width: 60px;
        padding: 0.3rem 0.5rem;
        font-size: 0.75rem;
    }

    .actions-cell {
        padding: 0.75rem 0.5rem !important;
    }
}

/* Duplicate media query removed */

/* Enh
anced Bold Formatting Rules - Bulletproof Implementation */

/* List number styling with strong bold formatting */
.list-number {
    color: #ff6b35 !important;
    font-weight: bold !important;
    font-weight: 700 !important;
    margin-right: 0.5rem !important;
    display: inline-block !important;
    min-width: 1.5rem !important;
    text-align: left !important;
    background: rgba(255, 107, 53, 0.2) !important;
    border: 1px solid #ff6b35 !important;
    padding: 0.1rem 0.3rem !important;
    border-radius: 3px !important;
}

/* Modal content bold formatting */
.modal-body strong,
.modal-body b {
    font-weight: bold !important;
    font-weight: 700 !important;
    color: var(--text-primary) !important;
}

/* Distillation content bold formatting */
.distillation-content strong,
.distillation-content b {
    font-weight: bold !important;
    font-weight: 700 !important;
    color: var(--text-primary) !important;
}

/* Manual numbered lists bold formatting */
.modal-body ol.manual-numbered li,
ol.manual-numbered li {
    font-weight: bold !important;
    font-weight: 700 !important;
    color: var(--text-primary) !important;
}

.modal-body ol.manual-numbered li strong,
ol.manual-numbered li strong,
.modal-body ol.manual-numbered li .list-number,
ol.manual-numbered li .list-number {
    font-weight: bold !important;
    font-weight: 700 !important;
    color: #ff6b35 !important;
}

/* Cross-browser bold compatibility */
.modal-body ol.manual-numbered,
ol.manual-numbered,
.distillation-content ol.manual-numbered {
    font-weight: bold !important;
    font-weight: 700 !important;
}

.modal-body ol.manual-numbered *,
ol.manual-numbered *,
.distillation-content ol.manual-numbered * {
    font-weight: inherit !important;
}

/* Ensure numbered list items are always bold */
.modal-body ol li,
.distillation-content ol li {
    font-weight: bold !important;
    font-weight: 700 !important;
}

/* Webkit/Blink specific bold rendering */
@supports (-webkit-appearance: none) {

    .modal-body strong,
    .distillation-content strong,
    .list-number,
    ol.manual-numbered li {
        -webkit-font-smoothing: antialiased;
        font-weight: 700 !important;
    }
}

/* Firefox specific bold rendering */
@-moz-document url-prefix() {

    .modal-body strong,
    .distillation-content strong,
    .list-number,
    ol.manual-numbered li {
        font-weight: 700 !important;
    }
}

/* Edge/IE specific bold rendering */
@supports (-ms-ime-align: auto) {

    .modal-body strong,
    .distillation-content strong,
    .list-number,
    ol.manual-numbered li {
        font-weight: 700 !important;
    }
}

/* Ultimate fallback for any missed elements */
.modal-body [class*="list-number"],
.distillation-content [class*="list-number"],
.modal-body [class*="manual-numbered"] li,
.distillation-content [class*="manual-numbered"] li {
    font-weight: bold !important;
    font-weight: 700 !important;
}

/* Additional bold formatting for nested patterns - handled by JavaScript */
.modal-body .nested-numbered,
.distillation-content .nested-numbered {
    font-weight: bold !important;
    font-weight: 700 !important;
}

.input-actions-container {
    display: flex;
    flex-direction: column;
    gap: 1rem;
}

.dropzone {
    background: var(--bg-primary);
    border: 2px dashed var(--border-color);
    border-radius: 12px;
    padding: 1.5rem;
    text-align: center;
    color: var(--text-secondary);
    font-size: 0.9rem;
    cursor: pointer;
    transition: border-color 0.3s ease, background-color 0.3s ease;
}

.dropzone:hover {
    border-color: var(--primary-orange);
    background-color: var(--bg-tertiary);
}

.dropzone-text {
    font-weight: 500;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    text-align: center;
    color: white;
    opacity: 1;
}

.action-buttons-layout {
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
}

.settings-left {
    flex: 0 0 auto;
}

.distill-center {
    flex: 1 1 auto;
    display: flex;
    justify-content: center;
    margin-top: 1rem;
}
/* Horizontal unified input bar */
.input-bar {
    display: flex;
    gap: 1rem;
    align-items: center;
    justify-content: space-between;
    flex-wrap: wrap;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 1rem;
}

/* Input field (text) */
.unified-input {
    flex: 1;
    background: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 0.75rem 1rem;
    color: var(--text-primary);
    font-size: 1rem;
    min-width: 200px;
}

.unified-input:focus {
    outline: none;
    border-color: var(--primary-orange);
    box-shadow: 0 0 0 3px var(--shadow-light);
}

.unified-input::placeholder {
    color: var(--text-muted);
    opacity: 1;
}

/* File upload button */
.file-upload-btn {
    background: var(--bg-tertiary);
    color: var(--text-secondary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 0.75rem 1.25rem;
    cursor: pointer;
    font-weight: 500;
    white-space: nowrap;
    transition: all 0.2s ease;
}

.file-upload-btn:hover {
    background: var(--bg-primary);
    color: var(--primary-orange);
    border-color: var(--primary-orange);
}

/* Inline dropzone */
.dropzone-inline {
    background: var(--bg-secondary);
    color: var(--text-muted);
    border: 2px dashed var(--border-color);
    border-radius: 8px;
    padding: 0.75rem 1.25rem;
    font-size: 0.9rem;
    white-space: nowrap;
    transition: border-color 0.2s ease;
}

.dropzone-inline:hover {
    border-color: var(--primary-orange);
    color: var(--text-secondary);
}

/* Distill button stays the same but positioned in the bar */
.input-bar .distill-btn {
    background: var(--primary-orange);
    border: none;
    border-radius: 12px;
    padding: 1rem 2rem;
    color: white;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    white-space: nowrap;
    min-width: 150px;
    justify-content: center;
}

.input-bar .distill-btn:hover {
    background: var(--orange-hover);
    transform: translateY(-1px);
    box-shadow: 0 8px 25px var(--shadow-medium);
}

.input-bar .distill-btn:active {
    transform: translateY(0);
}

.input-bar .distill-btn.disabled {
    background: var(--bg-tertiary);
    color: var(--text-muted);
    cursor: not-allowed;
    transform: none;
    box-shadow: none;
}

.input-bar .distill-btn.disabled:hover {
    background: var(--bg-tertiary);
    color: var(--text-muted);
    transform: none;
    box-shadow: none;
}

/* Responsive adjustments for the input bar */
@media (max-width: 768px) {
    .input-bar {
        flex-direction: column;
        align-items: stretch;
        gap: 0.75rem;
    }
    
    .unified-input {
        min-width: auto;
        width: 100%;
        order: 1;
    }
    
    .file-upload-btn {
        text-align: center;
        order: 2;
    }
    
    .dropzone-inline {
        text-align: center;
        order: 3;
    }
    
    .input-bar .distill-btn {
        min-width: auto;
        width: 100%;
        order: 4;
    }
}

@media (max-width: 480px) {
    .input-bar {
        padding: 0.75rem;
        gap: 0.5rem;
    }
    
    .unified-input,
    .file-upload-btn,
    .dropzone-inline,
    .input-bar .distill-btn {
        padding: 0.6rem 1rem;
        font-size: 0.9rem;
    }
}


---
File: /routes/ai-settings.js
---

/**
 * AI Settings API Routes
 * Handles AI provider configuration and testing
 */
const express = require('express');
const router = express.Router();
const AIProviderFactory = require('../services/ai/AIProviderFactory');

/**
 * Test AI provider connection
 * POST /api/test-ai-provider
 */
router.post('/test-ai-provider', async (req, res) => {
    try {
        const { type, apiKey, model, endpoint } = req.body;

        console.log(`Testing AI provider: ${type}`);

        // Validate request
        if (!type) {
            return res.status(400).json({
                success: false,
                error: 'Provider type is required'
            });
        }

        // Create provider configuration
        const config = {
            type: type,
            model: model,
            endpoint: endpoint
        };

        // Add API key for online providers
        if (type !== 'ollama' && apiKey) {
            config.apiKey = apiKey;
        }

        // Validate configuration
        const validation = AIProviderFactory.validateConfig(config);
        if (!validation.valid) {
            return res.status(400).json({
                success: false,
                error: validation.errors.join(', ')
            });
        }

        // Create provider instance
        const provider = AIProviderFactory.createProvider(config);

        // Test connection
        const testResult = await provider.testConnection();

        if (testResult.success) {
            res.json({
                success: true,
                latency: testResult.latency,
                response: testResult.response,
                tokensUsed: testResult.tokensUsed,
                inputTokens: testResult.inputTokens,
                outputTokens: testResult.outputTokens
            });
        } else {
            res.status(400).json({
                success: false,
                error: testResult.error,
                latency: testResult.latency
            });
        }

    } catch (error) {
        console.error('Error testing AI provider:', error);
        res.status(500).json({
            success: false,
            error: error.message || 'Internal server error'
        });
    }
});

/**
 * Get available providers
 * GET /api/ai-providers
 */
router.get('/ai-providers', (req, res) => {
    try {
        const providers = AIProviderFactory.getSupportedProviders();
        res.json({
            success: true,
            providers: providers
        });
    } catch (error) {
        console.error('Error getting AI providers:', error);
        res.status(500).json({
            success: false,
            error: error.message || 'Internal server error'
        });
    }
});

/**
 * Get provider information
 * GET /api/ai-providers/:type
 */
router.get('/ai-providers/:type', (req, res) => {
    try {
        const { type } = req.params;
        const providerInfo = AIProviderFactory.getProviderInfo(type);

        if (!providerInfo) {
            return res.status(404).json({
                success: false,
                error: `Provider type '${type}' not found`
            });
        }

        res.json({
            success: true,
            provider: providerInfo
        });
    } catch (error) {
        console.error('Error getting provider info:', error);
        res.status(500).json({
            success: false,
            error: error.message || 'Internal server error'
        });
    }
});

/**
 * Validate AI provider configuration
 * POST /api/validate-ai-config
 */
router.post('/validate-ai-config', (req, res) => {
    try {
        const config = req.body;
        const validation = AIProviderFactory.validateConfig(config);

        res.json({
            success: true,
            valid: validation.valid,
            errors: validation.errors
        });
    } catch (error) {
        console.error('Error validating AI config:', error);
        res.status(500).json({
            success: false,
            error: error.message || 'Internal server error'
        });
    }
});

// Use singleton instance of AISettingsManager
const AISettingsManager = require('../services/ai/AISettingsManager');
const sharedSettingsManager = AISettingsManager.getInstance();

/**
 * Save AI provider settings
 * POST /api/ai-settings
 */
router.post('/ai-settings', (req, res) => {
    try {
        const settings = req.body;

        // Validate settings
        const validation = sharedSettingsManager.validateSettings(settings);
        console.log('Backend: Validation result:', validation);
        if (!validation.valid) {
            console.log('Backend: Validation failed with errors:', validation.errors);
            return res.status(400).json({
                success: false,
                error: validation.errors.join(', ')
            });
        }

        // Save settings
        console.log('Backend: Saving AI settings:', JSON.stringify(settings, null, 2));
        sharedSettingsManager.saveSettings(settings);
        console.log('Backend: Settings saved successfully');

        res.json({
            success: true,
            message: 'Settings saved successfully'
        });
    } catch (error) {
        console.error('Error saving AI settings:', error);
        res.status(500).json({
            success: false,
            error: error.message || 'Internal server error'
        });
    }
});

/**
 * Get AI provider settings
 * GET /api/ai-settings
 */
router.get('/ai-settings', (req, res) => {
    try {
        const settings = sharedSettingsManager.loadSettings();
        console.log('Backend: Loading AI settings:', JSON.stringify(settings, null, 2));

        res.json({
            success: true,
            settings: settings
        });
    } catch (error) {
        console.error('Error loading AI settings:', error);
        res.status(500).json({
            success: false,
            error: error.message || 'Internal server error'
        });
    }
});

module.exports = router;/**
 * 
Update processing queue settings
 * POST /api/processing-queue/settings
 */
router.post('/processing-queue/settings', (req, res) => {
    try {
        const { concurrentProcessing } = req.body;
        
        if (!concurrentProcessing || concurrentProcessing < 1 || concurrentProcessing > 10) {
            return res.status(400).json({
                success: false,
                error: 'Concurrent processing limit must be between 1 and 10'
            });
        }

        // Update the processing queue
        const processingQueue = require('../services/ProcessingQueue');
        processingQueue.setMaxConcurrent(concurrentProcessing);

        res.json({
            success: true,
            message: `Processing queue limit updated to ${concurrentProcessing}`
        });

    } catch (error) {
        console.error('Error updating processing queue settings:', error);
        res.status(500).json({
            success: false,
            error: error.message || 'Internal server error'
        });
    }
});

/**
 * Get processing queue status
 * GET /api/processing-queue/status
 */
router.get('/processing-queue/status', (req, res) => {
    try {
        const processingQueue = require('../services/ProcessingQueue');
        const status = processingQueue.getStatus();

        res.json({
            success: true,
            status: status
        });

    } catch (error) {
        console.error('Error getting processing queue status:', error);
        res.status(500).json({
            success: false,
            error: error.message || 'Internal server error'
        });
    }
});


---
File: /services/ai/providers/AnthropicProvider.js
---

/**
 * Anthropic Claude AI Provider
 * Handles communication with Anthropic's Claude API
 */
const AIProvider = require('../AIProvider');
const axios = require('axios');

class AnthropicProvider extends AIProvider {
    constructor(config = {}) {
        super(config);
        this.apiKey = config.apiKey;
        this.model = config.model || 'claude-3-5-haiku-latest';
        this.endpoint = config.endpoint || 'https://api.anthropic.com/v1';
        this.timeout = config.timeout || 60000; // 1 minute default
        
        if (!this.apiKey) {
            throw new Error('Anthropic API key is required');
        }
    }

    /**
     * Generate a distillation using Anthropic Claude
     * @param {string} text - The text to distill
     * @param {Object} options - Distillation options
     * @returns {Promise<string>} - The generated distillation
     */
    async generateSummary(text, options = {}) {
        try {
            const processedText = this.preprocessText(text);
            const prompt = this.createDistillationPrompt(processedText, options);

            console.log(`Sending request to Anthropic with ${processedText.length} characters`);
            console.log(`Using model: ${this.model}`);

            const requestData = {
                model: this.model,
                max_tokens: options.max_tokens || 1000,
                messages: [
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                temperature: options.temperature || 0.7,
                top_p: options.top_p || 1.0
            };

            const startTime = Date.now();
            console.log(`Anthropic request started at: ${new Date().toISOString()}`);

            const response = await axios.post(`${this.endpoint}/messages`, requestData, {
                timeout: this.timeout,
                headers: {
                    'x-api-key': this.apiKey,
                    'Content-Type': 'application/json',
                    'anthropic-version': '2023-06-01'
                }
            });

            const endTime = Date.now();
            const duration = (endTime - startTime) / 1000;

            if (response.data && response.data.content && response.data.content[0]) {
                const rawDistillation = response.data.content[0].text.trim();
                console.log(`Anthropic response received in ${duration.toFixed(2)}s`);
                console.log(`Distillation length: ${rawDistillation.length} characters`);
                console.log(`Input tokens: ${response.data.usage?.input_tokens || 'unknown'}`);
                console.log(`Output tokens: ${response.data.usage?.output_tokens || 'unknown'}`);
                
                // Apply post-processing to fix numbering and other issues
                const processedDistillation = this.postProcessDistillation(rawDistillation);
                return processedDistillation;
            } else {
                throw new Error('Invalid response format from Anthropic');
            }

        } catch (error) {
            console.error('Error generating distillation with Anthropic:', error);
            
            if (error.response) {
                const status = error.response.status;
                const data = error.response.data;
                
                if (status === 401) {
                    throw new Error('Invalid Anthropic API key. Please check your API key.');
                } else if (status === 429) {
                    throw new Error('Anthropic API rate limit exceeded. Please wait before making more requests.');
                } else if (status === 400) {
                    throw new Error(`Anthropic API error: ${data.error?.message || 'Bad request'}`);
                } else {
                    throw new Error(`Anthropic API error (${status}): ${data.error?.message || error.message}`);
                }
            }

            throw new Error(`Anthropic error: ${error.message}`);
        }
    }

    /**
     * Validate Anthropic configuration
     * @returns {Promise<{valid: boolean, error?: string}>} - Validation result
     */
    async validateConfiguration() {
        try {
            // Basic API key format validation
            if (!this.apiKey || !this.apiKey.startsWith('sk-ant-')) {
                return {
                    valid: false,
                    error: 'Invalid Anthropic API key format. API key should start with "sk-ant-"'
                };
            }

            // Test API key with a simple request
            const response = await axios.post(`${this.endpoint}/messages`, {
                model: this.model,
                max_tokens: 10,
                messages: [
                    {
                        role: 'user',
                        content: 'Hello'
                    }
                ]
            }, {
                timeout: 10000,
                headers: {
                    'x-api-key': this.apiKey,
                    'Content-Type': 'application/json',
                    'anthropic-version': '2023-06-01'
                }
            });

            if (response.data && response.data.content) {
                return { valid: true };
            } else {
                return {
                    valid: false,
                    error: 'Invalid response from Anthropic API'
                };
            }

        } catch (error) {
            if (error.response) {
                const status = error.response.status;
                const data = error.response.data;
                
                if (status === 401) {
                    return {
                        valid: false,
                        error: 'Invalid Anthropic API key'
                    };
                } else if (status === 429) {
                    return {
                        valid: false,
                        error: 'Anthropic API rate limit exceeded'
                    };
                } else if (status === 400 && data.error?.type === 'invalid_request_error') {
                    if (data.error.message.includes('model')) {
                        return {
                            valid: false,
                            error: `Model "${this.model}" is not available`
                        };
                    }
                }
            }

            return {
                valid: false,
                error: `Anthropic validation failed: ${error.message}`
            };
        }
    }

    /**
     * Get required configuration fields
     * @returns {Object} - Configuration schema
     */
    getRequiredConfig() {
        return {
            apiKey: {
                type: 'string',
                required: true,
                sensitive: true,
                description: 'Anthropic API key (starts with sk-ant-)'
            },
            model: {
                type: 'string',
                required: false,
                default: 'claude-3-5-haiku-latest',
                description: 'Claude model to use'
            }
        };
    }

    /**
     * Get available models from Anthropic
     * @returns {Array<string>} - List of available model names
     */
    getAvailableModels() {
        return [
            'claude-opus-4-20250514',
            'claude-sonnet-4-20250514',
            'claude-3-7-sonnet-latest',
            'claude-3-5-haiku-latest'
        ];
    }

    /**
     * Get display name for this provider
     * @returns {string} - Human-readable provider name
     */
    getDisplayName() {
        return 'Anthropic Claude';
    }

    /**
     * Get maximum input length for Anthropic
     * @returns {number} - Maximum input length in characters
     */
    getMaxInputLength() {
        // Claude models have different context windows
        if (this.model.includes('claude-3')) {
            return 150000; // ~200k tokens, leaving room for output
        }
        return 75000; // Conservative estimate for older models
    }



    /**
     * Test connection to Anthropic with a simple request
     * @returns {Promise<{success: boolean, error?: string, latency?: number}>} - Test result
     */
    async testConnection() {
        const startTime = Date.now();
        
        try {
            const response = await axios.post(`${this.endpoint}/messages`, {
                model: this.model,
                max_tokens: 20,
                messages: [
                    {
                        role: 'user',
                        content: 'Please respond with "Claude connection test successful" to confirm the connection.'
                    }
                ]
            }, {
                timeout: 30000,
                headers: {
                    'x-api-key': this.apiKey,
                    'Content-Type': 'application/json',
                    'anthropic-version': '2023-06-01'
                }
            });

            const latency = Date.now() - startTime;

            if (response.data && response.data.content && response.data.content[0]) {
                return {
                    success: true,
                    latency: latency,
                    response: response.data.content[0].text.trim(),
                    inputTokens: response.data.usage?.input_tokens,
                    outputTokens: response.data.usage?.output_tokens
                };
            } else {
                return {
                    success: false,
                    error: 'Invalid response format from Anthropic'
                };
            }

        } catch (error) {
            return {
                success: false,
                error: this.formatError(error),
                latency: Date.now() - startTime
            };
        }
    }
}

module.exports = AnthropicProvider;


---
File: /services/ai/providers/DeepseekProvider.js
---

/**
 * Deepseek AI Provider
 * Handles communication with Deepseek's API
 */
const AIProvider = require('../AIProvider');
const axios = require('axios');

class DeepseekProvider extends AIProvider {
    constructor(config = {}) {
        super(config);
        this.apiKey = config.apiKey;
        this.model = config.model || 'deepseek-chat';
        this.endpoint = config.endpoint || 'https://api.deepseek.com/v1';
        this.timeout = config.timeout || 60000; // 1 minute default
        
        if (!this.apiKey) {
            throw new Error('Deepseek API key is required');
        }
    }

    /**
     * Generate a distillation using Deepseek
     * @param {string} text - The text to distill
     * @param {Object} options - Distillation options
     * @returns {Promise<string>} - The generated distillation
     */
    async generateSummary(text, options = {}) {
        try {
            const processedText = this.preprocessText(text);
            const prompt = this.createDistillationPrompt(processedText, options);

            console.log(`Sending request to Deepseek with ${processedText.length} characters`);
            console.log(`Using model: ${this.model}`);

            const requestData = {
                model: this.model,
                messages: [
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                max_tokens: options.max_tokens || 1000,
                temperature: options.temperature || 0.7,
                top_p: options.top_p || 1.0
            };

            const startTime = Date.now();
            console.log(`Deepseek request started at: ${new Date().toISOString()}`);

            const response = await axios.post(`${this.endpoint}/chat/completions`, requestData, {
                timeout: this.timeout,
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            const endTime = Date.now();
            const duration = (endTime - startTime) / 1000;

            if (response.data && response.data.choices && response.data.choices[0]) {
                const rawDistillation = response.data.choices[0].message.content.trim();
                console.log(`Deepseek response received in ${duration.toFixed(2)}s`);
                console.log(`Distillation length: ${rawDistillation.length} characters`);
                console.log(`Tokens used: ${response.data.usage?.total_tokens || 'unknown'}`);
                
                // Apply post-processing to fix numbering and other issues
                const processedDistillation = this.postProcessDistillation(rawDistillation);
                return processedDistillation;
            } else {
                throw new Error('Invalid response format from Deepseek');
            }

        } catch (error) {
            console.error('Error generating distillation with Deepseek:', error);
            
            if (error.response) {
                const status = error.response.status;
                const data = error.response.data;
                
                if (status === 401) {
                    throw new Error('Invalid Deepseek API key. Please check your API key.');
                } else if (status === 429) {
                    throw new Error('Deepseek API rate limit exceeded. Please wait before making more requests.');
                } else if (status === 400) {
                    throw new Error(`Deepseek API error: ${data.error?.message || 'Bad request'}`);
                } else {
                    throw new Error(`Deepseek API error (${status}): ${data.error?.message || error.message}`);
                }
            }

            throw new Error(`Deepseek error: ${error.message}`);
        }
    }

    /**
     * Validate Deepseek configuration
     * @returns {Promise<{valid: boolean, error?: string}>} - Validation result
     */
    async validateConfiguration() {
        try {
            // Basic API key format validation
            if (!this.apiKey || !this.apiKey.startsWith('sk-')) {
                return {
                    valid: false,
                    error: 'Invalid Deepseek API key format. API key should start with "sk-"'
                };
            }

            // Test API key with a simple request
            const response = await axios.post(`${this.endpoint}/chat/completions`, {
                model: this.model,
                messages: [
                    {
                        role: 'user',
                        content: 'Hello'
                    }
                ],
                max_tokens: 10
            }, {
                timeout: 10000,
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.data && response.data.choices) {
                return { valid: true };
            } else {
                return {
                    valid: false,
                    error: 'Invalid response from Deepseek API'
                };
            }

        } catch (error) {
            if (error.response) {
                const status = error.response.status;
                if (status === 401) {
                    return {
                        valid: false,
                        error: 'Invalid Deepseek API key'
                    };
                } else if (status === 429) {
                    return {
                        valid: false,
                        error: 'Deepseek API rate limit exceeded'
                    };
                }
            }

            return {
                valid: false,
                error: `Deepseek validation failed: ${error.message}`
            };
        }
    }

    /**
     * Get required configuration fields
     * @returns {Object} - Configuration schema
     */
    getRequiredConfig() {
        return {
            apiKey: {
                type: 'string',
                required: true,
                sensitive: true,
                description: 'Deepseek API key (starts with sk-)'
            },
            model: {
                type: 'string',
                required: false,
                default: 'deepseek-chat',
                description: 'Deepseek model to use'
            }
        };
    }

    /**
     * Get available models from Deepseek
     * @returns {Array<string>} - List of available model names
     */
    getAvailableModels() {
        return [
            'deepseek-chat',
            'deepseek-reasoner'
        ];
    }

    /**
     * Get display name for this provider
     * @returns {string} - Human-readable provider name
     */
    getDisplayName() {
        return 'Deepseek';
    }

    /**
     * Get maximum input length for Deepseek
     * @returns {number} - Maximum input length in characters
     */
    getMaxInputLength() {
        // Deepseek has a reasonable context window
        return 60000; // ~15k tokens, conservative estimate
    }



    /**
     * Test connection to Deepseek with a simple request
     * @returns {Promise<{success: boolean, error?: string, latency?: number}>} - Test result
     */
    async testConnection() {
        const startTime = Date.now();
        
        try {
            const response = await axios.post(`${this.endpoint}/chat/completions`, {
                model: this.model,
                messages: [
                    {
                        role: 'user',
                        content: 'Please respond with "Deepseek connection test successful" to confirm the connection.'
                    }
                ],
                max_tokens: 20
            }, {
                timeout: 30000,
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            const latency = Date.now() - startTime;

            if (response.data && response.data.choices && response.data.choices[0]) {
                return {
                    success: true,
                    latency: latency,
                    response: response.data.choices[0].message.content.trim(),
                    tokensUsed: response.data.usage?.total_tokens
                };
            } else {
                return {
                    success: false,
                    error: 'Invalid response format from Deepseek'
                };
            }

        } catch (error) {
            return {
                success: false,
                error: this.formatError(error),
                latency: Date.now() - startTime
            };
        }
    }
}

module.exports = DeepseekProvider;


---
File: /services/ai/providers/GoogleProvider.js
---

/**
 * Google Gemini AI Provider
 * Handles communication with Google's Gemini API using @google/genai
 */
const AIProvider = require('../AIProvider');

class GoogleProvider extends AIProvider {
    constructor(config = {}) {
        super(config);
        this.apiKey = config.apiKey;
        this.model = config.model || 'gemini-2.5-flash';
        this.timeout = config.timeout || 60000; // 1 minute default
        
        if (!this.apiKey) {
            throw new Error('Google API key is required');
        }

        // Initialize Google GenAI
        this.ai = null;
        this.initializeGenAI();
    }

    /**
     * Initialize Google GenAI SDK
     */
    initializeGenAI() {
        try {
            const { GoogleGenerativeAI } = require('@google/generative-ai');
            this.ai = new GoogleGenerativeAI(this.apiKey);
        } catch (error) {
            console.warn('Google GenAI library not found. Please install it with: npm install @google/generative-ai');
            this.ai = null;
        }
    }

    /**
     * Generate a distillation using Google Gemini with web search
     * @param {string} text - The text to distill
     * @param {Object} options - Distillation options
     * @returns {Promise<string>} - The generated distillation
     */
    async generateSummary(text, options = {}) {
        try {
            const processedText = this.preprocessText(text);
            const prompt = this.createDistillationPrompt(processedText, options);

            console.log(`Sending request to Google Gemini with ${processedText.length} characters`);
            console.log(`Using model: ${this.model} with web search enabled`);

            const startTime = Date.now();
            console.log(`Google Gemini request started at: ${new Date().toISOString()}`);

            if (this.ai) {
                // Use the Google GenAI SDK with web search
                const model = this.ai.getGenerativeModel({ 
                    model: this.model,
                    tools: [{
                        googleSearch: {}
                    }]
                });
                
                const result = await model.generateContent(prompt);
                const response = await result.response;

                const endTime = Date.now();
                const duration = (endTime - startTime) / 1000;

                if (response && response.text) {
                    const rawDistillation = response.text().trim();
                    console.log(`Google Gemini response received in ${duration.toFixed(2)}s`);
                    console.log(`Distillation length: ${rawDistillation.length} characters`);
                    console.log(`Web search was used to enhance the distillation`);
                    
                    // Apply post-processing to fix numbering and other issues
                    const processedDistillation = this.postProcessDistillation(rawDistillation);
                    return processedDistillation;
                } else {
                    throw new Error('Invalid response format from Google Gemini');
                }
            } else {
                // Fallback to REST API if SDK is not available
                return await this.generateSummaryWithRestAPI(prompt, options);
            }

        } catch (error) {
            console.error('Error generating distillation with Google Gemini:', error);
            
            if (error.message.includes('API key')) {
                throw new Error('Invalid Google API key. Please check your API key.');
            } else if (error.message.includes('rate limit') || error.message.includes('429')) {
                throw new Error('Google Gemini API rate limit exceeded. Please wait before making more requests.');
            } else if (error.message.includes('403')) {
                throw new Error('Google Gemini API access forbidden. Please check your API key permissions.');
            } else {
                throw new Error(`Google Gemini error: ${error.message}`);
            }
        }
    }

    /**
     * Fallback method using REST API with web search
     * @param {string} prompt - The prompt to send
     * @param {Object} options - Generation options
     * @returns {Promise<string>} - The generated distillation
     */
    async generateSummaryWithRestAPI(prompt, options = {}) {
        const axios = require('axios');
        
        const requestData = {
            contents: [
                {
                    parts: [
                        {
                            text: prompt
                        }
                    ]
                }
            ],
            tools: [
                {
                    googleSearch: {}
                }
            ],
            generationConfig: {
                temperature: options.temperature || 0.7,
                topP: options.top_p || 0.8,
                topK: options.top_k || 40,
                maxOutputTokens: options.max_tokens || 1000
            }
        };

        console.log(`Using REST API with web search for model: ${this.model}`);

        const response = await axios.post(
            `https://generativelanguage.googleapis.com/v1beta/models/${this.model}:generateContent?key=${this.apiKey}`,
            requestData,
            {
                timeout: this.timeout,
                headers: {
                    'Content-Type': 'application/json'
                }
            }
        );

        if (response.data && response.data.candidates && response.data.candidates[0]) {
            const candidate = response.data.candidates[0];
            
            if (candidate.content && candidate.content.parts && candidate.content.parts[0]) {
                const rawDistillation = candidate.content.parts[0].text.trim();
                console.log(`REST API web search response received`);
                
                // Apply post-processing to fix numbering and other issues
                const processedDistillation = this.postProcessDistillation(rawDistillation);
                return processedDistillation;
            } else {
                throw new Error('Invalid content structure in Gemini response');
            }
        } else {
            throw new Error('Invalid response format from Google Gemini');
        }
    }

    /**
     * Validate Google configuration
     * @returns {Promise<{valid: boolean, error?: string}>} - Validation result
     */
    async validateConfiguration() {
        try {
            // Basic API key format validation
            if (!this.apiKey || this.apiKey.length < 30) {
                return {
                    valid: false,
                    error: 'Invalid Google API key format'
                };
            }

            // Test API key with a simple request
            if (this.ai) {
                // Use SDK for testing
                const model = this.ai.getGenerativeModel({ model: this.model });
                const result = await model.generateContent('Hello');
                const response = await result.response;

                if (response && response.text) {
                    return { valid: true };
                } else {
                    return {
                        valid: false,
                        error: 'Invalid response from Google Gemini API'
                    };
                }
            } else {
                // Fallback to REST API testing
                const axios = require('axios');
                const response = await axios.post(
                    `https://generativelanguage.googleapis.com/v1beta/models/${this.model}:generateContent?key=${this.apiKey}`,
                    {
                        contents: [
                            {
                                parts: [
                                    {
                                        text: 'Hello'
                                    }
                                ]
                            }
                        ],
                        generationConfig: {
                            maxOutputTokens: 10
                        }
                    },
                    {
                        timeout: 10000,
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    }
                );

                if (response.data && response.data.candidates) {
                    return { valid: true };
                } else {
                    return {
                        valid: false,
                        error: 'Invalid response from Google Gemini API'
                    };
                }
            }

        } catch (error) {
            if (error.response) {
                const status = error.response.status;
                const data = error.response.data;
                
                if (status === 400) {
                    if (data.error?.message?.includes('API key')) {
                        return {
                            valid: false,
                            error: 'Invalid Google API key'
                        };
                    } else if (data.error?.message?.includes('model')) {
                        return {
                            valid: false,
                            error: `Model "${this.model}" is not available`
                        };
                    }
                } else if (status === 403) {
                    return {
                        valid: false,
                        error: 'Google API access forbidden. Please check your API key permissions.'
                    };
                } else if (status === 429) {
                    return {
                        valid: false,
                        error: 'Google API rate limit exceeded'
                    };
                }
            }

            return {
                valid: false,
                error: `Google validation failed: ${error.message}`
            };
        }
    }

    /**
     * Get required configuration fields
     * @returns {Object} - Configuration schema
     */
    getRequiredConfig() {
        return {
            apiKey: {
                type: 'string',
                required: true,
                sensitive: true,
                description: 'Google API key for Gemini'
            },
            model: {
                type: 'string',
                required: false,
                default: 'gemini-2.5-flash',
                description: 'Gemini model to use'
            }
        };
    }

    /**
     * Get available models from Google (only gemini-2.5-flash)
     * @returns {Array<string>} - List of available model names
     */
    getAvailableModels() {
        return [
            'gemini-2.5-pro',
            'gemini-2.5-flash',
            'gemini-2.5-flash-lite'
        ];
    }

    /**
     * Get display name for this provider
     * @returns {string} - Human-readable provider name
     */
    getDisplayName() {
        return 'Google Gemini';
    }

    /**
     * Get maximum input length for Google Gemini
     * @returns {number} - Maximum input length in characters
     */
    getMaxInputLength() {
        // Gemini 2.5 Flash has a large context window
        return 800000; // ~1M tokens
    }



    /**
     * Test connection to Google Gemini with a simple request
     * @returns {Promise<{success: boolean, error?: string, latency?: number}>} - Test result
     */
    async testConnection() {
        const startTime = Date.now();
        
        try {
            if (this.ai) {
                // Use SDK for testing (without web search for simple test)
                const model = this.ai.getGenerativeModel({ model: this.model });
                const result = await model.generateContent('Please respond with "Gemini connection test successful" to confirm the connection.');
                const response = await result.response;

                const latency = Date.now() - startTime;

                if (response && response.text) {
                    return {
                        success: true,
                        latency: latency,
                        response: response.text().trim()
                    };
                } else {
                    return {
                        success: false,
                        error: 'Invalid response format from Google Gemini'
                    };
                }
            } else {
                // Fallback to REST API testing
                const axios = require('axios');
                const response = await axios.post(
                    `https://generativelanguage.googleapis.com/v1beta/models/${this.model}:generateContent?key=${this.apiKey}`,
                    {
                        contents: [
                            {
                                parts: [
                                    {
                                        text: 'Please respond with "Gemini connection test successful" to confirm the connection.'
                                    }
                                ]
                            }
                        ],
                        generationConfig: {
                            maxOutputTokens: 20
                        }
                    },
                    {
                        timeout: 30000,
                        headers: {
                            'Content-Type': 'application/json'
                        }
                    }
                );

                const latency = Date.now() - startTime;

                if (response.data && response.data.candidates && response.data.candidates[0]) {
                    const candidate = response.data.candidates[0];
                    if (candidate.content && candidate.content.parts && candidate.content.parts[0]) {
                        return {
                            success: true,
                            latency: latency,
                            response: candidate.content.parts[0].text.trim()
                        };
                    }
                }

                return {
                    success: false,
                    error: 'Invalid response format from Google Gemini'
                };
            }

        } catch (error) {
            return {
                success: false,
                error: this.formatError(error),
                latency: Date.now() - startTime
            };
        }
    }
}

module.exports = GoogleProvider;


---
File: /services/ai/providers/GrokProvider.js
---

/**
 * Grok AI Provider
 * Handles communication with xAI's Grok API
 */
const AIProvider = require('../AIProvider');
const axios = require('axios');

class GrokProvider extends AIProvider {
    constructor(config = {}) {
        super(config);
        this.apiKey = config.apiKey;
        this.model = config.model || 'grok-3';
        this.endpoint = config.endpoint || 'https://api.x.ai/v1';
        this.timeout = config.timeout || 360000; // 6 minutes for reasoning models
        
        if (!this.apiKey) {
            throw new Error('Grok API key is required');
        }
    }

    /**
     * Generate a distillation using Grok
     * @param {string} text - The text to distill
     * @param {Object} options - Distillation options
     * @returns {Promise<string>} - The generated distillation
     */
    async generateSummary(text, options = {}) {
        try {
            const processedText = this.preprocessText(text);
            const prompt = this.createDistillationPrompt(processedText, options);

            console.log(`Sending request to Grok with ${processedText.length} characters`);
            console.log(`Using model: ${this.model}`);

            const requestData = {
                model: this.model,
                messages: [
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                max_tokens: options.max_tokens || 1000,
                temperature: options.temperature || 0.7,
                top_p: options.top_p || 1.0
            };

            const startTime = Date.now();
            console.log(`Grok request started at: ${new Date().toISOString()}`);

            const response = await axios.post(`${this.endpoint}/chat/completions`, requestData, {
                timeout: this.timeout,
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            const endTime = Date.now();
            const duration = (endTime - startTime) / 1000;

            if (response.data && response.data.choices && response.data.choices[0]) {
                const rawDistillation = response.data.choices[0].message.content.trim();
                console.log(`Grok response received in ${duration.toFixed(2)}s`);
                console.log(`Distillation length: ${rawDistillation.length} characters`);
                console.log(`Tokens used: ${response.data.usage?.total_tokens || 'unknown'}`);
                
                // Apply post-processing to fix numbering and other issues
                const processedDistillation = this.postProcessDistillation(rawDistillation);
                return processedDistillation;
            } else {
                throw new Error('Invalid response format from Grok');
            }

        } catch (error) {
            console.error('Error generating distillation with Grok:', error);
            
            if (error.response) {
                const status = error.response.status;
                const data = error.response.data;
                
                if (status === 401) {
                    throw new Error('Invalid Grok API key. Please check your API key.');
                } else if (status === 429) {
                    throw new Error('Grok API rate limit exceeded. Please wait before making more requests.');
                } else if (status === 400) {
                    throw new Error(`Grok API error: ${data.error?.message || 'Bad request'}`);
                } else {
                    throw new Error(`Grok API error (${status}): ${data.error?.message || error.message}`);
                }
            }

            throw new Error(`Grok error: ${error.message}`);
        }
    }

    /**
     * Validate Grok configuration
     * @returns {Promise<{valid: boolean, error?: string}>} - Validation result
     */
    async validateConfiguration() {
        try {
            // Basic API key format validation
            if (!this.apiKey || !this.apiKey.startsWith('xai-')) {
                return {
                    valid: false,
                    error: 'Invalid Grok API key format. API key should start with "xai-"'
                };
            }

            // Test API key with a simple request
            const response = await axios.post(`${this.endpoint}/chat/completions`, {
                model: this.model,
                messages: [
                    {
                        role: 'user',
                        content: 'Hello'
                    }
                ],
                max_tokens: 10
            }, {
                timeout: 10000,
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            if (response.data && response.data.choices) {
                return { valid: true };
            } else {
                return {
                    valid: false,
                    error: 'Invalid response from Grok API'
                };
            }

        } catch (error) {
            if (error.response) {
                const status = error.response.status;
                if (status === 401) {
                    return {
                        valid: false,
                        error: 'Invalid Grok API key'
                    };
                } else if (status === 429) {
                    return {
                        valid: false,
                        error: 'Grok API rate limit exceeded'
                    };
                }
            }

            return {
                valid: false,
                error: `Grok validation failed: ${error.message}`
            };
        }
    }

    /**
     * Get required configuration fields
     * @returns {Object} - Configuration schema
     */
    getRequiredConfig() {
        return {
            apiKey: {
                type: 'string',
                required: true,
                sensitive: true,
                description: 'Grok API key (starts with xai-)'
            },
            model: {
                type: 'string',
                required: false,
                default: 'grok-3',
                description: 'Grok model to use'
            }
        };
    }

    /**
     * Get available models from Grok
     * @returns {Array<string>} - List of available model names
     */
    getAvailableModels() {
        return [
            'grok-4-0709',
            'grok-3',
            'grok-3-mini',
            'grok-3-fast'
        ];
    }

    /**
     * Get display name for this provider
     * @returns {string} - Human-readable provider name
     */
    getDisplayName() {
        return 'Grok';
    }

    /**
     * Get maximum input length for Grok
     * @returns {number} - Maximum input length in characters
     */
    getMaxInputLength() {
        // Grok has a large context window
        return 100000; // ~25k tokens, conservative estimate
    }



    /**
     * Test connection to Grok with a simple request
     * @returns {Promise<{success: boolean, error?: string, latency?: number}>} - Test result
     */
    async testConnection() {
        const startTime = Date.now();
        
        try {
            const response = await axios.post(`${this.endpoint}/chat/completions`, {
                model: this.model,
                messages: [
                    {
                        role: 'user',
                        content: 'Please respond with "Grok connection test successful" to confirm the connection.'
                    }
                ],
                max_tokens: 20
            }, {
                timeout: 30000,
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            const latency = Date.now() - startTime;

            if (response.data && response.data.choices && response.data.choices[0]) {
                return {
                    success: true,
                    latency: latency,
                    response: response.data.choices[0].message.content.trim(),
                    tokensUsed: response.data.usage?.total_tokens
                };
            } else {
                return {
                    success: false,
                    error: 'Invalid response format from Grok'
                };
            }

        } catch (error) {
            return {
                success: false,
                error: this.formatError(error),
                latency: Date.now() - startTime
            };
        }
    }
}

module.exports = GrokProvider;


---
File: /services/ai/providers/OllamaProvider.js
---

/**
 * Ollama AI Provider
 * Handles communication with local Ollama installation
 */
const AIProvider = require('../AIProvider');
const axios = require('axios');

class OllamaProvider extends AIProvider {
    constructor(config = {}) {
        super(config);
        this.model = config.model;
        this.endpoint = config.endpoint || 'http://localhost:11434';
        this.timeout = config.timeout || 300000; // 5 minutes default
    }

    /**
     * Generate a distillation using Ollama
     * @param {string} text - The text to distill
     * @param {Object} options - Distillation options
     * @returns {Promise<string>} - The generated distillation
     */
    async generateSummary(text, options = {}) {
        try {
            const processedText = this.preprocessText(text);
            const prompt = this.createDistillationPrompt(processedText, options);

            console.log(`Sending request to Ollama with ${processedText.length} characters`);
            console.log(`Using model: ${this.model}`);
            console.log(`Text preview: ${processedText.substring(0, 100)}...`);

            const requestData = {
                model: this.model,
                prompt: prompt,
                stream: false,
                options: {
                    temperature: options.temperature || 0.7,
                    top_p: options.top_p || 0.9,
                    max_tokens: options.max_tokens || 1000
                }
            };

            const startTime = Date.now();
            console.log(`Ollama request started at: ${new Date().toISOString()}`);

            const response = await axios.post(`${this.endpoint}/api/generate`, requestData, {
                timeout: this.timeout,
                headers: {
                    'Content-Type': 'application/json'
                }
            });

            const endTime = Date.now();
            const duration = (endTime - startTime) / 1000;

            if (response.data && response.data.response) {
                const rawDistillation = response.data.response.trim();
                console.log(`Ollama response received in ${duration.toFixed(2)}s`);
                console.log(`Distillation length: ${rawDistillation.length} characters`);
                
                // Apply post-processing to fix numbering and other issues
                const processedDistillation = this.postProcessDistillation(rawDistillation);
                return processedDistillation;
            } else {
                throw new Error('Invalid response format from Ollama');
            }

        } catch (error) {
            console.error('Error generating distillation with Ollama:', error);

            if (error.code === 'ECONNREFUSED') {
                throw new Error('Cannot connect to Ollama. Please ensure Ollama is running on ' + this.endpoint);
            }

            if (error.code === 'ETIMEDOUT') {
                throw new Error('Ollama request timed out. The text might be too long or the model is slow.');
            }

            throw new Error(`Ollama error: ${error.message}`);
        }
    }

    /**
     * Validate Ollama configuration
     * @returns {Promise<{valid: boolean, error?: string}>} - Validation result
     */
    async validateConfiguration() {
        try {
            // Check if Ollama is running
            const response = await axios.get(`${this.endpoint}/api/tags`, {
                timeout: 5000
            });

            if (!response.data || !response.data.models) {
                return {
                    valid: false,
                    error: 'Invalid response from Ollama server'
                };
            }

            // Check if model is specified
            if (!this.model) {
                return {
                    valid: false,
                    error: 'No model specified. Please select a model from the available options.'
                };
            }

            // Check if the specified model is available
            const availableModels = response.data.models.map(model => model.name);
            console.log(`Available Ollama models: ${availableModels.join(', ')}`);
            console.log(`Looking for model: "${this.model}"`);

            // Check for exact match or partial match (handles different suffixes)
            let matchedModel = null;
            const modelExists = availableModels.some(model => {
                console.log(`Comparing "${this.model}" with "${model}"`);

                // Exact match
                if (model === this.model) {
                    console.log(`✅ Exact match found: ${model}`);
                    matchedModel = model;
                    return true;
                }

                // Check if model matches without suffix (handles :latest, :instruct, etc.)
                const modelBase = model.split(':')[0];
                const requestedBase = this.model.split(':')[0];
                console.log(`Comparing bases: "${requestedBase}" with "${modelBase}"`);
                if (modelBase === requestedBase) {
                    console.log(`✅ Base match found: ${modelBase} -> using ${model}`);
                    matchedModel = model;
                    return true;
                }

                // Check if requested model matches with :latest added
                if (model === `${this.model}:latest`) {
                    console.log(`✅ Match with :latest suffix: ${model}`);
                    matchedModel = model;
                    return true;
                }

                return false;
            });

            if (modelExists && matchedModel) {
                // Update the model name to the exact match found in Ollama
                console.log(`🔄 Updating model name from "${this.model}" to "${matchedModel}"`);
                this.model = matchedModel;
            }

            if (!modelExists) {
                // Provide helpful suggestions for common mistakes
                const suggestions = [];
                const requestedBase = this.model.split(':')[0];

                availableModels.forEach(model => {
                    const modelBase = model.split(':')[0];
                    if (modelBase.includes(requestedBase) || requestedBase.includes(modelBase)) {
                        suggestions.push(model);
                    }
                });

                let errorMsg = `Model "${this.model}" is not available.\n\nAvailable models: ${availableModels.join(', ')}`;

                if (suggestions.length > 0) {
                    errorMsg += `\n\nDid you mean: ${suggestions.join(', ')}?`;
                }

                return {
                    valid: false,
                    error: errorMsg
                };
            }

            console.log(`✅ Model "${this.model}" found in Ollama`);

            return { valid: true };

        } catch (error) {
            if (error.code === 'ECONNREFUSED') {
                return {
                    valid: false,
                    error: 'Cannot connect to Ollama. Please ensure Ollama is running.'
                };
            }

            return {
                valid: false,
                error: `Ollama validation failed: ${error.message}`
            };
        }
    }

    /**
     * Get required configuration fields
     * @returns {Object} - Configuration schema
     */
    getRequiredConfig() {
        return {
            model: {
                type: 'string',
                required: true,
                placeholder: 'Enter model name (e.g., llama3, phi4-mini)',
                description: 'Ollama model name'
            },
            endpoint: {
                type: 'string',
                required: false,
                default: 'http://localhost:11434',
                description: 'Ollama server endpoint'
            }
        };
    }

    /**
     * Get available models from Ollama
     * @returns {Promise<Array<string>>} - List of available model names
     */
    async getAvailableModels() {
        try {
            const response = await axios.get(`${this.endpoint}/api/tags`, {
                timeout: 5000
            });

            if (response.data && response.data.models) {
                return response.data.models.map(model => model.name);
            }

            return [];
        } catch (error) {
            console.warn('Could not fetch available Ollama models:', error.message);
            return []; // Return empty array - no fallback models
        }
    }

    /**
     * Get display name for this provider
     * @returns {string} - Human-readable provider name
     */
    getDisplayName() {
        return 'Ollama (Local)';
    }

    /**
     * Get maximum input length for Ollama
     * @returns {number} - Maximum input length in characters
     */
    getMaxInputLength() {
        // Ollama can handle longer texts, but we'll be conservative
        return 50000; // 50k characters
    }



    /**
     * Test connection to Ollama with a simple request
     * @returns {Promise<{success: boolean, error?: string, latency?: number}>} - Test result
     */
    async testConnection() {
        const startTime = Date.now();

        try {
            // First check if Ollama is running
            const validation = await this.validateConfiguration();
            if (!validation.valid) {
                return {
                    success: false,
                    error: validation.error
                };
            }

            // Test with a simple generation request
            const testPrompt = "Please respond with 'Hello, Ollama is working!' to confirm the connection.";
            const response = await axios.post(`${this.endpoint}/api/generate`, {
                model: this.model,
                prompt: testPrompt,
                stream: false,
                options: {
                    max_tokens: 50
                }
            }, {
                timeout: 30000 // 30 second timeout for test
            });

            const latency = Date.now() - startTime;

            if (response.data && response.data.response) {
                return {
                    success: true,
                    latency: latency,
                    response: response.data.response.trim()
                };
            } else {
                return {
                    success: false,
                    error: 'Invalid response format from Ollama'
                };
            }

        } catch (error) {
            return {
                success: false,
                error: this.formatError(error),
                latency: Date.now() - startTime
            };
        }
    }
}

module.exports = OllamaProvider;


---
File: /services/ai/providers/OpenAIProvider.js
---

/**
 * OpenAI AI Provider
 * Handles communication with OpenAI's API
 */
const AIProvider = require('../AIProvider');
const axios = require('axios');

class OpenAIProvider extends AIProvider {
    constructor(config = {}) {
        super(config);
        this.apiKey = config.apiKey;
        this.model = config.model || 'gpt-4o';
        this.endpoint = config.endpoint || 'https://api.openai.com/v1';
        this.timeout = config.timeout || 60000; // 1 minute default
        
        if (!this.apiKey) {
            throw new Error('OpenAI API key is required');
        }
    }

    /**
     * Generate a distillation using OpenAI
     * @param {string} text - The text to distill
     * @param {Object} options - Distillation options
     * @returns {Promise<string>} - The generated distillation
     */
    async generateSummary(text, options = {}) {
        try {
            const processedText = this.preprocessText(text);
            const prompt = this.createDistillationPrompt(processedText, options);

            console.log(`Sending request to OpenAI with ${processedText.length} characters`);
            console.log(`Using model: ${this.model}`);

            const requestData = {
                model: this.model,
                messages: [
                    {
                        role: 'user',
                        content: prompt
                    }
                ],
                max_tokens: options.max_tokens || 1000,
                temperature: options.temperature || 0.7,
                top_p: options.top_p || 1.0
            };

            const startTime = Date.now();
            console.log(`OpenAI request started at: ${new Date().toISOString()}`);

            const response = await axios.post(`${this.endpoint}/chat/completions`, requestData, {
                timeout: this.timeout,
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            const endTime = Date.now();
            const duration = (endTime - startTime) / 1000;

            if (response.data && response.data.choices && response.data.choices[0]) {
                const rawDistillation = response.data.choices[0].message.content.trim();
                console.log(`OpenAI response received in ${duration.toFixed(2)}s`);
                console.log(`Distillation length: ${rawDistillation.length} characters`);
                console.log(`Tokens used: ${response.data.usage?.total_tokens || 'unknown'}`);
                
                // Apply post-processing to fix numbering and other issues
                const processedDistillation = this.postProcessDistillation(rawDistillation);
                return processedDistillation;
            } else {
                throw new Error('Invalid response format from OpenAI');
            }

        } catch (error) {
            console.error('Error generating distillation with OpenAI:', error);
            
            if (error.response) {
                const status = error.response.status;
                const data = error.response.data;
                
                if (status === 401) {
                    throw new Error('Invalid OpenAI API key. Please check your API key.');
                } else if (status === 429) {
                    throw new Error('OpenAI API rate limit exceeded. Please wait before making more requests.');
                } else if (status === 400) {
                    throw new Error(`OpenAI API error: ${data.error?.message || 'Bad request'}`);
                } else {
                    throw new Error(`OpenAI API error (${status}): ${data.error?.message || error.message}`);
                }
            }

            throw new Error(`OpenAI error: ${error.message}`);
        }
    }

    /**
     * Validate OpenAI configuration
     * @returns {Promise<{valid: boolean, error?: string}>} - Validation result
     */
    async validateConfiguration() {
        try {
            // Basic API key format validation
            if (!this.apiKey || !this.apiKey.startsWith('sk-')) {
                return {
                    valid: false,
                    error: 'Invalid OpenAI API key format. API key should start with "sk-"'
                };
            }

            // Test API key with a simple request
            const response = await axios.get(`${this.endpoint}/models`, {
                timeout: 10000,
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`
                }
            });

            if (response.data && response.data.data) {
                // Check if the specified model is available
                const availableModels = response.data.data.map(model => model.id);
                if (!availableModels.includes(this.model)) {
                    return {
                        valid: false,
                        error: `Model "${this.model}" is not available. Available models: ${availableModels.slice(0, 5).join(', ')}...`
                    };
                }

                return { valid: true };
            } else {
                return {
                    valid: false,
                    error: 'Invalid response from OpenAI API'
                };
            }

        } catch (error) {
            if (error.response) {
                const status = error.response.status;
                if (status === 401) {
                    return {
                        valid: false,
                        error: 'Invalid OpenAI API key'
                    };
                } else if (status === 429) {
                    return {
                        valid: false,
                        error: 'OpenAI API rate limit exceeded'
                    };
                }
            }

            return {
                valid: false,
                error: `OpenAI validation failed: ${error.message}`
            };
        }
    }

    /**
     * Get required configuration fields
     * @returns {Object} - Configuration schema
     */
    getRequiredConfig() {
        return {
            apiKey: {
                type: 'string',
                required: true,
                sensitive: true,
                description: 'OpenAI API key (starts with sk-)'
            },
            model: {
                type: 'string',
                required: false,
                default: 'gpt-4o',
                description: 'OpenAI model to use'
            }
        };
    }

    /**
     * Get available models from OpenAI
     * @returns {Array<string>} - List of available model names
     */
    getAvailableModels() {
        return [
            'o3-mini',
            'o4-mini',
            'gpt-4o',
            'gpt-4.1'
        ];
    }

    /**
     * Get display name for this provider
     * @returns {string} - Human-readable provider name
     */
    getDisplayName() {
        return 'OpenAI';
    }

    /**
     * Get maximum input length for OpenAI
     * @returns {number} - Maximum input length in characters
     */
    getMaxInputLength() {
        // GPT-3.5-turbo: ~4k tokens, GPT-4: ~8k tokens
        // Rough estimate: 1 token ≈ 4 characters
        if (this.model.includes('gpt-4')) {
            return 25000; // ~6k tokens for input, leaving room for output
        }
        return 12000; // ~3k tokens for input, leaving room for output
    }


    /**
     * Test connection to OpenAI with a simple request
     * @returns {Promise<{success: boolean, error?: string, latency?: number}>} - Test result
     */
    async testConnection() {
        const startTime = Date.now();
        
        try {
            // Test with a simple chat completion
            const response = await axios.post(`${this.endpoint}/chat/completions`, {
                model: this.model,
                messages: [
                    {
                        role: 'user',
                        content: 'Please respond with "OpenAI connection test successful" to confirm the connection.'
                    }
                ],
                max_tokens: 20
            }, {
                timeout: 30000,
                headers: {
                    'Authorization': `Bearer ${this.apiKey}`,
                    'Content-Type': 'application/json'
                }
            });

            const latency = Date.now() - startTime;

            if (response.data && response.data.choices && response.data.choices[0]) {
                return {
                    success: true,
                    latency: latency,
                    response: response.data.choices[0].message.content.trim(),
                    tokensUsed: response.data.usage?.total_tokens
                };
            } else {
                return {
                    success: false,
                    error: 'Invalid response format from OpenAI'
                };
            }

        } catch (error) {
            return {
                success: false,
                error: this.formatError(error),
                latency: Date.now() - startTime
            };
        }
    }
}

module.exports = OpenAIProvider;


---
File: /services/ai/AIProvider.js
---

/**
 * Abstract base class for AI providers
 * Defines the common interface that all AI providers must implement
 */
const NumberingProcessor = require('./NumberingProcessor');

class AIProvider {
    constructor(config = {}) {
        this.config = config;
        this.name = this.constructor.name;
    }

    /**
     * Generate a distilled analysis from the given text
     * @param {string} text - The text to distill
     * @param {Object} options - Additional options for distillation
     * @returns {Promise<string>} - The generated distillation
     */
    async generateSummary(text, options = {}) {
        // This method should be overridden by subclasses to call the AI provider
        // and then call this.postProcessDistillation() on the result
        throw new Error(`generateSummary must be implemented by ${this.name}`);
    }

    /**
     * Post-process the AI-generated distillation to fix common issues - BULLETPROOF VERSION
     * @param {string} rawDistillation - The raw distillation from the AI provider
     * @returns {string} - The processed distillation with perfect numbering format
     */
    postProcessDistillation(rawDistillation) {
        if (!rawDistillation || typeof rawDistillation !== 'string') {
            return rawDistillation;
        }

        try {
            console.log(`[${this.name}] Starting bulletproof numbering processing...`);

            // Step 1: Apply the bulletproof numbering processor
            let processedDistillation = NumberingProcessor.fixNumbering(rawDistillation);

            // Step 2: Validate the result
            const isProperlyFormatted = NumberingProcessor.isProperlyFormatted(processedDistillation);

            if (!isProperlyFormatted) {
                console.warn(`[${this.name}] First pass failed, applying force format...`);
                // Nuclear option: force perfect format
                processedDistillation = NumberingProcessor.forceFormat(rawDistillation);
            }

            // Step 3: Final validation
            const finalValidation = NumberingProcessor.isProperlyFormatted(processedDistillation);

            if (!finalValidation) {
                console.error(`[${this.name}] CRITICAL: Numbering processor failed completely, using emergency format`);
                // Absolute last resort
                processedDistillation = `1. ${rawDistillation.trim()}`;
            }

            // Step 4: Log the results
            const originalStats = NumberingProcessor.getNumberingStats(rawDistillation);
            const finalStats = NumberingProcessor.getNumberingStats(processedDistillation);

            if (processedDistillation !== rawDistillation) {
                console.log(`[${this.name}] Numbering processing completed:`, {
                    originalHadNumbering: originalStats.hasNumbering,
                    originalPoints: originalStats.totalPoints,
                    originalSequential: originalStats.isSequential,
                    finalPoints: finalStats.totalPoints,
                    finalSequential: finalStats.isSequential,
                    processingSuccess: finalValidation
                });
            }

            return processedDistillation;

        } catch (error) {
            console.error(`[${this.name}] CRITICAL ERROR in numbering processor:`, error.message);
            // Emergency fallback
            return `1. ${rawDistillation.trim()}`;
        }
    }

    /**
     * Validate the provider configuration
     * @returns {Promise<{valid: boolean, error?: string}>} - Validation result
     */
    async validateConfiguration() {
        throw new Error(`validateConfiguration must be implemented by ${this.name}`);
    }

    /**
     * Get the required configuration fields for this provider
     * @returns {Object} - Configuration schema
     */
    getRequiredConfig() {
        throw new Error(`getRequiredConfig must be implemented by ${this.name}`);
    }

    /**
     * Get the display name for this provider
     * @returns {string} - Human-readable provider name
     */
    getDisplayName() {
        return this.name.replace('Provider', '');
    }

    /**
     * Get available models for this provider
     * @returns {Array<string>} - List of available model names
     */
    getAvailableModels() {
        return [];
    }

    /**
     * Test the connection to the AI provider
     * @returns {Promise<{success: boolean, error?: string, latency?: number}>} - Connection test result
     */
    async testConnection() {
        const startTime = Date.now();
        try {
            const validation = await this.validateConfiguration();
            if (!validation.valid) {
                return {
                    success: false,
                    error: validation.error
                };
            }

            // Test with a simple prompt
            const testText = "This is a test message to verify the AI provider connection.";
            await this.generateSummary(testText, { maxLength: 50 });

            const latency = Date.now() - startTime;
            return {
                success: true,
                latency: latency
            };
        } catch (error) {
            return {
                success: false,
                error: error.message,
                latency: Date.now() - startTime
            };
        }
    }

    /**
     * Format error messages in a user-friendly way
     * @param {Error} error - The error to format
     * @returns {string} - Formatted error message
     */
    formatError(error) {
        if (error.message.includes('API key')) {
            return 'Invalid or missing API key. Please check your configuration.';
        }
        if (error.message.includes('rate limit')) {
            return 'API rate limit exceeded. Please wait before making more requests.';
        }
        if (error.message.includes('network') || error.message.includes('timeout')) {
            return 'Network connection failed. Please check your internet connection.';
        }
        return error.message || 'An unexpected error occurred.';
    }

    /**
     * Prepare the text for distillation (common preprocessing)
     * @param {string} text - The input text
     * @returns {string} - Preprocessed text
     */
    preprocessText(text) {
        if (!text || typeof text !== 'string') {
            throw new Error('Invalid input text provided');
        }

        // Basic text cleaning
        let cleaned = text
            .replace(/\s+/g, ' ')           // Replace multiple spaces with single space
            .replace(/\n+/g, '\n')          // Replace multiple newlines with single newline
            .trim();                        // Remove leading/trailing whitespace

        // Truncate if too long (most APIs have limits)
        const maxLength = this.getMaxInputLength();
        if (cleaned.length > maxLength) {
            console.warn(`Text truncated from ${cleaned.length} to ${maxLength} characters`);
            cleaned = cleaned.substring(0, maxLength) + '...';
        }

        return cleaned;
    }

    /**
     * Get the maximum input length supported by this provider
     * @returns {number} - Maximum input length in characters
     */
    getMaxInputLength() {
        return 100000; // Default 100k characters, override in specific providers
    }

    /**
     * Create a standardized prompt for distillation
     * @param {string} text - The text to distill
     * @param {Object} options - Distillation options
     * @returns {string} - The formatted prompt
     */
    createDistillationPrompt(text, options = {}) {
        return this.formatPrompt(text);
    }



    /**
     * Format the prompt for knowledge distillation
     * @param {string} text - The text to analyze
     * @returns {string} - The formatted prompt
     */
    formatPrompt(text) {
        return `SYSTEM DIRECTIVE: MUST FOLLOW ALL RULES EXACTLY, DEVIATION IS STRICTLY NOT PERMITTED


1. ROLE & GOAL (YOUR PURPOSE AND IDENTITY)
You are a world-class research assistant and knowledge distiller
Your paramount purpose is to produce high-quality, profoundly insightful content and teach core principles with unparalleled clarity and depth
Your mission is to fully detail a topic, distill core knowledge, eliminate all fluff, and enrich text with profound research and insights


2. CORE PROCESS (IMPORTANT AND CRUCIAL)
When I provide a text to analyze, your task is to perform three critical steps:

1. Knowledge Distillation (Deep Dive & Enrichment)
Action: Meticulously distill essential knowledge from the provided text
Goal: Go beyond summarizing. Identify core concepts, underlying principles, and critical information
Process:
- Eliminate all superficiality and extraneous details
- Enrich by deconstructing complex ideas into simplest components
- Ensure concepts are fully understood, deeply explained, and truly memorable
- Prepare knowledge for comprehensive elaboration

2. Expert Research (Comprehensive Gap Analysis & Augmentation)
Action: Critically assess distilled knowledge for gaps, ambiguities, or areas needing more depth
Goal: Identify and fill all knowledge gaps, ambiguities, and areas needing deeper context to ensure a complete and authoritative understanding
Process:
- Conduct a comprehensive, authoritative research process.
- Use diverse, top-tier sources: peer-reviewed scientific journals, reputable academic publications, established news organizations, expert analyses
- Synthesize most crucial, accurate, and up-to-date information
- Augment and validate distilled knowledge for a complete, authoritative understanding

3. Synthesis & Cohesion (Unified, Exhaustive Explanation)
Action: Integrate all information (distillation + research) into one unified, cohesive, exhaustive speech
Goal: Seamlessly weave together validated knowledge, presenting a holistic and deeply integrated understanding of the topic
Process:
- Seamlessly weave together all validated knowledge
- Present a holistic and deeply integrated understanding of the topic


3. CRUCIAL OUTPUT STYLE & TONE (NON-NEGOTIABLE AND BULLETPROOF)
Tone: Direct, profoundly insightful, strictly neutral
Precision: Be exceptionally precise, confident, and authoritative
Uncertainty: Admit only if data is genuinely inconclusive or definitive sources are demonstrably unavailable
Language: Absolutely avoid jargon, technical buzzwords, or colloquialisms
Explanation: Explain all concepts with clarity and depth for a highly intelligent, curious learner to achieve profound and lasting understanding
Primary Goal: Absolute, deep comprehension


4. MANDATORY OUTPUT FORMAT (ABSOLUTE RULE: FOLLOW THIS STRUCTURE 100% OF THE TIME)

START IMMEDIATELY: Begin your entire response directly with the first point of the numbered list
NO CONVERSATIONAL INTROS: Absolutely NO conversational introductions, preambles, or any text outside this strict format: deviations are UNACCEPTABLE
STRUCTURE: Present your response as an incremental numbered list

EACH POINT'S STRUCTURE: Every point MUST follow this precise structure, presenting your entire response organizing the main body of your response as an incremental numbered list:
1. Core idea sentence
Start with a single, memorable sentence that captures one complete, fundamental idea from your research. This sentence should be comprehensive and stand on its own as a key takeaway
Following that sentence, write one or two detailed paragraphs to elaborate on this core idea. Deconstruct the concept, explain its nuances and implications, and provide necessary context to eliminate any knowledge gaps. Use analogies or simple examples where they can aid understanding. The purpose of this section is to cement the idea, explaining not just what it is, but why it matters and how it works based on your research

2. Next core idea sentence
This follows the same pattern as the first point: a single, impactful sentence summarizing the next fundamental concept
Follow up with one or two paragraphs of in-depth explanation, connecting this idea to previous points if it helps build a more cohesive mental model for the reader


COVERAGE: Continue this rigorous pattern for as many points as are absolutely necessary to cover ALL essential knowledge on the topic with the required depth and detail. No point should be left unexplored or superficial.


CRITICAL FORMATTING REQUIREMENTS (NON-NEGOTIABLE):
- Format: "1. Main sentence here\nElaboration here\n\n2. Next main sentence here\nElaboration here"
- Start with "1." (period and space, nothing else)
- Continue sequentially: 1., 2., 3., 4., etc.
- NEVER use: 1), (1), 1:, 1-, or any other format
- NEVER repeat numbers (no multiple "1." entries)
- NEVER skip numbers in sequence
- Main sentence comes IMMEDIATELY after "1. " on the same line
- Elaboration starts on the next line
- Double line break between numbered points


EXAMPLE OF PERFECT FORMAT:
1. VMware's licensing changes are driving enterprise migration decisions

Following Broadcom's acquisition, VMware shifted from perpetual licenses to subscription models. This fundamental change in pricing structure has prompted many organizations to evaluate alternatives, as the new model significantly increases long-term costs for existing deployments.


2. Container orchestration platforms offer compelling migration paths

Kubernetes and similar technologies provide infrastructure abstraction that reduces vendor lock-in. Organizations can maintain application portability while gaining access to cloud-native features that weren't available in traditional virtualization platforms.



Here is the text to distill:

${text}`;
    }
}

module.exports = AIProvider;


---
File: /services/ai/AIProviderFactory.js
---

/**
 * Factory class for creating AI provider instances
 * Handles the instantiation of different AI providers based on configuration
 */
const OllamaProvider = require('./providers/OllamaProvider');
const OpenAIProvider = require('./providers/OpenAIProvider');
const AnthropicProvider = require('./providers/AnthropicProvider');
const GoogleProvider = require('./providers/GoogleProvider');

const GrokProvider = require('./providers/GrokProvider');
const DeepseekProvider = require('./providers/DeepseekProvider');

class AIProviderFactory {
    /**
     * Create an AI provider instance based on configuration
     * @param {Object} config - Provider configuration
     * @param {string} config.type - Provider type (ollama, openai, anthropic, etc.)
     * @param {string} config.apiKey - API key for cloud providers
     * @param {string} config.model - Model name to use
     * @param {string} config.endpoint - Custom endpoint (optional)
     * @returns {AIProvider} - Configured AI provider instance
     */
    static createProvider(config) {
        if (!config || !config.type) {
            throw new Error('Provider configuration is required');
        }

        const { type, apiKey, model, endpoint, ...otherOptions } = config;

        switch (type.toLowerCase()) {
            case 'ollama':
                return new OllamaProvider({
                    model: model,
                    endpoint: endpoint || 'http://localhost:11434',
                    ...otherOptions
                });

            case 'openai':
                if (!apiKey) {
                    throw new Error('API key is required for OpenAI provider');
                }
                return new OpenAIProvider({
                    apiKey,
                    model: model || 'gpt-4o',
                    endpoint: endpoint || 'https://api.openai.com/v1',
                    ...otherOptions
                });

            case 'anthropic':
                if (!apiKey) {
                    throw new Error('API key is required for Anthropic provider');
                }
                return new AnthropicProvider({
                    apiKey,
                    model: model || 'claude-3-5-haiku-latest',
                    endpoint: endpoint || 'https://api.anthropic.com/v1',
                    ...otherOptions
                });

            case 'google':
                if (!apiKey) {
                    throw new Error('API key is required for Google provider');
                }
                return new GoogleProvider({
                    apiKey,
                    model: model || 'gemini-2.5-flash',
                    ...otherOptions
                });

            case 'grok':
                if (!apiKey) {
                    throw new Error('API key is required for Grok provider');
                }
                return new GrokProvider({
                    apiKey,
                    model: model || 'grok-3',
                    endpoint: endpoint || 'https://api.x.ai/v1',
                    ...otherOptions
                });

            case 'deepseek':
                if (!apiKey) {
                    throw new Error('API key is required for Deepseek provider');
                }
                return new DeepseekProvider({
                    apiKey,
                    model: model || 'deepseek-chat',
                    endpoint: endpoint || 'https://api.deepseek.com/v1',
                    ...otherOptions
                });

            default:
                throw new Error(`Unknown provider type: ${type}`);
        }
    }

    /**
     * Get a list of all supported provider types
     * @returns {Array<Object>} - List of provider information
     */
    static getSupportedProviders() {
        return [
            {
                type: 'ollama',
                name: 'Ollama (Local)',
                category: 'offline',
                requiresApiKey: false,
                defaultModel: null,
                models: []
            },
            {
                type: 'openai',
                name: 'OpenAI',
                category: 'online',
                requiresApiKey: true,
                defaultModel: 'gpt-4o',
                models: ['o3-mini', 'o4-mini', 'gpt-4o', 'gpt-4.1']
            },
            {
                type: 'anthropic',
                name: 'Anthropic Claude',
                category: 'online',
                requiresApiKey: true,
                defaultModel: 'claude-3-5-haiku-latest',
                models: ['claude-opus-4-20250514', 'claude-sonnet-4-20250514', 'claude-3-7-sonnet-latest', 'claude-3-5-haiku-latest']
            },
            {
                type: 'google',
                name: 'Google Gemini',
                category: 'online',
                requiresApiKey: true,
                defaultModel: 'gemini-2.5-flash',
                models: ['gemini-2.5-pro', 'gemini-2.5-flash', 'gemini-2.5-flash-lite']
            },
            {
                type: 'grok',
                name: 'Grok',
                category: 'online',
                requiresApiKey: true,
                defaultModel: 'grok-3',
                models: ['grok-4-0709', 'grok-3', 'grok-3-mini', 'grok-3-fast']
            },
            {
                type: 'deepseek',
                name: 'Deepseek',
                category: 'online',
                requiresApiKey: true,
                defaultModel: 'deepseek-chat',
                models: ['deepseek-chat', 'deepseek-reasoner']
            }
        ];
    }

    /**
     * Get provider information by type
     * @param {string} type - Provider type
     * @returns {Object|null} - Provider information or null if not found
     */
    static getProviderInfo(type) {
        return this.getSupportedProviders().find(provider => provider.type === type) || null;
    }

    /**
     * Validate provider configuration
     * @param {Object} config - Provider configuration
     * @returns {{valid: boolean, errors: Array<string>}} - Validation result
     */
    static validateConfig(config) {
        const errors = [];

        if (!config) {
            errors.push('Configuration is required');
            return { valid: false, errors };
        }

        if (!config.type) {
            errors.push('Provider type is required');
        } else {
            const providerInfo = this.getProviderInfo(config.type);
            if (!providerInfo) {
                errors.push(`Unknown provider type: ${config.type}`);
            } else {
                // Check API key requirement
                if (providerInfo.requiresApiKey && !config.apiKey) {
                    errors.push(`API key is required for ${providerInfo.name}`);
                }

                // Validate API key format (basic validation)
                if (config.apiKey && config.type === 'openai' && !config.apiKey.startsWith('sk-')) {
                    errors.push('OpenAI API key should start with "sk-"');
                }

                if (config.apiKey && config.type === 'anthropic' && !config.apiKey.startsWith('sk-ant-')) {
                    errors.push('Anthropic API key should start with "sk-ant-"');
                }

                if (config.apiKey && config.type === 'grok' && !config.apiKey.startsWith('xai-')) {
                    errors.push('Grok API key should start with "xai-"');
                }

                // Validate model (skip for Ollama since it validates against actual installation)
                if (config.model && providerInfo.models && providerInfo.models.length > 0 && !providerInfo.models.includes(config.model)) {
                    errors.push(`Model "${config.model}" is not supported by ${providerInfo.name}`);
                }
            }
        }

        return {
            valid: errors.length === 0,
            errors
        };
    }
}

module.exports = AIProviderFactory;


---
File: /services/ai/AISettingsManager.js
---

/**
 * AI Settings Manager
 * Handles in-memory storage and management of AI provider configurations
 * Note: Settings are not persisted to disk for security reasons
 */
const crypto = require('crypto');

// Shared settings storage across all instances
let sharedSettings = null;

class AISettingsManager {
    constructor() {
        this.algorithm = 'aes-256-gcm';
    }

    /**
     * Get singleton instance of AISettingsManager
     * @returns {AISettingsManager} - Singleton instance
     */
    static getInstance() {
        if (!AISettingsManager.instance) {
            AISettingsManager.instance = new AISettingsManager();
        }
        return AISettingsManager.instance;
    }

    /**
     * Save AI provider settings (in-memory only)
     * @param {Object} settings - Settings to save
     * @param {string} settings.mode - 'offline' or 'online'
     * @param {Object} settings.offline - Offline configuration
     * @param {Object} settings.online - Online configuration
     */
    saveSettings(settings) {
        try {
            console.log('Saving AI provider settings to shared memory...');

            // Validate settings structure
            const validation = this.validateSettings(settings);
            if (!validation.valid) {
                throw new Error(`Invalid settings: ${validation.errors.join(', ')}`);
            }

            // Store in shared memory only (no disk persistence for security)
            sharedSettings = { ...settings, lastUpdated: new Date().toISOString() };

            console.log('AI provider settings saved to shared memory successfully');
            console.log('Saved settings:', JSON.stringify(sharedSettings, (key, value) => {
                // Hide API key in logs
                if (key === 'apiKey' && value) {
                    return '***HIDDEN***';
                }
                return value;
            }, 2));
        } catch (error) {
            console.error('Error saving AI provider settings:', error);
            throw new Error(`Failed to save settings: ${error.message}`);
        }
    }

    /**
     * Load AI provider settings (from memory or defaults)
     * @returns {Object} - Loaded settings or default settings
     */
    loadSettings() {
        try {
            if (sharedSettings) {
                return sharedSettings;
            } else {
                return this.getDefaultSettings();
            }
        } catch (error) {
            return this.getDefaultSettings();
        }
    }

    /**
     * Get default AI provider settings
     * @returns {Object} - Default settings
     */
    getDefaultSettings() {
        return {
            mode: 'online',
            offline: {
                model: '',
                endpoint: 'http://localhost:11434'
            },
            online: {
                provider: 'openai',
                apiKey: '',
                model: 'gpt-3.5-turbo',
                endpoint: ''
            },
            lastUpdated: new Date().toISOString(),
            version: '1.0.0'
        };
    }

    /**
     * Validate settings structure
     * @param {Object} settings - Settings to validate
     * @returns {{valid: boolean, errors: Array<string>}} - Validation result
     */
    validateSettings(settings) {
        const errors = [];

        if (!settings) {
            errors.push('Settings object is required');
            return { valid: false, errors };
        }

        // Validate mode
        if (!settings.mode || !['offline', 'online'].includes(settings.mode)) {
            errors.push('Mode must be either "offline" or "online"');
        }

        // Validate offline settings (only when in offline mode)
        if (settings.mode === 'offline' && settings.offline) {
            if (!settings.offline.model || typeof settings.offline.model !== 'string') {
                errors.push('Offline model must be a non-empty string when in offline mode');
            }
            if (settings.offline.endpoint && typeof settings.offline.endpoint !== 'string') {
                errors.push('Offline endpoint must be a string');
            }
        }

        // Validate online settings (only when in online mode)
        if (settings.mode === 'online' && settings.online) {
            const validProviders = ['openai', 'anthropic', 'google', 'microsoft', 'grok', 'deepseek'];
            if (!settings.online.provider || !validProviders.includes(settings.online.provider)) {
                errors.push(`Online provider must be one of: ${validProviders.join(', ')}`);
            }
            if (!settings.online.model || typeof settings.online.model !== 'string') {
                errors.push('Online model must be a non-empty string');
            }
            // API key validation is optional here since it might be empty initially
        }

        return {
            valid: errors.length === 0,
            errors
        };
    }



    /**
     * Clear all stored settings (from memory)
     */
    clearSettings() {
        try {
            console.log('Clearing AI provider settings from shared memory...');
            sharedSettings = null;
            console.log('AI provider settings cleared successfully');
        } catch (error) {
            console.error('Error clearing settings:', error);
            throw new Error(`Failed to clear settings: ${error.message}`);
        }
    }

    /**
     * Update specific setting
     * @param {string} path - Setting path (e.g., 'online.apiKey')
     * @param {any} value - New value
     */
    updateSetting(path, value) {
        const settings = this.loadSettings();

        // Navigate to the setting path
        const pathParts = path.split('.');
        let current = settings;

        for (let i = 0; i < pathParts.length - 1; i++) {
            if (!current[pathParts[i]]) {
                current[pathParts[i]] = {};
            }
            current = current[pathParts[i]];
        }

        // Set the value
        current[pathParts[pathParts.length - 1]] = value;

        // Update timestamp
        settings.lastUpdated = new Date().toISOString();

        // Save updated settings
        this.saveSettings(settings);
    }

    /**
     * Get current provider configuration for use with AIProviderFactory
     * @returns {Object} - Provider configuration
     */
    getCurrentProviderConfig() {
        const settings = this.loadSettings();

        if (settings.mode === 'offline') {
            return {
                type: 'ollama',
                model: settings.offline.model,
                endpoint: settings.offline.endpoint
            };
        } else {
            return {
                type: settings.online.provider,
                apiKey: settings.online.apiKey,
                model: settings.online.model,
                endpoint: settings.online.endpoint
            };
        }
    }

    /**
     * Migrate settings from older versions
     * @param {Object} settings - Settings to migrate
     * @returns {Object} - Migrated settings
     */
    migrateSettings(settings) {
        if (!settings.version) {
            // Migrate from version-less to v1.0.0
            settings.version = '1.0.0';
            settings.lastUpdated = new Date().toISOString();
        }

        // Add future migration logic here

        return settings;
    }
}

module.exports = AISettingsManager;


---
File: /services/ai/NumberingProcessor.js
---

/**
 * NumberingProcessor - Bulletproof utility for enforcing perfect numbering format
 * Ensures ALL AI outputs follow the exact format: "1. Sentence\nParagraph\n\n2. Sentence\nParagraph"
 */

class NumberingProcessor {
    /**
     * Fix numbering issues in AI-generated text - BULLETPROOF VERSION
     * @param {string} text - The text to process
     * @returns {string} - Text with perfect numbering format
     */
    static fixNumbering(text) {
        if (!text || typeof text !== 'string') {
            return text;
        }

        try {
            // Step 1: Clean and normalize the text
            let cleanedText = this.cleanText(text);

            // Step 2: Check if text has mixed or problematic numbering
            if (this.hasMixedOrProblematicNumbering(cleanedText)) {
                console.log('Detected mixed/problematic numbering, applying force format');
                return this.forceFormat(cleanedText);
            }

            // Step 3: Extract content blocks (potential numbered points)
            const contentBlocks = this.extractContentBlocks(cleanedText);

            // Step 4: If no meaningful content blocks found, try to create them
            if (contentBlocks.length === 0) {
                return this.createNumberedFormat(cleanedText);
            }

            // Step 5: Apply perfect numbering format
            const perfectFormat = this.applyPerfectFormat(contentBlocks);

            // Step 6: Final validation and cleanup
            return this.finalValidation(perfectFormat);

        } catch (error) {
            console.warn('NumberingProcessor: Error in fixNumbering, applying emergency format:', error.message);
            return this.emergencyFormat(text);
        }
    }

    /**
     * Clean and normalize text for processing
     * @param {string} text - Raw text
     * @returns {string} - Cleaned text
     */
    static cleanText(text) {
        // Remove excessive whitespace and normalize line breaks
        let cleaned = text
            .replace(/\r\n/g, '\n')           // Normalize line breaks
            .replace(/\r/g, '\n')             // Handle old Mac line breaks
            .replace(/\n{3,}/g, '\n\n')       // Max 2 consecutive line breaks
            .replace(/[ \t]+/g, ' ')          // Normalize spaces and tabs
            .replace(/^\s+|\s+$/g, '');       // Trim start and end

        return cleaned;
    }

    /**
     * Check if text has mixed or problematic numbering that needs force formatting
     * @param {string} text - Text to check
     * @returns {boolean} - True if problematic numbering detected
     */
    static hasMixedOrProblematicNumbering(text) {
        // Check for repeated numbers (like multiple 1.)
        const standardNumbers = (text.match(/(?:^|\n)\s*(\d+)\./g) || []);
        const parenthesisNumbers = (text.match(/(?:^|\n)\s*\((\d+)\)/g) || []);
        const colonNumbers = (text.match(/(?:^|\n)\s*(\d+):/g) || []);
        const dashNumbers = (text.match(/(?:^|\n)\s*(\d+)\s*[-–—]/g) || []);
        const parenNumbers = (text.match(/(?:^|\n)\s*(\d+)\)/g) || []);

        const totalNumberedItems = standardNumbers.length + parenthesisNumbers.length +
            colonNumbers.length + dashNumbers.length + parenNumbers.length;

        // If we have multiple different formats, it's mixed
        const formatCount = [standardNumbers, parenthesisNumbers, colonNumbers, dashNumbers, parenNumbers]
            .filter(arr => arr.length > 0).length;

        if (formatCount > 1) {
            return true; // Mixed formats
        }

        // Check for repeated numbers in any format
        if (standardNumbers.length > 0) {
            const numbers = standardNumbers.map(match => parseInt(match.match(/\d+/)[0]));
            const uniqueNumbers = new Set(numbers);
            if (uniqueNumbers.size < numbers.length) {
                return true; // Repeated numbers
            }

            // Check if not sequential starting from 1
            const sortedNumbers = [...numbers].sort((a, b) => a - b);
            if (sortedNumbers[0] !== 1 || !sortedNumbers.every((num, idx) => num === idx + 1)) {
                return true; // Not sequential
            }
        }

        // Check for numbers with line breaks immediately after (like "1.\nText")
        if (/(?:^|\n)\s*\d+\.\s*\n/.test(text)) {
            return true; // Number with immediate line break
        }

        return false;
    }

    /**
     * Extract content blocks that should be numbered points
     * @param {string} text - Cleaned text
     * @returns {Array} - Array of content blocks
     */
    static extractContentBlocks(text) {
        // Strategy 1: Look for existing numbered patterns (any format)
        const numberedBlocks = this.extractExistingNumberedBlocks(text);
        if (numberedBlocks.length > 0) {
            return numberedBlocks;
        }

        // Strategy 2: Look for mixed numbering patterns in a single pass
        const mixedBlocks = this.extractMixedNumberingBlocks(text);
        if (mixedBlocks.length > 0) {
            return mixedBlocks;
        }

        // Strategy 3: Look for paragraph-based structure
        const paragraphBlocks = this.extractParagraphBlocks(text);
        if (paragraphBlocks.length > 0) {
            return paragraphBlocks;
        }

        // Strategy 4: Look for sentence-based structure
        const sentenceBlocks = this.extractSentenceBlocks(text);
        if (sentenceBlocks.length > 0) {
            return sentenceBlocks;
        }

        return [];
    }

    /**
     * Extract existing numbered blocks
     * @param {string} text - Text to analyze
     * @returns {Array} - Array of numbered blocks
     */
    static extractExistingNumberedBlocks(text) {
        const allBlocks = [];

        // Comprehensive regex patterns for different numbering formats
        const patterns = [
            {
                regex: /(?:^|\n)\s*(\d+)\.\s*([^\n]*(?:\n(?!\s*\d+[\.\)\:\-])[^\n]*)*)/g,
                name: '1. format'
            },
            {
                regex: /(?:^|\n)\s*(\d+)\)\s*([^\n]*(?:\n(?!\s*\d+[\.\)\:\-])[^\n]*)*)/g,
                name: '1) format'
            },
            {
                regex: /(?:^|\n)\s*\((\d+)\)\s*([^\n]*(?:\n(?!\s*[\(\d])[^\n]*)*)/g,
                name: '(1) format'
            },
            {
                regex: /(?:^|\n)\s*(\d+):\s*([^\n]*(?:\n(?!\s*\d+[\.\)\:\-])[^\n]*)*)/g,
                name: '1: format'
            },
            {
                regex: /(?:^|\n)\s*(\d+)\s*[-–—]\s*([^\n]*(?:\n(?!\s*\d+\s*[-–—])[^\n]*)*)/g,
                name: '1 - format'
            }
        ];

        // Try each pattern and collect all matches
        for (const pattern of patterns) {
            let match;
            const patternRegex = new RegExp(pattern.regex.source, pattern.regex.flags);

            while ((match = patternRegex.exec(text)) !== null) {
                const number = parseInt(match[1]);
                const content = match[2].trim();

                if (content.length > 5) { // Minimum content length
                    allBlocks.push({
                        originalNumber: number,
                        content: content,
                        startIndex: match.index,
                        endIndex: match.index + match[0].length,
                        fullMatch: match[0],
                        pattern: pattern.name
                    });
                }
            }
        }

        if (allBlocks.length === 0) {
            return [];
        }

        // Sort by position and remove overlaps
        allBlocks.sort((a, b) => a.startIndex - b.startIndex);

        const nonOverlappingBlocks = [];
        let lastEndIndex = -1;

        for (const block of allBlocks) {
            if (block.startIndex >= lastEndIndex) {
                nonOverlappingBlocks.push(block);
                lastEndIndex = block.endIndex;
            }
        }

        return nonOverlappingBlocks;
    }

    /**
     * Extract blocks with mixed numbering formats in a single pass
     * @param {string} text - Text to analyze
     * @returns {Array} - Array of mixed numbered blocks
     */
    static extractMixedNumberingBlocks(text) {
        // Single comprehensive regex that captures any numbering format
        const mixedPattern = /(?:^|\n)\s*(?:(\d+)[\.\)\:\-]|\((\d+)\))\s*([^\n]*(?:\n(?!\s*(?:\d+[\.\)\:\-]|\(\d+\)))[^\n]*)*)/g;

        const blocks = [];
        let match;

        while ((match = mixedPattern.exec(text)) !== null) {
            const number = parseInt(match[1] || match[2]);
            const content = match[3].trim();

            if (content.length > 5) {
                blocks.push({
                    originalNumber: number,
                    content: content,
                    startIndex: match.index,
                    endIndex: match.index + match[0].length,
                    fullMatch: match[0]
                });
            }
        }

        return blocks.sort((a, b) => a.startIndex - b.startIndex);
    }

    /**
     * Extract paragraph-based blocks
     * @param {string} text - Text to analyze
     * @returns {Array} - Array of paragraph blocks
     */
    static extractParagraphBlocks(text) {
        const paragraphs = text.split(/\n\s*\n/).filter(p => p.trim().length > 20);

        if (paragraphs.length < 2 || paragraphs.length > 15) {
            return []; // Not suitable for paragraph-based numbering
        }

        return paragraphs.map((paragraph, index) => ({
            originalNumber: index + 1,
            content: paragraph.trim(),
            startIndex: 0,
            fullMatch: paragraph
        }));
    }

    /**
     * Extract sentence-based blocks for long continuous text
     * @param {string} text - Text to analyze
     * @returns {Array} - Array of sentence blocks
     */
    static extractSentenceBlocks(text) {
        // Look for sentences that could be main points
        const sentences = text.match(/[^.!?]+[.!?]+/g);

        if (!sentences || sentences.length < 2) {
            return [];
        }

        // Group sentences into logical blocks
        const blocks = [];
        let currentBlock = '';
        let sentenceCount = 0;

        for (const sentence of sentences) {
            const trimmed = sentence.trim();
            if (trimmed.length < 10) continue;

            currentBlock += (currentBlock ? ' ' : '') + trimmed;
            sentenceCount++;

            // Create a block every 2-4 sentences or when we hit a natural break
            if (sentenceCount >= 2 && (sentenceCount >= 4 || this.isNaturalBreak(trimmed))) {
                blocks.push({
                    originalNumber: blocks.length + 1,
                    content: currentBlock.trim(),
                    startIndex: 0,
                    fullMatch: currentBlock
                });

                currentBlock = '';
                sentenceCount = 0;
            }
        }

        // Add remaining content as final block
        if (currentBlock.trim().length > 20) {
            blocks.push({
                originalNumber: blocks.length + 1,
                content: currentBlock.trim(),
                startIndex: 0,
                fullMatch: currentBlock
            });
        }

        return blocks.length >= 2 && blocks.length <= 10 ? blocks : [];
    }

    /**
     * Check if a sentence represents a natural break point
     * @param {string} sentence - Sentence to check
     * @returns {boolean} - True if natural break
     */
    static isNaturalBreak(sentence) {
        const breakIndicators = [
            'however', 'furthermore', 'additionally', 'moreover', 'consequently',
            'therefore', 'meanwhile', 'subsequently', 'nevertheless', 'nonetheless'
        ];

        const lowerSentence = sentence.toLowerCase();
        return breakIndicators.some(indicator => lowerSentence.includes(indicator));
    }

    /**
     * Create numbered format from unstructured text
     * @param {string} text - Text to format
     * @returns {string} - Formatted text
     */
    static createNumberedFormat(text) {
        // Split text into logical chunks
        const chunks = text.split(/\n\s*\n/).filter(chunk => chunk.trim().length > 20);

        if (chunks.length === 0) {
            // Single block of text - create one numbered point
            return `1. ${text.trim()}`;
        }

        if (chunks.length === 1) {
            // Single paragraph - try to split by sentences
            const sentences = chunks[0].match(/[^.!?]+[.!?]+/g);
            if (sentences && sentences.length >= 2) {
                return sentences.map((sentence, index) =>
                    `${index + 1}. ${sentence.trim()}`
                ).join('\n\n');
            } else {
                return `1. ${chunks[0].trim()}`;
            }
        }

        // Multiple chunks - number them
        return chunks.map((chunk, index) =>
            `${index + 1}. ${chunk.trim()}`
        ).join('\n\n');
    }

    /**
     * Apply perfect numbering format to content blocks
     * @param {Array} blocks - Content blocks
     * @returns {string} - Perfectly formatted text
     */
    static applyPerfectFormat(blocks) {
        if (blocks.length === 0) {
            return '';
        }

        const formattedBlocks = blocks.map((block, index) => {
            const number = index + 1;
            let content = block.content.trim();

            // Ensure content doesn't start with old numbering
            content = content.replace(/^\d+[\.\)\:\-\s]+/, '');
            content = content.replace(/^\(\d+\)\s*/, '');

            // Split content into first sentence and rest
            const lines = content.split('\n');
            const firstLine = lines[0].trim();

            // Try to find a sentence ending in the first line
            const sentenceMatch = firstLine.match(/^([^.!?]*[.!?])/);

            if (sentenceMatch) {
                // First line has a sentence ending, use that as the main sentence
                const firstSentence = sentenceMatch[1].trim();
                const remainingFirstLine = firstLine.substring(sentenceMatch[0].length).trim();
                const restOfLines = lines.slice(1).join('\n').trim();

                let restOfContent = '';
                if (remainingFirstLine.length > 0) {
                    restOfContent = remainingFirstLine;
                }
                if (restOfLines.length > 0) {
                    restOfContent = restOfContent.length > 0 ? restOfContent + '\n' + restOfLines : restOfLines;
                }

                if (restOfContent.length > 0) {
                    return `${number}. ${firstSentence}\n${restOfContent}`;
                } else {
                    return `${number}. ${firstSentence}`;
                }
            } else {
                // No sentence ending in first line, use entire first line as main sentence
                if (lines.length > 1) {
                    const restOfLines = lines.slice(1).join('\n').trim();
                    if (restOfLines.length > 0) {
                        return `${number}. ${firstLine}\n${restOfLines}`;
                    } else {
                        return `${number}. ${firstLine}`;
                    }
                } else {
                    // Single line
                    return `${number}. ${content}`;
                }
            }
        });

        return formattedBlocks.join('\n\n');
    }

    /**
     * Final validation and cleanup
     * @param {string} text - Formatted text
     * @returns {string} - Final validated text
     */
    static finalValidation(text) {
        // Ensure proper spacing between numbered points
        let validated = text.replace(/(\d+\.\s[^\n]+)\n+(\d+\.)/g, '$1\n\n$2');

        // Ensure no triple line breaks
        validated = validated.replace(/\n{3,}/g, '\n\n');

        // Ensure each numbered point starts on a new line
        validated = validated.replace(/([^\n])\n(\d+\.)/g, '$1\n\n$2');

        // Final trim
        validated = validated.trim();

        return validated;
    }

    /**
     * Emergency format for when all else fails
     * @param {string} text - Original text
     * @returns {string} - Emergency formatted text
     */
    static emergencyFormat(text) {
        // Last resort: just add "1. " to the beginning if it doesn't have numbering
        const trimmed = text.trim();

        if (!/^\d+[\.\)\:\-]/.test(trimmed)) {
            return `1. ${trimmed}`;
        }

        return trimmed;
    }

    /**
     * Validate that text has proper numbering format
     * @param {string} text - Text to validate
     * @returns {boolean} - True if properly formatted
     */
    static isProperlyFormatted(text) {
        if (!text || typeof text !== 'string') {
            return false;
        }

        // Check for sequential numbering starting with 1
        const numberMatches = text.match(/(?:^|\n)(\d+)\./g);

        if (!numberMatches || numberMatches.length === 0) {
            return false;
        }

        // Extract numbers and check sequence
        const numbers = numberMatches.map(match =>
            parseInt(match.replace(/(?:^|\n)(\d+)\./, '$1'))
        );

        // Should start with 1 and be sequential
        for (let i = 0; i < numbers.length; i++) {
            if (numbers[i] !== i + 1) {
                return false;
            }
        }

        return true;
    }

    /**
     * Get statistics about the numbering in text
     * @param {string} text - Text to analyze
     * @returns {Object} - Statistics
     */
    static getNumberingStats(text) {
        if (!text || typeof text !== 'string') {
            return {
                hasNumbering: false,
                totalPoints: 0,
                isSequential: false,
                numbers: []
            };
        }

        const numberMatches = text.match(/(?:^|\n)(\d+)\./g);

        if (!numberMatches) {
            return {
                hasNumbering: false,
                totalPoints: 0,
                isSequential: false,
                numbers: []
            };
        }

        const numbers = numberMatches.map(match =>
            parseInt(match.replace(/(?:^|\n)(\d+)\./, '$1'))
        );

        const isSequential = numbers.every((num, index) => num === index + 1);

        return {
            hasNumbering: true,
            totalPoints: numbers.length,
            isSequential: isSequential,
            numbers: numbers
        };
    }

    /**
     * Force perfect format - nuclear option
     * @param {string} text - Text to force format
     * @returns {string} - Force formatted text
     */
    static forceFormat(text) {
        if (!text || typeof text !== 'string') {
            return text;
        }

        // Processing text for bold formatting

        // BULLETPROOF APPROACH: Split by numbered patterns and renumber everything sequentially
        // This regex splits the text at every numbered pattern while keeping the content
        const numberedSections = text.split(/(?=(?:^|\n)\s*\d+[\.\)\:\-])/);
        const sections = [];

        for (let i = 0; i < numberedSections.length; i++) {
            const section = numberedSections[i].trim();

            if (section.length === 0) continue;

            // Remove the number from the beginning if it exists
            const cleanedSection = section.replace(/^\s*\d+[\.\)\:\-]\s*/, '').trim();

            // Only include sections with substantial content
            if (cleanedSection.length > 5) {
                sections.push(cleanedSection);
                // Extracted section for processing
            }
        }

        // If no numbered sections found, try splitting by double line breaks
        if (sections.length === 0) {
            // No numbered sections found, trying paragraph split
            const paragraphs = text.split(/\n\s*\n/).filter(p => p.trim().length > 10);

            if (paragraphs.length === 0) {
                return `1. ${text.trim()}`;
            }

            return paragraphs.map((paragraph, index) => {
                const cleaned = paragraph.trim().replace(/^\s*\d+[\.\)\:\-]\s*/, '');
                return `${index + 1}. ${cleaned}`;
            }).join('\n\n');
        }

        // Apply sequential numbering to all sections
        const result = sections.map((section, index) => {
            const number = index + 1;

            // Split into first sentence and rest for proper formatting
            const lines = section.split('\n');
            const firstLine = lines[0].trim();

            // Try to find a sentence ending in the first line
            const sentenceMatch = firstLine.match(/^([^.!?]*[.!?])/);

            if (sentenceMatch) {
                // First line has a sentence ending, use that as the main sentence
                const firstSentence = sentenceMatch[1].trim();
                const remainingFirstLine = firstLine.substring(sentenceMatch[0].length).trim();
                const restOfLines = lines.slice(1).join('\n').trim();

                let restOfContent = '';
                if (remainingFirstLine.length > 0) {
                    restOfContent = remainingFirstLine;
                }
                if (restOfLines.length > 0) {
                    restOfContent = restOfContent.length > 0 ? restOfContent + '\n' + restOfLines : restOfLines;
                }

                if (restOfContent.length > 0) {
                    return `${number}. ${firstSentence}\n${restOfContent}`;
                } else {
                    return `${number}. ${firstSentence}`;
                }
            } else {
                // No sentence ending in first line, use entire first line as main sentence
                if (lines.length > 1) {
                    const restOfLines = lines.slice(1).join('\n').trim();
                    if (restOfLines.length > 0) {
                        return `${number}. ${firstLine}\n${restOfLines}`;
                    } else {
                        return `${number}. ${firstLine}`;
                    }
                } else {
                    // Single line
                    return `${number}. ${section}`;
                }
            }
        }).join('\n\n');

        // Generated numbered sections with bold formatting
        return result;
    }
}

module.exports = NumberingProcessor;


---
File: /services/transcript/YouTubeTranscriptExtractor.js
---

/**
 * Simplified YouTube Transcript Extractor
 * Uses only LangChain YoutubeLoader for reliable transcript extraction
 */

class YouTubeTranscriptExtractor {
    constructor() {
        this.name = 'YouTubeTranscriptExtractor';
    }

    /**
     * Extract transcript from YouTube video using LangChain
     * @param {string} videoId - YouTube video ID
     * @returns {Promise<{success: boolean, transcript?: string, error?: string}>}
     */
    async extractTranscript(videoId) {
        try {
            this._log('info', `🎬 Starting transcript extraction for video ID: ${videoId}`);

            // Dynamic import for ES modules
            const { YoutubeLoader } = await import('@langchain/community/document_loaders/web/youtube');

            // Construct YouTube URL from video ID
            const videoUrl = `https://www.youtube.com/watch?v=${videoId}`;
            this._log('info', `Creating loader for URL: ${videoUrl}`);

            // Create loader with configuration
            const loader = YoutubeLoader.createFromUrl(videoUrl, {
                language: 'en',
                addVideoInfo: true,
            });

            this._log('info', 'Loading transcript documents...');
            const docs = await loader.load();

            if (!docs || docs.length === 0) {
                this._log('error', 'LangChain loader returned no documents');
                return {
                    success: false,
                    error: 'No transcript documents found'
                };
            }

            this._log('info', `Successfully loaded ${docs.length} document(s)`);

            const document = docs[0];
            const transcript = document.pageContent;
            const metadata = document.metadata;

            if (!transcript || transcript.length === 0) {
                this._log('error', 'Document contains no transcript content');
                return {
                    success: false,
                    error: 'Document contains no transcript content'
                };
            }

            // Validate transcript length (minimum 100 characters)
            if (transcript.length < 100) {
                this._log('error', `Transcript too short: ${transcript.length} characters`);
                return {
                    success: false,
                    error: `Transcript too short: ${transcript.length} characters (minimum 100 required)`
                };
            }

            // Clean the transcript text
            const cleanedTranscript = this._cleanText(transcript);

            this._log('info', `✅ Transcript extracted successfully: ${cleanedTranscript.length} characters`);
            this._log('info', `Video metadata: ${JSON.stringify(metadata, null, 2)}`);

            return {
                success: true,
                transcript: cleanedTranscript,
                metadata: metadata
            };

        } catch (error) {
            this._log('error', `Transcript extraction failed: ${error.message}`);

            // Provide specific error messages for common issues
            let errorMessage = error.message;

            if (error.message.includes('Video unavailable')) {
                errorMessage = 'Video is unavailable or private';
            } else if (error.message.includes('No transcript')) {
                errorMessage = 'No transcript available for this video';
            } else if (error.message.includes('age-restricted')) {
                errorMessage = 'Video is age-restricted and cannot be processed';
            } else if (error.message.includes('private')) {
                errorMessage = 'Video is private and cannot be accessed';
            }

            return {
                success: false,
                error: errorMessage
            };
        }
    }

    /**
     * Clean text content
     * @param {string} text - Raw text
     * @returns {string} - Cleaned text
     * @private
     */
    _cleanText(text) {
        if (!text || typeof text !== 'string') {
            return '';
        }

        return text
            // Decode HTML entities
            .replace(/&amp;/g, '&')
            .replace(/&lt;/g, '<')
            .replace(/&gt;/g, '>')
            .replace(/&quot;/g, '"')
            .replace(/&#39;/g, "'")
            .replace(/&nbsp;/g, ' ')
            // Remove HTML tags
            .replace(/<[^>]*>/g, '')
            // Normalize whitespace
            .replace(/\s+/g, ' ')
            .trim();
    }

    /**
     * Log messages with extractor name
     * @param {string} level - Log level
     * @param {string} message - Log message
     * @private
     */
    _log(level, message) {
        const timestamp = new Date().toISOString();
        const logMessage = `${timestamp} ${level.toUpperCase()} [${this.name}] ${message}`;
        
        switch (level) {
            case 'info':
                console.log(logMessage);
                break;
            case 'warn':
                console.warn(logMessage);
                break;
            case 'error':
                console.error(logMessage);
                break;
            default:
                console.log(logMessage);
        }
    }
}

module.exports = YouTubeTranscriptExtractor;


---
File: /services/contentExtractor.js
---

/**
 * Content Extractor service for SAWRON
 * Handles extraction of content from various sources
 */
const axios = require('axios');
const cheerio = require('cheerio');
const YoutubeTranscript = require('youtube-transcript');

// YouTube Transcript Library loaded successfully
const pdf = require('pdf-parse');
const mammoth = require('mammoth');
const fs = require('fs').promises;
const path = require('path');

class ContentExtractor {
    /**
     * Extract content from a URL
     * @param {string} url - The URL to extract content from
     * @returns {Promise<{text: string, title: string, contentType: string, extractionMethod: string, fallbackUsed: boolean}>} - The extracted content and metadata
     */
    async extractFromUrl(url) {
        console.log(`Starting content extraction from URL: ${url}`);
        const startTime = Date.now();

        try {
            // Check if it's a YouTube URL
            if (this.isYoutubeUrl(url)) {
                console.log(`Detected YouTube URL (${this.classifyYoutubeUrl(url)}), extracting content...`);

                try {
                    const result = await this.extractFromYoutube(url);

                    const duration = (Date.now() - startTime) / 1000;
                    console.log(`YouTube processing completed in ${duration.toFixed(2)}s`);
                    console.log(`Final result - Method: ${result.extractionMethod}, Content length: ${result.text.length} characters, Fallback used: ${result.fallbackUsed}`);

                    return result;
                } catch (youtubeError) {
                    // For YouTube transcript extraction failures, throw the error to be handled by the processor
                    console.error(`YouTube transcript extraction failed: ${youtubeError.message}`);
                    throw youtubeError;
                }
            }

            // Otherwise, treat as a regular web page
            console.log(`Processing as regular web page...`);
            return await this.extractFromWebpage(url, startTime);

        } catch (error) {
            // Only catch non-YouTube errors for fallback handling
            if (this.isYoutubeUrl(url)) {
                // Re-throw YouTube errors so they can be handled properly by the processor
                throw error;
            }

            console.error(`Unexpected error during URL extraction: ${error.message}`, error);

            const duration = (Date.now() - startTime) / 1000;

            // Return fallback content for non-YouTube URLs
            return {
                text: `An unexpected error occurred while processing the URL "${url}": ${error.message}. This could be due to network issues, the website being unavailable, or the site blocking automated access.`,
                title: `Error: ${url}`,
                contentType: 'webpage',
                extractionMethod: 'error-fallback',
                fallbackUsed: true,
                metadata: {
                    url: url,
                    processingTime: duration,
                    error: error.message
                }
            };
        }
    }

    /**
     * Extract content from a regular webpage
     * @param {string} url - The webpage URL
     * @param {number} startTime - Processing start time
     * @returns {Promise<{text: string, title: string, contentType: string, extractionMethod: string, fallbackUsed: boolean}>} - Extraction result
     */
    async extractFromWebpage(url, startTime) {
        try {
            console.log(`Fetching web page content from: ${url}`);

            // Create a promise with timeout
            const fetchWithTimeout = async (url, options, timeout = 30000) => {
                const controller = new AbortController();
                const timeoutId = setTimeout(() => controller.abort(), timeout);

                try {
                    const response = await axios.get(url, {
                        ...options,
                        signal: controller.signal
                    });
                    clearTimeout(timeoutId);
                    return response;
                } catch (error) {
                    clearTimeout(timeoutId);
                    throw error;
                }
            };

            let response;
            try {
                // First attempt with standard headers
                console.log(`Attempting to fetch with standard browser headers...`);
                response = await fetchWithTimeout(url, {
                    timeout: 30000,
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
                        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                        'Accept-Language': 'en-US,en;q=0.5',
                        'Connection': 'keep-alive',
                        'Upgrade-Insecure-Requests': '1',
                        'Cache-Control': 'max-age=0'
                    }
                });

                console.log(`Web page fetched successfully (${response.data.length} bytes)`);
            } catch (fetchError) {
                console.warn(`Standard fetch failed: ${fetchError.message}, trying mobile user agent...`);

                try {
                    response = await fetchWithTimeout(url, {
                        timeout: 30000,
                        headers: {
                            'User-Agent': 'Mozilla/5.0 (iPhone; CPU iPhone OS 13_2_3 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.0.3 Mobile/15E148 Safari/604.1',
                            'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
                            'Accept-Language': 'en-US,en;q=0.5'
                        }
                    });

                    console.log(`Web page fetched with mobile user agent (${response.data.length} bytes)`);
                } catch (secondError) {
                    console.error(`All fetch attempts failed: ${secondError.message}`);
                    throw new Error(`Could not access website: ${fetchError.message}`);
                }
            }

            const $ = cheerio.load(response.data);

            // Extract title
            const title = $('title').text() || url;
            console.log(`Page title: "${title}"`);

            // Remove unwanted elements
            console.log(`Cleaning page content...`);
            $('script, style, nav, footer, header, aside, .ads, .comments, .sidebar').remove();

            // Extract main content
            let content = '';
            let extractionMethod = 'body-content';

            // Try to find main content container
            const mainSelectors = ['main', 'article', '.content', '.post', '.entry', '#content', '.main'];
            let mainContent = null;

            for (const selector of mainSelectors) {
                if ($(selector).length) {
                    console.log(`Found main content using selector: ${selector}`);
                    mainContent = $(selector);
                    extractionMethod = `main-content-${selector}`;
                    break;
                }
            }

            if (mainContent) {
                content = mainContent.text();
            } else {
                console.log(`No main content container found, using body content`);
                content = $('body').text();
            }

            // Clean up the text
            content = this.cleanText(content);

            // Check if content is too short
            if (!content || content.length < 100) {
                console.warn(`Extracted content is too short (${content.length} chars), trying meta description fallback`);

                const metaDescription = $('meta[name="description"]').attr('content') ||
                    $('meta[property="og:description"]').attr('content');

                if (metaDescription && metaDescription.length > 50) {
                    content = `${metaDescription}\n\nNote: Full content could not be extracted from this page.`;
                    extractionMethod = 'meta-description-fallback';
                } else {
                    content = `This page at ${url} with title "${title}" appears to have limited textual content that could be extracted. It might be a primarily visual page, a login page, or have content loaded dynamically via JavaScript.`;
                    extractionMethod = 'minimal-content-fallback';
                }
            }

            const duration = (Date.now() - startTime) / 1000;
            console.log(`Web page extraction completed in ${duration.toFixed(2)}s`);
            console.log(`Final result - Method: ${extractionMethod}, Content length: ${content.length} characters`);

            return {
                text: content,
                title: title,
                contentType: 'webpage',
                extractionMethod: extractionMethod,
                fallbackUsed: extractionMethod.includes('fallback'),
                metadata: {
                    url: url,
                    processingTime: duration
                }
            };

        } catch (error) {
            console.error(`Error extracting webpage content: ${error.message}`);

            const duration = (Date.now() - startTime) / 1000;

            // Return fallback content
            return {
                text: `Unable to access the content at ${url}. Error: ${error.message}. This could be due to network issues, the website being unavailable, or the site blocking automated access. The URL appears to be for a web page that might contain relevant information, but it couldn't be retrieved at this time.`,
                title: `Inaccessible Content: ${url}`,
                contentType: 'webpage',
                extractionMethod: 'access-error-fallback',
                fallbackUsed: true,
                metadata: {
                    url: url,
                    processingTime: duration,
                    error: error.message
                }
            };
        }
    }

    /**
     * Extract content from a YouTube video
     * @param {string} url - The YouTube URL
     * @returns {Promise<{text: string, title: string, contentType: string, extractionMethod: string, fallbackUsed: boolean}>} - The extracted transcript and metadata
     */
    async extractFromYoutube(url) {
        console.log(`Extracting transcript from YouTube URL: ${url}`);
        const startTime = Date.now();

        const videoId = this.extractYoutubeId(url);
        if (!videoId) {
            throw new Error(`Unable to extract video ID from YouTube URL: ${url}. Please check if the URL is valid.`);
        }

        console.log(`Extracted video ID: ${videoId}`);

        // Get enhanced video metadata
        const metadata = await this.extractYoutubeMetadata(videoId);

        try {
            // Try transcript extraction using LangChain
            const transcriptResult = await this.tryMultipleTranscriptMethods(videoId);

            const duration = (Date.now() - startTime) / 1000;
            console.log(`YouTube processing completed in ${duration.toFixed(2)}s`);

            return {
                text: transcriptResult.text,
                title: metadata.title,
                contentType: 'youtube-video',
                extractionMethod: transcriptResult.method,
                fallbackUsed: transcriptResult.fallbackUsed,
                metadata: {
                    videoId: videoId,
                    channelName: metadata.channelName,
                    description: metadata.description,
                    duration: duration
                }
            };
        } catch (error) {
            const duration = (Date.now() - startTime) / 1000;
            console.error(`❌ YouTube transcript extraction failed after ${duration.toFixed(2)}s: ${error.message}`);
            console.error(`📋 Unable to extract transcript for video "${metadata.title}" (${videoId})`);

            // Throw the error so it can be handled upstream with proper status setting
            throw new Error(`Unable to extract transcript: ${error.message}`);
        }
    }

    /**
     * Extract YouTube transcript using simplified LangChain-only approach
     * @param {string} videoId - The YouTube video ID
     * @returns {Promise<{text: string, method: string, fallbackUsed: boolean}>} - Extraction result
     */
    async tryMultipleTranscriptMethods(videoId) {
        const YouTubeTranscriptExtractor = require('./transcript/YouTubeTranscriptExtractor');
        const extractor = new YouTubeTranscriptExtractor();

        console.log(`🎬 Starting transcript extraction for video ID: ${videoId}`);
        const startTime = Date.now();

        try {
            const result = await extractor.extractTranscript(videoId);
            const processingTime = Date.now() - startTime;

            if (result.success) {
                console.log(`✅ Transcript extracted successfully: ${result.transcript.length} characters in ${processingTime}ms`);

                return {
                    text: result.transcript,
                    method: 'langchain-youtube-loader',
                    fallbackUsed: false,
                    processingTime: processingTime
                };
            } else {
                console.error(`❌ Transcript extraction failed: ${result.error}`);
                throw new Error(`Unable to extract transcript: ${result.error}`);
            }

        } catch (error) {
            const processingTime = Date.now() - startTime;
            console.error(`💥 Transcript extraction failed after ${processingTime}ms: ${error.message}`);
            throw new Error(`Failed to extract transcript from video ${videoId}: ${error.message}`);
        }
    }

    /**
     * Helper method to process transcript results consistently
     * @param {Array} result - The transcript array result
     * @param {string} methodName - The method name for logging
     * @returns {Object} - Processed transcript result
     */
    async processTranscriptResult(result, methodName) {
        if (!Array.isArray(result) || result.length === 0) {
            throw new Error('Invalid or empty transcript result');
        }

        console.log(`Processing ${result.length} transcript items with method ${methodName}`);
        console.log(`First item:`, JSON.stringify(result[0], null, 2));

        const transcript = result
            .map(item => {
                if (typeof item === 'string') {
                    return item.trim();
                }
                if (typeof item === 'object' && item !== null) {
                    const textProps = ['text', 'snippet', 'content', 'transcript', 'caption', 'subtitle'];
                    for (const prop of textProps) {
                        if (item[prop] && typeof item[prop] === 'string') {
                            return item[prop].trim();
                        }
                    }
                }
                return String(item).trim();
            })
            .filter(text => text && text.length > 0)
            .join(' ')
            .trim();

        if (transcript && transcript.length > 10) {
            console.log(`✅ Successfully processed transcript: ${transcript.length} characters`);
            return {
                text: transcript,
                method: methodName,
                fallbackUsed: false
            };
        } else {
            throw new Error(`Processed transcript too short: ${transcript?.length || 0} characters`);
        }
    }

    /**
     * Extract enhanced YouTube metadata
     * @param {string} videoId - The YouTube video ID
     * @returns {Promise<{title: string, channelName: string, description: string}>} - Video metadata
     */
    async extractYoutubeMetadata(videoId) {
        console.log(`Fetching enhanced video metadata for ${videoId}...`);

        let title = 'YouTube Video';
        let channelName = '';
        let description = '';

        try {
            // Get basic metadata from oEmbed
            const oembedResponse = await axios.get(`https://www.youtube.com/oembed?url=https://www.youtube.com/watch?v=${videoId}&format=json`, {
                timeout: 10000
            });

            title = oembedResponse.data.title || 'YouTube Video';
            channelName = oembedResponse.data.author_name || '';

            console.log(`Basic metadata: "${title}" by ${channelName}`);
        } catch (oembedError) {
            console.warn(`Could not fetch oEmbed metadata: ${oembedError.message}`);
        }

        try {
            // Try to get additional metadata from the video page
            const videoPageResponse = await axios.get(`https://www.youtube.com/watch?v=${videoId}`, {
                timeout: 15000,
                headers: {
                    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'
                }
            });

            // Extract description from meta tags
            const descriptionMatch = videoPageResponse.data.match(/<meta name="description" content="([^"]+)"/);
            if (descriptionMatch && descriptionMatch[1]) {
                description = descriptionMatch[1];
                console.log(`Found video description: ${description.substring(0, 100)}...`);
            }

            // Try to extract title from page if oEmbed failed
            if (title === 'YouTube Video') {
                const titleMatch = videoPageResponse.data.match(/<title>([^<]+)<\/title>/);
                if (titleMatch && titleMatch[1]) {
                    title = titleMatch[1].replace(' - YouTube', '');
                }
            }
        } catch (pageError) {
            console.warn(`Could not fetch video page metadata: ${pageError.message}`);
        }

        return { title, channelName, description };
    }



    /**
     * Extract content from a file
     * @param {Object} file - The file object
     * @returns {Promise<{text: string, title: string, contentType: string, extractionMethod: string, fallbackUsed: boolean}>} - The extracted content and metadata
     */
    async extractFromFile(file) {
        console.log(`Starting content extraction from file: ${file.originalname}`);
        const startTime = Date.now();

        const filePath = file.path;
        const fileName = file.originalname || path.basename(filePath);
        const fileExt = path.extname(fileName).toLowerCase();

        console.log(`File details - Name: ${fileName}, Type: ${fileExt}, Size: ${file.size} bytes, Path: ${filePath}`);

        let extractionResult = {
            text: '',
            method: 'unknown',
            fallbackUsed: false
        };

        try {
            switch (fileExt) {
                case '.pdf':
                    console.log(`Processing PDF file...`);
                    try {
                        const pdfData = await fs.readFile(filePath);
                        console.log(`PDF file read successfully (${pdfData.length} bytes), attempting extraction...`);

                        extractionResult = await this.tryMultiplePdfMethods(filePath, pdfData);
                        console.log(`PDF extraction completed using method: ${extractionResult.method}`);
                    } catch (pdfError) {
                        console.error(`PDF processing failed: ${pdfError.message}`);
                        extractionResult = await this.createPdfFallbackContent(filePath, null);
                    }
                    break;

                case '.docx':
                    console.log(`Processing DOCX file...`);
                    try {
                        const docxResult = await mammoth.extractRawText({ path: filePath });
                        extractionResult.text = docxResult.value;
                        extractionResult.method = 'mammoth-docx';
                        console.log(`DOCX parsed successfully: ${extractionResult.text.length} characters`);
                    } catch (docxError) {
                        console.error(`DOCX processing failed: ${docxError.message}`);
                        extractionResult = {
                            text: `This DOCX document "${fileName}" (${(file.size / 1024 / 1024).toFixed(2)} MB) could not be processed. Error: ${docxError.message}. The file may be corrupted or in an unsupported format.`,
                            method: 'docx-fallback',
                            fallbackUsed: true
                        };
                    }
                    break;

                case '.txt':
                    console.log(`Processing TXT file...`);
                    try {
                        extractionResult.text = await fs.readFile(filePath, 'utf8');
                        extractionResult.method = 'direct-text-read';
                        console.log(`TXT file read successfully: ${extractionResult.text.length} characters`);
                    } catch (txtError) {
                        console.error(`TXT processing failed: ${txtError.message}`);
                        extractionResult = {
                            text: `This text file "${fileName}" could not be read. Error: ${txtError.message}. The file may be corrupted or have encoding issues.`,
                            method: 'txt-fallback',
                            fallbackUsed: true
                        };
                    }
                    break;

                default:
                    console.warn(`Unsupported file type: ${fileExt}`);
                    extractionResult = {
                        text: `This file "${fileName}" has an unsupported file type (${fileExt}). Supported formats are: PDF (.pdf), Word documents (.docx), and text files (.txt). The file is ${(file.size / 1024 / 1024).toFixed(2)} MB in size.`,
                        method: 'unsupported-type-fallback',
                        fallbackUsed: true
                    };
            }

            // Clean the text if extraction was successful
            if (!extractionResult.fallbackUsed && extractionResult.text) {
                extractionResult.text = this.cleanText(extractionResult.text);
            }

            // Validate extraction result
            if (!extractionResult.text || extractionResult.text.trim().length < 10) {
                console.warn(`Extraction yielded insufficient content, creating enhanced fallback`);
                extractionResult = {
                    text: `This file "${fileName}" (${fileExt.toUpperCase()}, ${(file.size / 1024 / 1024).toFixed(2)} MB) appears to contain no extractable text content or the content is too short. This may be because the file consists primarily of images, has complex formatting, or contains content that cannot be automatically extracted as text.`,
                    method: 'insufficient-content-fallback',
                    fallbackUsed: true
                };
            }

            const duration = (Date.now() - startTime) / 1000;
            console.log(`File extraction completed in ${duration.toFixed(2)}s`);
            console.log(`Final result - Method: ${extractionResult.method}, Content length: ${extractionResult.text.length} characters, Fallback used: ${extractionResult.fallbackUsed}`);

            return {
                text: extractionResult.text,
                title: fileName,
                contentType: `file-${fileExt.substring(1)}`,
                extractionMethod: extractionResult.method,
                fallbackUsed: extractionResult.fallbackUsed,
                metadata: {
                    fileName: fileName,
                    fileSize: file.size,
                    fileType: fileExt,
                    processingTime: duration
                }
            };

        } catch (error) {
            console.error(`Unexpected error during file extraction: ${error.message}`, error);

            // Return fallback content instead of throwing
            return {
                text: `An unexpected error occurred while processing the file "${fileName}": ${error.message}. The file is ${(file.size / 1024 / 1024).toFixed(2)} MB in size and has the extension ${fileExt}.`,
                title: fileName,
                contentType: `file-${fileExt.substring(1)}`,
                extractionMethod: 'error-fallback',
                fallbackUsed: true,
                metadata: {
                    fileName: fileName,
                    fileSize: file.size,
                    fileType: fileExt,
                    error: error.message
                }
            };
        }
    }

    /**
     * Try multiple methods to extract PDF content
     * @param {string} filePath - Path to the PDF file
     * @param {Buffer} pdfData - PDF file data as buffer
     * @returns {Promise<{text: string, method: string}>} - Extraction result
     */
    async tryMultiplePdfMethods(filePath, pdfData) {
        const strategies = [
            {
                name: 'standard-pdf-parse',
                execute: async () => {
                    console.log(`Attempting standard PDF parsing...`);
                    const result = await pdf(pdfData);
                    console.log(`Standard parsing: ${result.numpages} pages, ${result.text.length} characters`);
                    return result.text;
                }
            },
            {
                name: 'pdf-parse-with-options',
                execute: async () => {
                    console.log(`Attempting PDF parsing with custom options...`);
                    const result = await pdf(pdfData, {
                        max: 0, // No page limit
                        version: 'v2.0.550',
                        pagerender: function (pageData) {
                            return pageData.getTextContent().then(function (textContent) {
                                let lastY, text = '';
                                for (let item of textContent.items) {
                                    if (lastY != item.transform[5] || !lastY) {
                                        text += '\n';
                                    }
                                    text += item.str;
                                    lastY = item.transform[5];
                                }
                                return text;
                            });
                        }
                    });
                    console.log(`Custom parsing: ${result.numpages} pages, ${result.text.length} characters`);
                    return result.text;
                }
            },
            {
                name: 'page-by-page-extraction',
                execute: async () => {
                    console.log(`Attempting page-by-page PDF extraction...`);
                    const result = await pdf(pdfData, {
                        pagerender: function (pageData) {
                            return pageData.getTextContent().then(function (textContent) {
                                return textContent.items.map(item => item.str).join(' ');
                            });
                        }
                    });
                    console.log(`Page-by-page: ${result.numpages} pages, ${result.text.length} characters`);
                    return result.text;
                }
            },
            {
                name: 'simple-text-extraction',
                execute: async () => {
                    console.log(`Attempting simple text extraction...`);
                    const result = await pdf(pdfData, {
                        normalizeWhitespace: false,
                        disableCombineTextItems: false
                    });
                    console.log(`Simple extraction: ${result.numpages} pages, ${result.text.length} characters`);
                    return result.text;
                }
            }
        ];

        // Try each strategy
        for (const strategy of strategies) {
            try {
                const extractedText = await strategy.execute();

                if (extractedText && extractedText.trim().length > 50) {
                    console.log(`PDF text extracted successfully using ${strategy.name}: ${extractedText.length} characters`);
                    return {
                        text: extractedText,
                        method: strategy.name
                    };
                } else {
                    console.warn(`Strategy ${strategy.name} yielded insufficient content: ${extractedText ? extractedText.length : 0} characters`);
                }
            } catch (error) {
                console.warn(`Strategy ${strategy.name} failed: ${error.message}`);
            }
        }

        // If all strategies fail, create fallback content
        console.log(`All PDF extraction strategies failed, creating fallback content`);
        return await this.createPdfFallbackContent(filePath, pdfData);
    }

    /**
     * Create fallback content for PDFs when extraction fails
     * @param {string} filePath - Path to the PDF file
     * @param {Buffer} pdfData - PDF file data (can be null if file couldn't be read)
     * @returns {Promise<{text: string, method: string}>} - Fallback content
     */
    async createPdfFallbackContent(filePath, pdfData) {
        const fileName = path.basename(filePath);

        let fallbackText = `This PDF document "${fileName}"`;

        // Add file size if available
        if (pdfData) {
            const fileSizeMB = (pdfData.length / 1024 / 1024).toFixed(2);
            fallbackText += ` (${fileSizeMB} MB)`;
        }

        fallbackText += ` could not have its text content extracted automatically. `;

        // Try to get basic PDF info if data is available
        if (pdfData) {
            try {
                const basicInfo = await pdf(pdfData);
                if (basicInfo.numpages) {
                    fallbackText += `The document contains ${basicInfo.numpages} pages. `;
                }
                if (basicInfo.info && basicInfo.info.Title) {
                    fallbackText += `The document title appears to be: "${basicInfo.info.Title}". `;
                }
                if (basicInfo.info && basicInfo.info.Author) {
                    fallbackText += `The document author appears to be: ${basicInfo.info.Author}. `;
                }
            } catch (infoError) {
                console.warn(`Could not extract basic PDF info: ${infoError.message}`);
                fallbackText += `Basic document information could not be retrieved. `;
            }
        }

        fallbackText += `This may be because the PDF consists primarily of scanned images, has complex formatting, `;
        fallbackText += `is password-protected, corrupted, or contains content that cannot be automatically extracted as text. `;
        fallbackText += `Common reasons include: scanned documents without OCR, image-based PDFs, encrypted files, `;
        fallbackText += `or documents with unusual encoding. For better results, consider converting this PDF to text manually, `;
        fallbackText += `using OCR software, or ensuring the PDF contains selectable text rather than just images.`;

        return {
            text: fallbackText,
            method: 'pdf-metadata-fallback'
        };
    }

    /**
     * Validate extraction result and ensure it's substantial enough for processing
     * @param {string} text - Extracted text
     * @param {string} source - Source description (for logging)
     * @returns {boolean} - Whether the text is substantial enough
     */
    validateExtractionResult(text, source) {
        if (!text || typeof text !== 'string') {
            console.warn(`${source}: No text content extracted`);
            return false;
        }

        const trimmedText = text.trim();
        if (trimmedText.length < 10) {
            console.warn(`${source}: Extracted text too short (${trimmedText.length} characters)`);
            return false;
        }

        // Check for meaningful content (not just whitespace or repeated characters)
        const uniqueChars = new Set(trimmedText.toLowerCase().replace(/\s/g, '')).size;
        if (uniqueChars < 5) {
            console.warn(`${source}: Extracted text lacks diversity (${uniqueChars} unique characters)`);
            return false;
        }

        console.log(`${source}: Extraction validation passed (${trimmedText.length} characters, ${uniqueChars} unique chars)`);
        return true;
    }

    /**
     * Create generic fallback content for any extraction failure
     * @param {string} source - Source description (URL, filename, etc.)
     * @param {string} type - Content type (youtube-video, pdf, webpage, etc.)
     * @param {string} error - Error message
     * @param {Object} metadata - Additional metadata
     * @returns {string} - Fallback content
     */
    createGenericFallbackContent(source, type, error, metadata = {}) {
        let fallbackText = `Content extraction failed for ${type}: "${source}". `;

        if (error) {
            fallbackText += `Error: ${error}. `;
        }

        // Add type-specific information
        switch (type) {
            case 'youtube-video':
                fallbackText += `This appears to be a YouTube video that may not have captions enabled, `;
                fallbackText += `may be in a language that couldn't be detected, or may be restricted. `;
                if (metadata.videoId) {
                    fallbackText += `Video ID: ${metadata.videoId}. `;
                }
                break;

            case 'pdf':
                fallbackText += `This appears to be a PDF document that may consist of scanned images, `;
                fallbackText += `have complex formatting, or be password-protected. `;
                if (metadata.fileSize) {
                    fallbackText += `File size: ${(metadata.fileSize / 1024 / 1024).toFixed(2)} MB. `;
                }
                break;

            case 'webpage':
                fallbackText += `This appears to be a webpage that may be blocking automated access, `;
                fallbackText += `require authentication, or have content loaded dynamically. `;
                break;

            default:
                fallbackText += `This content type may not be fully supported or may have specific access requirements. `;
        }

        fallbackText += `While the original content couldn't be extracted, this information may still be useful for understanding what was attempted.`;

        return fallbackText;
    }

    /**
     * Clean up extracted text
     * @param {string} text - The text to clean
     * @returns {string} - The cleaned text
     */
    cleanText(text) {
        if (!text) return '';

        return text
            .replace(/\s+/g, ' ')           // Replace multiple spaces with a single space
            .replace(/\n+/g, '\n')          // Replace multiple newlines with a single newline
            .replace(/\t/g, ' ')            // Replace tabs with spaces
            .replace(/\r/g, '')             // Remove carriage returns
            .replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7F]/g, '') // Remove control characters
            .trim();                        // Remove leading/trailing whitespace
    }

    /**
     * Check if a URL is a YouTube URL
     * @param {string} url - The URL to check
     * @returns {boolean} - True if the URL is a YouTube URL
     */
    isYoutubeUrl(url) {
        return url.includes('youtube.com/watch') ||
            url.includes('youtu.be/') ||
            url.includes('youtube.com/embed/') ||
            url.includes('youtube.com/playlist') ||
            url.includes('youtube.com/live') ||
            url.includes('m.youtube.com/watch');
    }

    /**
     * Classify the type of YouTube URL
     * @param {string} url - The YouTube URL
     * @returns {string} - The URL type ('video', 'playlist', 'channel', 'unknown')
     */
    classifyYoutubeUrl(url) {
        // Check for playlist-only URLs (no video ID, just playlist)
        if (url.includes('youtube.com/playlist') && url.includes('list=') && !url.includes('v=')) {
            return 'playlist';
        }

        // Check for individual video (even with playlist parameters)
        if (url.includes('youtube.com/watch') && url.includes('v=')) {
            return 'video'; // Individual video, even if part of a playlist
        }

        if (url.includes('youtu.be/')) {
            return 'video'; // Short URL format is always individual video
        }

        if (url.includes('youtube.com/embed/')) {
            return 'video'; // Embed format is always individual video
        }

        if (url.includes('youtube.com/live/')) {
            return 'video'; // Live stream is treated as a video
        }

        // Check for channel URLs
        if (url.includes('youtube.com/channel/') || url.includes('youtube.com/c/') || url.includes('youtube.com/@')) {
            return 'channel';
        }

        return 'unknown';
    }

    /**
     * Extract the YouTube video ID from a URL, handling playlist parameters properly
     * @param {string} url - The YouTube URL
     * @returns {string|null} - The YouTube video ID or null if not found
     */
    extractYoutubeId(url) {
        console.log(`Extracting video ID from URL: ${url}`);

        if (!url || typeof url !== 'string') {
            console.error('Invalid URL provided: must be a non-empty string');
            return null;
        }

        // Normalize URL
        const normalizedUrl = url.trim().toLowerCase();

        // Check if it's a YouTube URL
        if (!this._isValidYouTubeUrl(normalizedUrl)) {
            console.error(`Not a valid YouTube URL: ${url}`);
            return null;
        }

        let videoId = null;

        try {
            // Comprehensive URL pattern matching
            const patterns = [
                // youtu.be format: https://youtu.be/VIDEO_ID?t=123
                {
                    regex: /(?:youtu\.be\/)([a-zA-Z0-9_-]{11})/,
                    name: 'youtu.be'
                },
                // youtube.com/watch format: https://www.youtube.com/watch?v=VIDEO_ID&list=PLAYLIST_ID
                {
                    regex: /(?:youtube\.com\/watch\?.*v=)([a-zA-Z0-9_-]{11})/,
                    name: 'youtube.com/watch'
                },
                // youtube.com/embed format: https://www.youtube.com/embed/VIDEO_ID
                {
                    regex: /(?:youtube\.com\/embed\/)([a-zA-Z0-9_-]{11})/,
                    name: 'youtube.com/embed'
                },
                // youtube.com/v format: https://www.youtube.com/v/VIDEO_ID
                {
                    regex: /(?:youtube\.com\/v\/)([a-zA-Z0-9_-]{11})/,
                    name: 'youtube.com/v'
                },
                // youtube.com/e format: https://www.youtube.com/e/VIDEO_ID
                {
                    regex: /(?:youtube\.com\/e\/)([a-zA-Z0-9_-]{11})/,
                    name: 'youtube.com/e'
                },
                // Mobile format: https://m.youtube.com/watch?v=VIDEO_ID
                {
                    regex: /(?:m\.youtube\.com\/watch\?.*v=)([a-zA-Z0-9_-]{11})/,
                    name: 'm.youtube.com/watch'
                },
                // Gaming format: https://gaming.youtube.com/watch?v=VIDEO_ID
                {
                    regex: /(?:gaming\.youtube\.com\/watch\?.*v=)([a-zA-Z0-9_-]{11})/,
                    name: 'gaming.youtube.com'
                },
                // YouTube Music format: https://music.youtube.com/watch?v=VIDEO_ID
                {
                    regex: /(?:music\.youtube\.com\/watch\?.*v=)([a-zA-Z0-9_-]{11})/,
                    name: 'music.youtube.com'
                },
                // YouTube Live format: https://www.youtube.com/live/VIDEO_ID
                {
                    regex: /(?:youtube\.com\/live\/)([a-zA-Z0-9_-]{11})/,
                    name: 'youtube.com/live'
                }
            ];

            // Try each pattern
            for (const pattern of patterns) {
                const match = url.match(pattern.regex);
                if (match && match[1]) {
                    videoId = match[1];
                    console.log(`Video ID extracted using ${pattern.name} pattern: ${videoId}`);
                    break;
                }
            }

            // Fallback: try URL parsing for query parameters
            if (!videoId) {
                try {
                    const urlObj = new URL(url);
                    const vParam = urlObj.searchParams.get('v');
                    if (vParam && this._isValidVideoId(vParam)) {
                        videoId = vParam;
                        console.log(`Video ID extracted from URL parameters: ${videoId}`);
                    }
                } catch (urlError) {
                    console.warn(`URL parsing failed: ${urlError.message}`);
                }
            }

            // Validate extracted video ID
            if (videoId && this._isValidVideoId(videoId)) {
                console.log(`Successfully extracted and validated video ID: ${videoId}`);
                return videoId;
            }

        } catch (error) {
            console.error(`Error parsing YouTube URL: ${error.message}`);
        }

        console.error(`Could not extract valid video ID from URL: ${url}`);
        return null;
    }

    /**
     * Check if URL is a valid YouTube URL
     * @param {string} url - URL to check
     * @returns {boolean} - True if valid YouTube URL
     * @private
     */
    _isValidYouTubeUrl(url) {
        const youtubeHosts = [
            'youtube.com',
            'www.youtube.com',
            'm.youtube.com',
            'gaming.youtube.com',
            'music.youtube.com',
            'youtu.be'
        ];

        return youtubeHosts.some(host => url.includes(host));
    }

    /**
     * Validate YouTube video ID format
     * @param {string} videoId - Video ID to validate
     * @returns {boolean} - True if valid video ID
     * @private
     */
    _isValidVideoId(videoId) {
        if (!videoId || typeof videoId !== 'string') {
            return false;
        }

        // YouTube video IDs are exactly 11 characters long
        if (videoId.length !== 11) {
            return false;
        }

        // Must contain only alphanumeric characters, hyphens, and underscores
        if (!/^[a-zA-Z0-9_-]+$/.test(videoId)) {
            return false;
        }

        // Should not be all the same character (likely invalid)
        if (/^(.)\1{10}$/.test(videoId)) {
            return false;
        }

        return true;
    }

    /**
     * Extract playlist ID from YouTube URL if present
     * @param {string} url - The YouTube URL
     * @returns {string|null} - The playlist ID or null if not found
     */
    extractYoutubePlaylistId(url) {
        try {
            const urlObj = new URL(url);
            const playlistId = urlObj.searchParams.get('list');

            if (playlistId && playlistId.length > 10) {
                console.log(`Found playlist ID: ${playlistId}`);
                return playlistId;
            }
        } catch (error) {
            console.warn(`Could not extract playlist ID: ${error.message}`);
        }

        return null;
    }
}

module.exports = new ContentExtractor();


---
File: /services/database.js
---

/**
 * Database service for SAWRON
 * Handles persistence of distillations using SQLite
 */
const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');
const Distillation = require('../models/distillation');

class Database {
    constructor() {
        this.dbPath = path.join(__dirname, '../data/sawron.db');
        this.ensureDbDirectory();
        this.db = new sqlite3.Database(this.dbPath);
        this.init();
    }

    ensureDbDirectory() {
        const dir = path.dirname(this.dbPath);
        if (!fs.existsSync(dir)) {
            fs.mkdirSync(dir, { recursive: true });
        }
    }

    init() {
        this.db.serialize(() => {
            // Create distillations table if it doesn't exist
            this.db.run(`
                CREATE TABLE IF NOT EXISTS summaries (
                    id TEXT PRIMARY KEY,
                    title TEXT,
                    content TEXT,
                    sourceUrl TEXT,
                    sourceType TEXT,
                    sourceFile TEXT,
                    status TEXT,
                    processingStep TEXT,
                    rawContent TEXT,
                    createdAt TEXT,
                    completedAt TEXT,
                    processingTime REAL,
                    elapsedTime REAL,
                    startTime TEXT,
                    distillingStartTime TEXT,
                    wordCount INTEGER,
                    error TEXT,
                    logs TEXT
                )
            `);

            // Add distillingStartTime column if it doesn't exist (for existing databases)
            this.db.run(`
                ALTER TABLE summaries ADD COLUMN distillingStartTime TEXT
            `, (err) => {
                // Ignore error if column already exists
                if (err && !err.message.includes('duplicate column name')) {
                    console.warn('Warning adding distillingStartTime column:', err.message);
                }
            });

            // Add queuePosition column if it doesn't exist (for existing databases)
            this.db.run(`
                ALTER TABLE summaries ADD COLUMN queuePosition INTEGER
            `, (err) => {
                // Ignore error if column already exists
                if (err && !err.message.includes('duplicate column name')) {
                    console.warn('Warning adding queuePosition column:', err.message);
                }
            });
        });
        // Database initialized successfully
    }

    async saveDistillation(distillation) {
        return new Promise((resolve, reject) => {
            console.log(`[DB] Saving distillation ${distillation.id} with status: ${distillation.status}`);
            const stmt = this.db.prepare(`
                INSERT OR REPLACE INTO summaries 
                (id, title, content, sourceUrl, sourceType, sourceFile, status, processingStep, rawContent,
                createdAt, completedAt, processingTime, elapsedTime, startTime, distillingStartTime, wordCount, error, logs, queuePosition)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            `);

            stmt.run(
                distillation.id,
                distillation.title,
                distillation.content,
                distillation.sourceUrl,
                distillation.sourceType,
                distillation.sourceFile ? JSON.stringify(distillation.sourceFile) : null,
                distillation.status,
                distillation.processingStep || '',
                distillation.rawContent || '',
                distillation.createdAt.toISOString(),
                distillation.completedAt ? distillation.completedAt.toISOString() : null,
                distillation.processingTime,
                distillation.elapsedTime || 0,
                distillation.startTime ? distillation.startTime.toISOString() : null,
                distillation.distillingStartTime ? distillation.distillingStartTime.toISOString() : null,
                distillation.wordCount,
                distillation.error,
                JSON.stringify(distillation.logs || []),
                distillation.queuePosition || null,
                function (err) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(distillation);
                    }
                }
            );

            stmt.finalize();
        });
    }

    async getDistillation(id) {
        return new Promise((resolve, reject) => {
            this.db.get('SELECT * FROM summaries WHERE id = ?', [id], (err, row) => {
                if (err) {
                    reject(err);
                } else if (!row) {
                    resolve(null);
                } else {
                    resolve(this.rowToDistillation(row));
                }
            });
        });
    }

    async getAllSummaries() {
        return new Promise((resolve, reject) => {
            // Always order by createdAt ASC to ensure consistent top-to-bottom processing order
            // This ensures that playlist videos process in the correct order (first video first)
            this.db.all('SELECT * FROM summaries ORDER BY createdAt ASC', (err, rows) => {
                if (err) {
                    reject(err);
                } else {
                    resolve(rows.map(row => this.rowToDistillation(row)));
                }
            });
        });
    }

    async deleteDistillation(id) {
        return new Promise((resolve, reject) => {
            this.db.run('DELETE FROM summaries WHERE id = ?', [id], function (err) {
                if (err) {
                    reject(err);
                } else {
                    resolve(this.changes > 0);
                }
            });
        });
    }

    async updateDistillationStatus(id, status, processingStep = null, error = null) {
        return new Promise(async (resolve, reject) => {
            try {
                console.log(`[DB] Updating status for ${id}: ${status}`);
                const updates = { status };

                if (status === 'completed') {
                    updates.completedAt = new Date().toISOString();
                }

                if (processingStep) {
                    updates.processingStep = processingStep;
                }

                if (error) {
                    updates.error = error;
                }

                // Update elapsed time and start time for distilling status
                const distillation = await this.getDistillation(id);
                if (status === 'distilling' && distillation && !distillation.distillingStartTime) {
                    // Set the distilling start time when status first changes to distilling
                    updates.distillingStartTime = new Date().toISOString();
                    updates.elapsedTime = 0; // Reset elapsed time
                } else if (distillation && distillation.distillingStartTime) {
                    // Calculate elapsed time from when distilling started
                    updates.elapsedTime = (new Date() - new Date(distillation.distillingStartTime)) / 1000;
                } else if (distillation && distillation.startTime && status !== 'distilling') {
                    // For non-distilling statuses, use original logic
                    updates.elapsedTime = (new Date() - distillation.startTime) / 1000;
                }

                const setClauses = Object.keys(updates).map(key => `${key} = ?`).join(', ');
                const values = [...Object.values(updates), id];

                this.db.run(`UPDATE summaries SET ${setClauses} WHERE id = ?`, values, function (err) {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(this.changes > 0);
                    }
                });
            } catch (error) {
                reject(error);
            }
        });
    }

    async updateDistillationContent(id, content, rawContent, processingTime, wordCount) {
        return new Promise(async (resolve, reject) => {
            try {
                // Get current distillation to calculate elapsed time
                const distillation = await this.getDistillation(id);
                const now = new Date();
                // Use distilling start time if available, otherwise fall back to start time
                const elapsedTime = distillation && distillation.distillingStartTime ?
                    (now - distillation.distillingStartTime) / 1000 :
                    (distillation && distillation.startTime ? (now - distillation.startTime) / 1000 : 0);

                this.db.run(
                    'UPDATE summaries SET content = ?, rawContent = ?, processingTime = ?, elapsedTime = ?, wordCount = ?, status = ?, processingStep = ?, completedAt = ? WHERE id = ?',
                    [content, rawContent, processingTime, elapsedTime, wordCount, 'completed', 'Distillation completed', now.toISOString(), id],
                    function (err) {
                        if (err) {
                            reject(err);
                        } else {
                            resolve(this.changes > 0);
                        }
                    }
                );
            } catch (error) {
                reject(error);
            }
        });
    }

    async searchSummaries(query) {
        return new Promise((resolve, reject) => {
            const searchTerm = `%${query}%`;
            this.db.all(
                'SELECT * FROM summaries WHERE title LIKE ? OR content LIKE ? ORDER BY createdAt ASC',
                [searchTerm, searchTerm],
                (err, rows) => {
                    if (err) {
                        reject(err);
                    } else {
                        resolve(rows.map(row => this.rowToDistillation(row)));
                    }
                }
            );
        });
    }

    rowToDistillation(row) {
        return new Distillation({
            id: row.id,
            title: row.title,
            content: row.content,
            sourceUrl: row.sourceUrl,
            sourceType: row.sourceType,
            sourceFile: row.sourceFile ? JSON.parse(row.sourceFile) : null,
            status: row.status,
            processingStep: row.processingStep,
            rawContent: row.rawContent,
            createdAt: new Date(row.createdAt),
            completedAt: row.completedAt ? new Date(row.completedAt) : null,
            processingTime: row.processingTime,
            elapsedTime: row.elapsedTime,
            startTime: row.startTime ? new Date(row.startTime) : null,
            distillingStartTime: row.distillingStartTime ? new Date(row.distillingStartTime) : null,
            wordCount: row.wordCount,
            error: row.error,
            logs: row.logs ? JSON.parse(row.logs) : [],
            queuePosition: row.queuePosition
        });
    }

    close() {
        this.db.close();
    }
}

module.exports = new Database();


---
File: /services/ollama.js
---

/**
 * Ollama service for SAWRON
 * Handles communication with the local Ollama instance
 */
const axios = require('axios');

class OllamaService {
    constructor() {
        this.baseUrl = 'http://localhost:11434/api';
        this.model = 'phi4-mini';
    }

    /**
     * Generate a distillation using the Ollama API
     * @param {string} text - The text to distill
     * @returns {Promise<string>} - The generated distillation
     */
    async generateSummary(text) {
        const prompt = this.formatPrompt(text);
        
        try {
            console.log(`Sending request to Ollama with ${text.length} characters`);
            console.log(`Using model: ${this.model}`);
            
            // Log the first 100 characters of the text
            console.log(`Text preview: ${text.substring(0, 100)}...`);
            
            const startTime = Date.now();
            console.log(`Ollama request started at: ${new Date().toISOString()}`);
            
            const response = await axios.post(`${this.baseUrl}/generate`, {
                model: this.model,
                prompt: prompt,
                stream: false,
                options: {
                    temperature: 0.1,
                    top_p: 0.9,
                    num_predict: 2048
                }
            });
            
            const duration = (Date.now() - startTime) / 1000;
            console.log(`Ollama request completed in ${duration.toFixed(2)}s`);
            
            // Log the first 100 characters of the response
            const distillationText = response.data.response;
            console.log(`Distillation preview: ${distillationText.substring(0, 100)}...`);
            console.log(`Distillation length: ${distillationText.length} characters`);
            
            return distillationText;
        } catch (error) {
            console.error('Error calling Ollama API:', error.message);
            if (error.response) {
                console.error('Response data:', error.response.data);
                console.error('Response status:', error.response.status);
            }
            throw new Error(`Failed to generate distillation: ${error.message}`);
        }
    }

    /**
     * Format the prompt for the Ollama API using the specified template
     * @param {string} text - The text to distill
     * @returns {string} - The formatted prompt
     */
    formatPrompt(text) {
        return `Analyze the text I provide below. Your task is to distill its core knowledge, removing all fluff and focusing only on the essential concepts. Your output should be a lesson, not a distillation. Present the information with the following strict structure and style:

Style and Tone:
Direct and Insightful: Begin immediately with the first key point. Do not use any introductory phrases like "Here are the insights" or other conversational filler.
Clear and Simple: Explain concepts using plain language. Avoid jargon, buzzwords, and overly complex terminology. The goal is to make complex ideas intuitive and accessible.
Confident and Educational: Write as an expert distilling knowledge for a capable learner. Your goal is to ensure the core ideas are not just listed, but are fully understood and remembered.

Output Format:
Organize your entire response as a numbered list. Each point in the list must follow this two-part structure precisely:

The Core Idea Sentence
Start with a single, memorable sentence that captures one complete, fundamental idea from the text. This sentence should be comprehensive and stand on its own as a key takeaway.
Following that sentence, write one or two detailed paragraphs to elaborate on this core idea. Deconstruct the concept, explain its implications, and provide the necessary context to eliminate any knowledge gaps. Use analogies or simple examples where they can aid understanding. The purpose of this section is to cement the idea, explaining not just what it is, but why it matters and how it works.

The Next Core Idea Sentence
This follows the same pattern as the first point—a single, impactful sentence distilling the next fundamental concept.
Again, follow up with one or two paragraphs of in-depth explanation. If the original text is missing crucial context, feel free to add it to ensure the concept is fully grasped. Connect this idea to previous points if it helps build a more cohesive mental model for the reader.

Continue this pattern for as many points as are necessary to cover all the essential knowledge in the document. Do not condense for the sake of brevity; distill for the sake of clarity and understanding.

Text to Analyze:
${text}`;
    }

    /**
     * Check if the Ollama service is available
     * @returns {Promise<boolean>} - True if the service is available
     */
    async checkAvailability() {
        try {
            const response = await axios.get(`${this.baseUrl}/tags`);
            const models = response.data.models || [];
            const hasModel = models.some(model => model.name === this.model);
            
            if (!hasModel) {
                console.warn(`Model ${this.model} not found. Available models:`, models.map(m => m.name));
            }
            
            return hasModel;
        } catch (error) {
            console.error('Ollama service not available:', error.message);
            return false;
        }
    }
}

module.exports = new OllamaService();


---
File: /services/ProcessingQueue.js
---

/**
 * Processing Queue Manager
 * Manages concurrent processing limits to avoid API rate limits
 */
class ProcessingQueue {
    constructor() {
        this.queue = [];
        this.activeProcessing = new Set();
        this.maxConcurrent = 1; // Default to 1 to avoid rate limits
        this.isProcessing = false;
    }

    /**
     * Set the maximum number of concurrent processing tasks
     * @param {number} limit - Maximum concurrent tasks (1-10)
     */
    setMaxConcurrent(limit) {
        this.maxConcurrent = Math.max(1, Math.min(10, limit));
        // Process any queued items if we increased the limit
        if (!this.isProcessing) {
            this.processQueue();
        }
    }

    /**
     * Add a processing task to the queue
     * @param {string} id - Unique identifier for the task
     * @param {Function} processingFunction - Async function to execute
     * @returns {Promise} - Promise that resolves when the task completes
     */
    async addToQueue(id, processingFunction) {
        return new Promise((resolve, reject) => {
            const task = {
                id,
                processingFunction,
                resolve,
                reject,
                addedAt: new Date()
            };

            this.queue.push(task);
            // Start processing if not already running
            if (!this.isProcessing) {
                this.processQueue();
            }
        });
    }

    /**
     * Process the queue
     */
    async processQueue() {
        if (this.isProcessing) return;
        
        this.isProcessing = true;

        // Process items in FIFO order (first in, first out) to maintain top-to-bottom processing
        while (this.queue.length > 0 && this.activeProcessing.size < this.maxConcurrent) {
            const task = this.queue.shift(); // Always take from the front of the queue
            
            this.activeProcessing.add(task.id);
            
            // Execute the task
            this.executeTask(task);
        }

        this.isProcessing = false;
    }

    /**
     * Execute a single task
     * @param {Object} task - Task object
     */
    async executeTask(task) {
        try {
            const result = await task.processingFunction();
            task.resolve(result);
        } catch (error) {
            task.reject(error);
        } finally {
            this.activeProcessing.delete(task.id);
            
            // Continue processing queue if there are more items
            if (this.queue.length > 0) {
                setTimeout(() => this.processQueue(), 100);
            }
        }
    }

    /**
     * Get queue status
     * @returns {Object} - Queue status information
     */
    getStatus() {
        return {
            queueLength: this.queue.length,
            activeProcessing: this.activeProcessing.size,
            maxConcurrent: this.maxConcurrent,
            isProcessing: this.isProcessing
        };
    }

    /**
     * Clear the queue (for emergency stops)
     */
    clearQueue() {
        // Reject all queued tasks
        this.queue.forEach(task => {
            task.reject(new Error('Processing queue cleared'));
        });
        
        this.queue = [];
    }
}

// Export singleton instance
module.exports = new ProcessingQueue();


---
File: /services/processor.js
---

/**
 * Processor service for SAWRON
 * Orchestrates the content extraction, distillation, and storage process
 */
const contentExtractor = require('./contentExtractor');
const ollamaService = require('./ollama');
const database = require('./database');
const Distillation = require('../models/distillation');
const AIProviderFactory = require('./ai/AIProviderFactory');
const AISettingsManager = require('./ai/AISettingsManager');
const processingQueue = require('./ProcessingQueue');
const path = require('path');
const fs = require('fs').promises;

class Processor {
    constructor() {
        this.aiSettingsManager = AISettingsManager.getInstance();
        this.initializeProcessingQueue();
        // Track active processes for cancellation
        this.activeProcesses = new Map(); // distillationId -> { cancelled: boolean, abortController: AbortController }
    }

    /**
     * Initialize processing queue with current settings
     */
    async initializeProcessingQueue() {
        try {
            const settings = this.aiSettingsManager.loadSettings();
            const concurrentLimit = settings.concurrentProcessing || 1;
            processingQueue.setMaxConcurrent(concurrentLimit);
        } catch (error) {
            processingQueue.setMaxConcurrent(1);
        }
    }

    /**
     * Get the current AI provider based on settings
     * @returns {Promise<AIProvider>} - Configured AI provider instance
     */
    async getCurrentAIProvider() {
        try {
            const settings = this.aiSettingsManager.loadSettings();
            const config = this.aiSettingsManager.getCurrentProviderConfig();
            return AIProviderFactory.createProvider(config);
        } catch (error) {
            // Fallback to Ollama with default settings
            return AIProviderFactory.createProvider({
                type: 'ollama',
                model: 'llama2',
                endpoint: 'http://localhost:11434'
            });
        }
    }

    /**
     * Check if a distillation process has been stopped or cancelled
     * @param {string} distillationId - The ID to check
     * @returns {Promise<boolean>} - True if the process has been stopped
     */
    async isProcessStopped(distillationId) {
        try {
            // First check our active processes tracking (fastest)
            const processInfo = this.activeProcesses.get(distillationId);
            if (processInfo && processInfo.cancelled) {
                console.log(`[${distillationId}] PROCESS CANCELLED - STOPPING IMMEDIATELY`);
                return true;
            }

            // Then check database status
            const distillation = await database.getDistillation(distillationId);
            const isStopped = distillation && distillation.status === 'stopped';

            if (isStopped) {
                console.log(`[${distillationId}] PROCESS STOPPED IN DATABASE - STOPPING IMMEDIATELY`);
                // Also mark as cancelled in our tracking
                if (processInfo) {
                    processInfo.cancelled = true;
                }
            }

            return isStopped;
        } catch (error) {
            console.error(`Error checking if process ${distillationId} is stopped:`, error);
            return false;
        }
    }

    /**
     * Throw an error if the process has been cancelled
     * @param {string} distillationId - The ID to check
     */
    async throwIfCancelled(distillationId) {
        if (await this.isProcessStopped(distillationId)) {
            throw new Error(`Process ${distillationId} was cancelled by user`);
        }
    }

    /**
     * Process a URL for distillation
     * @param {string} url - The URL to process
     * @returns {Promise<Distillation>} - The created distillation object
     */
    async processUrl(url) {
        // Start URL processing

        // Check if this is a YouTube playlist
        if (contentExtractor.isYoutubeUrl(url) && contentExtractor.classifyYoutubeUrl(url) === 'playlist') {
            return await this.processYoutubePlaylist(url);
        }

        // Create initial distillation record
        const distillation = new Distillation({
            title: 'Processing URL...',
            sourceUrl: url,
            sourceType: this.detectUrlType(url),
            status: 'pending',
            processingStep: 'Queued for processing'
        });

        // Add initial log with system information
        distillation.addLog(`🚀 Starting processing of URL: ${url}`);
        distillation.addLog(`📋 Process ID: ${distillation.id}`);
        distillation.addLog(`⏰ Started at: ${new Date().toISOString()}`);
        distillation.addLog(`🌐 User Agent: ${process.env.USER_AGENT || 'SAWRON/1.0'}`);

        // Save initial record to database
        await database.saveDistillation(distillation);

        // Start processing in background
        this.processInBackground(distillation.id, async () => {
            try {
                const startTime = Date.now();
                const distillationObj = await database.getDistillation(distillation.id);

                if (!distillationObj) {
                    throw new Error(`Distillation object not found for ID: ${distillation.id}`);
                }

                // Update status to initializing and set actual start time when background processing begins
                await database.updateDistillationStatus(
                    distillation.id,
                    'extracting',
                    'Extracting content from URL'
                );

                // Set the actual start time when processing begins (not when queued)
                distillationObj.startTime = new Date(startTime);
                await database.saveDistillation(distillationObj);

                distillationObj.addLog(`🔄 Background processing started`);
                distillationObj.addLog(`📊 Memory usage: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB`);

                // Check if process has been stopped
                if (await this.isProcessStopped(distillation.id)) {
                    console.log(`[${distillation.id}] Process stopped during initialization`);
                    return { success: false, stopped: true };
                }

                // Delay to ensure frontend can see the extracting status
                await new Promise(resolve => setTimeout(resolve, 2000));

                distillationObj.addLog(`🔍 Phase 1: Content Extraction`);
                distillationObj.addLog(`🌐 Target URL: ${url}`);
                distillationObj.addLog(`⏱️ Extraction timeout: 5 minutes`);
                // Status already set to 'extracting' by updateDistillationStatus above

                // Extracting content from URL

                // Extract content with timeout AND cancellation checking
                const extractionPromise = contentExtractor.extractFromUrl(url);
                const timeoutPromise = new Promise((_, reject) =>
                    setTimeout(() => reject(new Error('Content extraction timed out after 5 minutes')), 5 * 60 * 1000)
                );

                // Add periodic cancellation checking during extraction
                const cancellationChecker = setInterval(async () => {
                    if (await this.isProcessStopped(distillation.id)) {
                        console.log(`[${distillation.id}] CANCELLATION DETECTED DURING EXTRACTION - THROWING ERROR`);
                        clearInterval(cancellationChecker);
                        throw new Error(`Process ${distillation.id} was cancelled by user`);
                    }
                }, 500); // Check every 500ms

                let extractionResult;
                try {
                    extractionResult = await Promise.race([extractionPromise, timeoutPromise]);
                    clearInterval(cancellationChecker);
                } catch (error) {
                    clearInterval(cancellationChecker);
                    throw error;
                }

                // Check if process has been stopped immediately after extraction
                if (await this.isProcessStopped(distillation.id)) {
                    console.log(`[${distillation.id}] Process stopped during content extraction`);
                    return { success: false, stopped: true };
                }

                const { text, title, contentType, extractionMethod, fallbackUsed, metadata } = extractionResult;

                const extractionTime = Date.now() - startTime;
                const updatedDistillation = await database.getDistillation(distillation.id);

                updatedDistillation.addLog(`✅ Content extraction completed in ${(extractionTime / 1000).toFixed(2)}s`);
                updatedDistillation.addLog(`📄 Title: "${title}"`);
                updatedDistillation.addLog(`📝 Content length: ${text.length.toLocaleString()} characters`);
                updatedDistillation.addLog(`🔧 Extraction method: ${extractionMethod}`);
                updatedDistillation.addLog(`📋 Content type: ${contentType}`);
                updatedDistillation.addLog(`🔄 Fallback used: ${fallbackUsed ? 'Yes' : 'No'}`);

                if (metadata) {
                    if (metadata.duration) updatedDistillation.addLog(`⏱️ Video duration: ${metadata.duration}`);
                    if (metadata.viewCount) updatedDistillation.addLog(`👁️ View count: ${metadata.viewCount.toLocaleString()}`);
                    if (metadata.author) updatedDistillation.addLog(`👤 Author: ${metadata.author}`);
                    if (metadata.publishDate) updatedDistillation.addLog(`📅 Published: ${metadata.publishDate}`);
                }

                await database.saveDistillation(updatedDistillation);

                // Content extracted successfully

                // Check if process has been stopped after extraction
                if (await this.isProcessStopped(distillation.id)) {
                    console.log(`[${distillation.id}] Process stopped after extraction`);
                    return { success: false, stopped: true };
                }

                // Delay to ensure frontend can see the extracting status
                await new Promise(resolve => setTimeout(resolve, 3000));

                // Update status to distilling
                await database.updateDistillationStatus(
                    distillation.id,
                    'distilling',
                    'Generating distillation with AI provider'
                );
                // Delay to ensure frontend can see the distilling status
                await new Promise(resolve => setTimeout(resolve, 2000));

                // Store raw content and enhanced extraction metadata
                distillationObj.rawContent = text;
                distillationObj.title = title;

                distillationObj.addLog(`🤖 Phase 2: AI Distillation`);
                distillationObj.addLog(`📊 Text preprocessing started`);

                // Get AI provider info for logging
                const aiProvider = await this.getCurrentAIProvider();
                distillationObj.addLog(`🧠 AI Provider: ${aiProvider.name}`);
                distillationObj.addLog(`🎯 Model: ${aiProvider.model}`);
                distillationObj.addLog(`🔗 Endpoint: ${aiProvider.endpoint || 'Default'}`);

                distillationObj.extractionMetadata = {
                    contentType,
                    extractionMethod,
                    fallbackUsed,
                    ...metadata
                };
                // Status already set to 'distilling' by updateDistillationStatus above

                // Check if process has been stopped before AI distillation
                await this.throwIfCancelled(distillation.id);

                // Add periodic cancellation checking during AI distillation
                const aiCancellationChecker = setInterval(async () => {
                    if (await this.isProcessStopped(distillation.id)) {
                        console.log(`[${distillation.id}] CANCELLATION DETECTED DURING AI DISTILLATION - THROWING ERROR`);
                        clearInterval(aiCancellationChecker);
                        throw new Error(`Process ${distillation.id} was cancelled by user`);
                    }
                }, 500); // Check every 500ms

                let distillationContent;
                try {
                    // Add timeout wrapper for AI generation
                    const aiGenerationPromise = aiProvider.generateSummary(text);
                    const timeoutPromise = new Promise((_, reject) =>
                        setTimeout(() => reject(new Error('AI distillation timed out after 10 minutes')), 10 * 60 * 1000)
                    );

                    distillationContent = await Promise.race([aiGenerationPromise, timeoutPromise]);
                    clearInterval(aiCancellationChecker);

                    // Validate that we got actual content
                    if (!distillationContent || typeof distillationContent !== 'string' || distillationContent.trim().length < 10) {
                        throw new Error('AI provider returned empty or invalid content');
                    }

                    distillationObj.addLog(`✅ AI distillation completed successfully`);
                    distillationObj.addLog(`📝 Generated content length: ${distillationContent.length} characters`);

                } catch (error) {
                    clearInterval(aiCancellationChecker);

                    // Enhanced error logging for AI failures
                    distillationObj.addLog(`❌ AI distillation failed: ${error.message}`, 'error');

                    if (error.message.includes('timeout')) {
                        distillationObj.addLog(`⏰ AI processing exceeded 10-minute timeout`, 'error');
                    } else if (error.message.includes('API key')) {
                        distillationObj.addLog(`🔑 API key issue - check AI provider configuration`, 'error');
                    } else if (error.message.includes('rate limit')) {
                        distillationObj.addLog(`🚦 API rate limit exceeded - try again later`, 'error');
                    }

                    await database.saveDistillation(distillationObj);
                    throw error;
                }

                // Check if process has been stopped after AI distillation
                await this.throwIfCancelled(distillation.id);

                // Calculate processing time and word count
                const processingTime = (Date.now() - startTime) / 1000;
                const wordCount = distillationContent.split(/\s+/).length;

                console.log(`[${distillation.id}] Processing completed in ${processingTime.toFixed(2)}s. Word count: ${wordCount}`);

                // Update distillation in database
                await database.updateDistillationContent(
                    distillation.id,
                    distillationContent,
                    text,
                    processingTime,
                    wordCount
                );

                // Update title
                await this.updateDistillationTitle(distillation.id, title);

                // Add final completion logs
                const completedDistillation = await database.getDistillation(distillation.id);

                if (completedDistillation) {
                    completedDistillation.addLog(`✅ Processing completed successfully`);
                    completedDistillation.addLog(`📊 Final statistics:`);
                    completedDistillation.addLog(`   • Original content: ${text.length.toLocaleString()} chars`);
                    completedDistillation.addLog(`   • Distilled content: ${distillationContent.length.toLocaleString()} chars`);
                    completedDistillation.addLog(`   • Word count: ${wordCount.toLocaleString()} words`);
                    completedDistillation.addLog(`   • Processing time: ${processingTime.toFixed(2)}s`);
                    completedDistillation.addLog(`   • Compression: ${((1 - distillationContent.length / text.length) * 100).toFixed(1)}%`);
                    completedDistillation.addLog(`🎯 Ready for review and export`);
                    await database.saveDistillation(completedDistillation);
                }

                return { success: true };
            } catch (error) {
                console.error(`[${distillation.id}] Error processing URL ${url}:`, error);

                // Add detailed error logging
                const errorDistillation = await database.getDistillation(distillation.id);
                if (errorDistillation) {
                    errorDistillation.addLog(`❌ Processing failed with error`, 'error');
                    errorDistillation.addLog(`🔍 Error type: ${error.constructor.name}`, 'error');
                    errorDistillation.addLog(`📝 Error message: ${error.message}`, 'error');

                    // Calculate processing time if startTime is available
                    const processingTime = errorDistillation.startTime ?
                        ((Date.now() - new Date(errorDistillation.startTime).getTime()) / 1000).toFixed(2) :
                        'unknown';
                    errorDistillation.addLog(`📊 Processing time before error: ${processingTime}s`, 'error');

                    if (error.stack) {
                        const stackLines = error.stack.split('\n').slice(0, 3);
                        errorDistillation.addLog(`🔧 Stack trace: ${stackLines.join(' → ')}`, 'error');
                    }

                    await database.saveDistillation(errorDistillation);
                }

                await database.updateDistillationStatus(
                    distillation.id,
                    'error',
                    `Error: ${error.message}`,
                    error.message
                );
                return { success: false, error: error.message };
            }
        });

        return distillation;
    }

    /**
     * Process a YouTube playlist by extracting individual videos and processing each one
     * @param {string} playlistUrl - The YouTube playlist URL
     * @returns {Promise<Distillation>} - The created distillation object for tracking
     */
    async processYoutubePlaylist(playlistUrl) {
        console.log(`Processing YouTube playlist: ${playlistUrl}`);

        // Create a tracking distillation for the playlist processing
        const trackingDistillation = new Distillation({
            title: 'Processing YouTube Playlist...',
            sourceUrl: playlistUrl,
            sourceType: 'youtube',
            status: 'pending',
            processingStep: 'Queued for processing'
        });

        trackingDistillation.addLog(`Starting playlist processing: ${playlistUrl}`);
        await database.saveDistillation(trackingDistillation);

        // Start processing in background
        this.processInBackground(trackingDistillation.id, async () => {
            try {
                // Update status to initializing when background processing starts
                await database.updateDistillationStatus(
                    trackingDistillation.id,
                    'extracting',
                    'Extracting video URLs from playlist'
                );

                // Update status to extracting
                await database.updateDistillationStatus(
                    trackingDistillation.id,
                    'extracting',
                    'Extracting video URLs from playlist'
                );

                // Extract playlist videos using a simple approach
                const videoUrls = await this.extractPlaylistVideos(playlistUrl);

                if (!videoUrls || videoUrls.length === 0) {
                    throw new Error('No videos found in playlist. The playlist may be private or empty.');
                }

                console.log(`[${trackingDistillation.id}] Found ${videoUrls.length} videos in playlist`);

                // Update status
                await database.updateDistillationStatus(
                    trackingDistillation.id,
                    'distilling',
                    `Processing ${videoUrls.length} videos from playlist`
                );

                // Process each video individually with proper ordering
                const processedVideos = [];
                for (let i = 0; i < videoUrls.length; i++) {
                    const videoUrl = videoUrls[i];
                    console.log(`[${trackingDistillation.id}] Processing video ${i + 1}/${videoUrls.length}: ${videoUrl}`);

                    try {
                        // Create individual video distillation
                        const videoDistillation = await this.processUrl(videoUrl);
                        processedVideos.push(videoDistillation);

                        // Update progress
                        await database.updateDistillationStatus(
                            trackingDistillation.id,
                            'distilling',
                            `Processed ${i + 1}/${videoUrls.length} videos from playlist`
                        );

                        // Add a small delay to ensure proper timestamp ordering
                        // This ensures that videos are processed in the correct order
                        if (i < videoUrls.length - 1) {
                            await new Promise(resolve => setTimeout(resolve, 100));
                        }
                    } catch (error) {
                        console.error(`[${trackingDistillation.id}] Error processing video ${videoUrl}:`, error);
                        // Continue with other videos even if one fails
                    }
                }

                // Delete the tracking distillation since all individual videos are now processed
                await database.deleteDistillation(trackingDistillation.id);
                console.log(`[${trackingDistillation.id}] Playlist processing completed and tracking distillation deleted. Successfully processed ${processedVideos.length} out of ${videoUrls.length} videos.`);

                return { success: true, processedVideos: processedVideos.length };
            } catch (error) {
                console.error(`[${trackingDistillation.id}] Error processing playlist ${playlistUrl}:`, error);
                await database.updateDistillationStatus(
                    trackingDistillation.id,
                    'error',
                    `Error: ${error.message}`,
                    error.message
                );
                return { success: false, error: error.message };
            }
        });

        return trackingDistillation;
    }

    /**
     * Extract video URLs from a YouTube playlist
     * @param {string} playlistUrl - The playlist URL
     * @returns {Promise<string[]>} - Array of video URLs
     */
    async extractPlaylistVideos(playlistUrl) {
        try {
            console.log(`Extracting videos from playlist: ${playlistUrl}`);

            // Extract playlist ID
            const playlistId = contentExtractor.extractYoutubePlaylistId(playlistUrl);
            if (!playlistId) {
                throw new Error('Could not extract playlist ID from URL');
            }

            // Extract playlist videos using direct HTTP request

            // Try to get the playlist page to extract video IDs
            const axios = require('axios');

            try {
                const response = await axios.get(`https://www.youtube.com/playlist?list=${playlistId}`, {
                    headers: {
                        'User-Agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36'
                    },
                    timeout: 30000
                });

                const html = response.data;

                // Check for private playlist indicators
                if (html.includes('This playlist is private') ||
                    html.includes('Private playlist') ||
                    html.includes('"isPrivate":true') ||
                    html.includes('playlist-header-banner-private')) {
                    throw new Error('This YouTube playlist is private, cannot access the videos.');
                }

                // More robust video ID extraction
                const videoIdMatches = html.match(/"videoId":"([a-zA-Z0-9_-]{11})"/g) ||
                    html.match(/watch\?v=([a-zA-Z0-9_-]{11})/g);

                if (!videoIdMatches || videoIdMatches.length === 0) {
                    // Try alternative extraction methods
                    const altMatches = html.match(/\/watch\?v=([a-zA-Z0-9_-]{11})/g);
                    if (!altMatches || altMatches.length === 0) {
                        throw new Error('This YouTube playlist is private, cannot access the videos.');
                    }

                    // Process alternative matches
                    const videoIds = [...new Set(altMatches.map(match =>
                        match.replace('/watch?v=', '')
                    ))];

                    const videoUrls = videoIds.map(id => `https://www.youtube.com/watch?v=${id}`);
                    console.log(`Successfully extracted ${videoUrls.length} unique videos from playlist (alternative method)`);
                    return videoUrls;
                }

                // Process standard matches
                const videoIds = [...new Set(videoIdMatches.map(match => {
                    if (match.includes('"videoId":"')) {
                        return match.replace('"videoId":"', '').replace('"', '');
                    } else {
                        return match.replace('watch?v=', '');
                    }
                }))];

                const videoUrls = videoIds.map(id => `https://www.youtube.com/watch?v=${id}`);

                console.log(`Successfully extracted ${videoUrls.length} unique videos from playlist`);
                return videoUrls;

            } catch (axiosError) {
                if (axiosError.response && axiosError.response.status === 404) {
                    throw new Error('This YouTube playlist is unavailable or does not exist.');
                }
                throw axiosError;
            }

        } catch (error) {
            console.error('Error extracting playlist videos:', error);

            // Handle specific errors
            if (error.message.includes('private') || error.message.includes('Private')) {
                throw new Error('This YouTube playlist is private, cannot access the videos.');
            }

            if (error.message.includes('not found') || error.message.includes('404') || error.message.includes('unavailable')) {
                throw new Error('This YouTube playlist is unavailable or does not exist.');
            }

            if (error.message.includes('empty') || error.message.includes('no videos')) {
                throw new Error('This YouTube playlist is empty.');
            }

            // Generic error
            throw new Error(`Failed to extract playlist videos: ${error.message}`);
        }
    }

    /**
     * Process a file for distillation
     * @param {Object} file - The uploaded file object
     * @returns {Promise<Distillation>} - The created distillation object
     */
    async processFile(file) {
        console.log(`Starting file processing: ${file.originalname} (${file.size} bytes)`);

        // Create initial distillation record
        const distillation = new Distillation({
            title: `Processing ${file.originalname}...`,
            sourceType: 'file',
            sourceFile: {
                name: file.originalname,
                type: file.mimetype,
                size: file.size
            },
            status: 'pending',
            processingStep: 'Queued for processing'
        });

        // Add initial log with file information
        distillation.addLog(`🚀 Starting processing of file: ${file.originalname}`);
        distillation.addLog(`📋 Process ID: ${distillation.id}`);
        distillation.addLog(`⏰ Started at: ${new Date().toISOString()}`);
        distillation.addLog(`📄 File details:`);
        distillation.addLog(`   • Name: ${file.originalname}`);
        distillation.addLog(`   • Size: ${(file.size / 1024 / 1024).toFixed(2)} MB`);
        distillation.addLog(`   • Type: ${file.mimetype}`);

        // Save initial record to database
        await database.saveDistillation(distillation);

        // Start processing in background
        this.processInBackground(distillation.id, async () => {
            try {
                const startTime = Date.now();
                const distillationObj = await database.getDistillation(distillation.id);

                if (!distillationObj) {
                    throw new Error(`Distillation object not found for ID: ${distillation.id}`);
                }

                // Update status to initializing when background processing starts
                await database.updateDistillationStatus(
                    distillation.id,
                    'extracting',
                    `Extracting content from ${file.originalname}`
                );

                // Set the actual start time when processing begins (not when queued)
                distillationObj.startTime = new Date(startTime);
                await database.saveDistillation(distillationObj);

                distillationObj.addLog(`🔄 Background processing started`);
                distillationObj.addLog(`📊 Memory usage: ${Math.round(process.memoryUsage().heapUsed / 1024 / 1024)}MB`);

                // Check if process has been stopped
                if (await this.isProcessStopped(distillation.id)) {
                    console.log(`[${distillation.id}] Process stopped during initialization`);
                    return { success: false, stopped: true };
                }

                // Delay to ensure frontend can see the extracting status
                await new Promise(resolve => setTimeout(resolve, 2000));

                distillationObj.addLog(`🔍 Phase 1: Content Extraction`);
                distillationObj.addLog(`📁 Processing file: ${file.originalname}`);
                distillationObj.addLog(`⏱️ Extraction timeout: 5 minutes`);
                // Status already set to 'extracting' by updateDistillationStatus above

                console.log(`[${distillation.id}] Extracting content from file: ${file.originalname}`);

                // Extract content with timeout AND cancellation checking
                const extractionPromise = contentExtractor.extractFromFile(file);
                const timeoutPromise = new Promise((_, reject) =>
                    setTimeout(() => reject(new Error('File extraction timed out after 5 minutes')), 5 * 60 * 1000)
                );

                // Add periodic cancellation checking during file extraction
                const fileCancellationChecker = setInterval(async () => {
                    if (await this.isProcessStopped(distillation.id)) {
                        console.log(`[${distillation.id}] CANCELLATION DETECTED DURING FILE EXTRACTION - THROWING ERROR`);
                        clearInterval(fileCancellationChecker);
                        throw new Error(`Process ${distillation.id} was cancelled by user`);
                    }
                }, 500); // Check every 500ms

                let extractionResult;
                try {
                    extractionResult = await Promise.race([extractionPromise, timeoutPromise]);
                    clearInterval(fileCancellationChecker);
                } catch (error) {
                    clearInterval(fileCancellationChecker);
                    throw error;
                }

                // Check if process has been stopped immediately after file extraction
                if (await this.isProcessStopped(distillation.id)) {
                    console.log(`[${distillation.id}] Process stopped during file extraction`);
                    return { success: false, stopped: true };
                }

                const { text, title, contentType, extractionMethod, fallbackUsed, metadata } = extractionResult;

                console.log(`[${distillation.id}] File content extracted successfully. Content length: ${text.length} chars`);
                console.log(`[${distillation.id}] Extraction details - Method: ${extractionMethod}, Type: ${contentType}, Fallback used: ${fallbackUsed}`);

                // Check if process has been stopped after extraction
                if (await this.isProcessStopped(distillation.id)) {
                    console.log(`[${distillation.id}] Process stopped after extraction`);
                    return { success: false, stopped: true };
                }

                // Delay to ensure frontend can see the extracting status
                await new Promise(resolve => setTimeout(resolve, 3000));

                // Update status to distilling
                await database.updateDistillationStatus(
                    distillation.id,
                    'distilling',
                    'Generating distillation with AI provider'
                );

                // Delay to ensure frontend can see the distilling status
                await new Promise(resolve => setTimeout(resolve, 2000));

                // Store raw content and enhanced extraction metadata
                distillationObj.rawContent = text;
                if (title !== distillation.title) {
                    distillationObj.title = title;
                }
                distillationObj.extractionMetadata = {
                    contentType,
                    extractionMethod,
                    fallbackUsed,
                    ...metadata
                };
                // Status already set to 'distilling' by updateDistillationStatus above

                console.log(`[${distillation.id}] Starting distillation with AI provider`);

                // Check if process has been stopped before AI distillation
                await this.throwIfCancelled(distillation.id);

                // Get current AI provider and generate distillation
                const aiProvider = await this.getCurrentAIProvider();

                // Add periodic cancellation checking during AI distillation
                const fileAiCancellationChecker = setInterval(async () => {
                    if (await this.isProcessStopped(distillation.id)) {
                        console.log(`[${distillation.id}] CANCELLATION DETECTED DURING FILE AI DISTILLATION - THROWING ERROR`);
                        clearInterval(fileAiCancellationChecker);
                        throw new Error(`Process ${distillation.id} was cancelled by user`);
                    }
                }, 500); // Check every 500ms

                let distillationContent;
                try {
                    distillationContent = await aiProvider.generateSummary(text);
                    clearInterval(fileAiCancellationChecker);
                } catch (error) {
                    clearInterval(fileAiCancellationChecker);
                    throw error;
                }

                // Check if process has been stopped after AI distillation
                await this.throwIfCancelled(distillation.id);

                console.log(`[${distillation.id}] Distillation generated successfully. Length: ${distillationContent.length} chars`);

                // Calculate processing time and word count
                const processingTime = (Date.now() - startTime) / 1000;
                const wordCount = distillationContent.split(/\s+/).length;

                console.log(`[${distillation.id}] Processing completed in ${processingTime.toFixed(2)}s. Word count: ${wordCount}`);

                // Update distillation in database
                await database.updateDistillationContent(
                    distillation.id,
                    distillationContent,
                    text,
                    processingTime,
                    wordCount
                );

                // Update title if needed
                if (title !== distillation.title) {
                    await this.updateDistillationTitle(distillation.id, title);
                }

                // Clean up temporary file
                try {
                    await fs.unlink(file.path);
                    console.log(`[${distillation.id}] Temporary file deleted: ${file.path}`);
                } catch (err) {
                    console.warn(`[${distillation.id}] Failed to delete temporary file:`, err);
                }

                return { success: true };
            } catch (error) {
                console.error(`[${distillation.id}] Error processing file ${file.originalname}:`, error);

                // Add detailed error logging
                const errorDistillation = await database.getDistillation(distillation.id);
                if (errorDistillation) {
                    errorDistillation.addLog(`❌ File processing failed with error`, 'error');
                    errorDistillation.addLog(`🔍 Error type: ${error.constructor.name}`, 'error');
                    errorDistillation.addLog(`📝 Error message: ${error.message}`, 'error');
                    errorDistillation.addLog(`📊 Processing time before error: ${((Date.now() - startTime) / 1000).toFixed(2)}s`, 'error');
                    errorDistillation.addLog(`📁 File: ${file.originalname} (${(file.size / 1024 / 1024).toFixed(2)} MB)`, 'error');

                    if (error.stack) {
                        const stackLines = error.stack.split('\n').slice(0, 3);
                        errorDistillation.addLog(`🔧 Stack trace: ${stackLines.join(' → ')}`, 'error');
                    }

                    await database.saveDistillation(errorDistillation);
                }

                await database.updateDistillationStatus(
                    distillation.id,
                    'error',
                    `Error: ${error.message}`,
                    error.message
                );

                // Clean up temporary file even on error
                try {
                    await fs.unlink(file.path);
                    console.log(`[${distillation.id}] Temporary file deleted after error: ${file.path}`);

                    if (errorDistillation) {
                        errorDistillation.addLog(`🧹 Temporary file cleaned up: ${file.path}`);
                        await database.saveDistillation(errorDistillation);
                    }
                } catch (err) {
                    console.warn(`[${distillation.id}] Failed to delete temporary file:`, err);
                    if (errorDistillation) {
                        errorDistillation.addLog(`⚠️ Failed to clean up temporary file: ${err.message}`, 'warn');
                        await database.saveDistillation(errorDistillation);
                    }
                }

                return { success: false, error: error.message };
            }
        });

        return distillation;
    }

    /**
     * Retry file processing for a failed distillation
     * @param {string} originalId - The ID of the original failed distillation
     * @param {Object} mockFile - Mock file object with metadata
     * @param {string} rawContent - The raw content to process
     * @returns {Promise<Distillation>} - The new distillation object
     */
    async retryFileProcessing(originalId, mockFile, rawContent) {
        console.log(`Retrying file processing for distillation ${originalId}: ${mockFile.originalname}`);

        // Create a new distillation record for the retry
        const distillation = new Distillation({
            title: `Retrying ${mockFile.originalname}...`,
            sourceType: 'file',
            sourceFile: {
                name: mockFile.originalname,
                type: mockFile.mimetype,
                size: mockFile.size
            },
            status: 'pending',
            processingStep: 'Queued for retry processing',
            startTime: new Date()
        });

        // Add initial log
        distillation.addLog(`🔄 Retrying processing of file: ${mockFile.originalname}`);
        distillation.addLog(`📋 Retry Process ID: ${distillation.id}`);
        distillation.addLog(`📋 Original Process ID: ${originalId}`);
        distillation.addLog(`⏰ Retry started at: ${new Date().toISOString()}`);

        // Save initial record to database
        await database.saveDistillation(distillation);

        // Start processing in background
        this.processInBackground(distillation.id, async () => {
            try {
                const startTime = Date.now();

                // Update status to initializing when background processing starts
                await database.updateDistillationStatus(
                    distillation.id,
                    'distilling',
                    'Generating distillation with AI provider'
                );

                const distillationObj = await database.getDistillation(distillation.id);

                if (!distillationObj) {
                    throw new Error(`Distillation object not found for ID: ${distillation.id}`);
                }

                distillationObj.startTime = new Date(startTime);
                await database.saveDistillation(distillationObj);

                // Update status to distilling (skip extraction since we have raw content)
                await database.updateDistillationStatus(
                    distillation.id,
                    'distilling',
                    'Generating distillation with AI provider'
                );

                distillationObj.addLog(`🔄 Using existing raw content from original processing`);
                distillationObj.addLog(`📝 Content length: ${rawContent.length.toLocaleString()} characters`);
                distillationObj.addLog(`🤖 Phase 2: AI Distillation (Retry)`);

                // Store raw content
                distillationObj.rawContent = rawContent;
                distillationObj.title = mockFile.originalname;

                // Get AI provider info for logging
                const aiProvider = await this.getCurrentAIProvider();
                distillationObj.addLog(`🧠 AI Provider: ${aiProvider.name}`);
                distillationObj.addLog(`🎯 Model: ${aiProvider.model}`);
                distillationObj.addLog(`🔗 Endpoint: ${aiProvider.endpoint || 'Default'}`);

                // Status already set to 'distilling' by updateDistillationStatus above

                console.log(`[${distillation.id}] Starting distillation with AI provider (retry)`);

                // Generate distillation
                const distillationContent = await aiProvider.generateSummary(rawContent);

                console.log(`[${distillation.id}] Distillation generated successfully (retry). Length: ${distillationContent.length} chars`);

                // Calculate processing time and word count
                const processingTime = (Date.now() - startTime) / 1000;
                const wordCount = distillationContent.split(/\s+/).length;

                console.log(`[${distillation.id}] Retry processing completed in ${processingTime.toFixed(2)}s. Word count: ${wordCount}`);

                // Update distillation in database
                await database.updateDistillationContent(
                    distillation.id,
                    distillationContent,
                    rawContent,
                    processingTime,
                    wordCount
                );

                // Update title
                await this.updateDistillationTitle(distillation.id, mockFile.originalname);

                // Add completion logs
                const completedDistillation = await database.getDistillation(distillation.id);

                if (completedDistillation) {
                    completedDistillation.addLog(`✅ Retry processing completed successfully`);
                    completedDistillation.addLog(`📊 Final statistics:`);
                    completedDistillation.addLog(`   • Original content: ${rawContent.length.toLocaleString()} chars`);
                    completedDistillation.addLog(`   • Distilled content: ${distillationContent.length.toLocaleString()} chars`);
                    completedDistillation.addLog(`   • Word count: ${wordCount.toLocaleString()} words`);
                    completedDistillation.addLog(`   • Processing time: ${processingTime.toFixed(2)}s`);
                    completedDistillation.addLog(`   • Compression: ${((1 - distillationContent.length / rawContent.length) * 100).toFixed(1)}%`);
                    completedDistillation.addLog(`🎯 Retry completed successfully`);
                    await database.saveDistillation(completedDistillation);
                }

                return { success: true };
            } catch (error) {
                console.error(`[${distillation.id}] Error in retry processing:`, error);

                // Add detailed error logging
                const errorDistillation = await database.getDistillation(distillation.id);
                if (errorDistillation) {
                    errorDistillation.addLog(`❌ Retry processing failed with error`, 'error');
                    errorDistillation.addLog(`🔍 Error type: ${error.constructor.name}`, 'error');
                    errorDistillation.addLog(`📝 Error message: ${error.message}`, 'error');
                    errorDistillation.addLog(`📊 Processing time before error: ${((Date.now() - startTime) / 1000).toFixed(2)}s`, 'error');

                    if (error.stack) {
                        const stackLines = error.stack.split('\n').slice(0, 3);
                        errorDistillation.addLog(`🔧 Stack trace: ${stackLines.join(' → ')}`, 'error');
                    }

                    await database.saveDistillation(errorDistillation);
                }

                await database.updateDistillationStatus(
                    distillation.id,
                    'error',
                    `Retry failed: ${error.message}`,
                    error.message
                );

                return { success: false, error: error.message };
            }
        });

        return distillation;
    }

    /**
     * Process a task in the background
     * @param {string} distillationId - The ID of the distillation to process
     * @param {Function} processFn - The function to execute
     */
    async processInBackground(distillationId, processFn) {
        // Use the processing queue to manage concurrent processing
        try {
            await processingQueue.addToQueue(distillationId, async () => {
                try {
                    console.log(`[${distillationId}] REGISTERING PROCESS FOR CANCELLATION TRACKING`);

                    // Register this process for cancellation tracking
                    const abortController = new AbortController();
                    this.activeProcesses.set(distillationId, {
                        cancelled: false,
                        abortController: abortController
                    });

                    // Check if the process has been stopped before starting
                    const currentDistillation = await database.getDistillation(distillationId);
                    if (currentDistillation && currentDistillation.status === 'stopped') {
                        console.log(`[${distillationId}] Process was stopped before execution, skipping`);
                        this.activeProcesses.delete(distillationId);
                        return;
                    }

                    // Check if cancelled during registration
                    const processInfo = this.activeProcesses.get(distillationId);
                    if (processInfo && processInfo.cancelled) {
                        console.log(`[${distillationId}] PROCESS CANCELLED DURING REGISTRATION`);
                        this.activeProcesses.delete(distillationId);
                        return;
                    }

                    console.log(`[${distillationId}] STARTING BACKGROUND PROCESSING`);
                    await processFn();

                    console.log(`[${distillationId}] BACKGROUND PROCESSING COMPLETED`);
                    // Clean up tracking
                    this.activeProcesses.delete(distillationId);

                } catch (error) {
                    console.log(`[${distillationId}] PROCESSING ERROR OR CANCELLATION:`, error.message);

                    // Check if this was a cancellation
                    const processInfo = this.activeProcesses.get(distillationId);
                    const wasCancelled = processInfo && processInfo.cancelled;

                    // Clean up tracking on error
                    this.activeProcesses.delete(distillationId);

                    if (wasCancelled || error.message.includes('cancelled')) {
                        console.log(`[${distillationId}] PROCESS WAS CANCELLED - NOT UPDATING TO ERROR`);
                        // Don't update status to error if it was cancelled - it should stay as 'stopped'
                        return;
                    } else {
                        console.error(`[${distillationId}] ACTUAL ERROR OCCURRED:`, error);
                        await database.updateDistillationStatus(distillationId, 'error', error.message);
                        throw error; // Re-throw to be handled by queue
                    }
                }
            });
        } catch (error) {
            console.error(`Failed to add distillation ${distillationId} to processing queue:`, error);
            // Clean up tracking on queue error
            this.activeProcesses.delete(distillationId);
        }
    }

    /**
     * Update the title of a distillation
     * @param {string} distillationId - The ID of the distillation to update
     * @param {string} title - The new title
     */
    async updateDistillationTitle(distillationId, title) {
        try {
            const distillation = await database.getDistillation(distillationId);
            if (distillation) {
                distillation.title = title;
                await database.saveDistillation(distillation);
            }
        } catch (error) {
            console.error(`Error updating distillation title ${distillationId}:`, error);
        }
    }

    /**
     * Detect the type of URL
     * @param {string} url - The URL to check
     * @returns {string} - The detected URL type
     */
    detectUrlType(url) {
        console.log(`Detecting URL type for: ${url}`);

        // Use the content extractor's classification logic
        if (contentExtractor.isYoutubeUrl(url)) {
            const youtubeType = contentExtractor.classifyYoutubeUrl(url);

            if (youtubeType === 'video') {
                console.log(`Detected as YouTube video`);
                return 'youtube';
            } else if (youtubeType === 'playlist') {
                console.log(`Detected as YouTube playlist`);
                return 'youtube'; // Changed from 'playlist' to 'youtube' since we'll process individual videos
            } else if (youtubeType === 'channel') {
                console.log(`Detected as YouTube channel`);
                return 'channel';
            }
        }

        // Default to regular URL
        console.log(`Detected as regular web URL`);
        return 'url';
    }

    /**
     * Generate a PDF from a distillation
     * @param {string} distillationId - The ID of the distillation to convert
     * @returns {Promise<{buffer: Buffer, filename: string}>} - The PDF buffer and filename
     */
    async generatePdf(distillationId) {
        try {
            const distillation = await database.getDistillation(distillationId);
            if (!distillation) {
                throw new Error('Distillation not found');
            }

            if (distillation.status !== 'completed') {
                throw new Error('Distillation is not yet completed');
            }

            // Generate PDF for distillation

            const puppeteer = require('puppeteer');

            // Launch browser
            const browser = await puppeteer.launch({
                headless: true,
                args: ['--no-sandbox', '--disable-setuid-sandbox']
            });

            const page = await browser.newPage();

            // Create HTML content with beautiful styling
            const htmlContent = this.createPdfHtml(distillation);

            // Set content and generate PDF
            await page.setContent(htmlContent, { waitUntil: 'networkidle0' });

            // Add a small delay to ensure content is fully rendered
            await new Promise(resolve => setTimeout(resolve, 1000));

            const pdfBuffer = await page.pdf({
                format: 'A4',
                margin: {
                    top: '20mm',
                    right: '20mm',
                    bottom: '20mm',
                    left: '20mm'
                },
                printBackground: true,
                preferCSSPageSize: false,
                displayHeaderFooter: false
            });

            // PDF buffer generated successfully

            await browser.close();

            // Generate filename from title with ID for uniqueness
            const filename = this.generatePdfFilename(distillation.title, distillationId);

            // PDF generated successfully
            return { buffer: pdfBuffer, filename };

        } catch (error) {
            console.error(`Error generating PDF for distillation ${distillationId}:`, error);
            throw new Error(`PDF generation failed: ${error.message}`);
        }
    }

    /**
     * Create HTML content for PDF generation
     * @param {Distillation} distillation - The distillation object
     * @returns {string} - HTML content
     */
    createPdfHtml(distillation) {
        const formattedDate = new Intl.DateTimeFormat('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        }).format(distillation.createdAt);

        // Convert markdown to HTML with enhanced formatting
        const contentHtml = this.formatContent(distillation.content || '');

        return `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>${distillation.title}</title>
            <style>
                body {
                    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                    line-height: 1.6;
                    color: #333;
                    max-width: 800px;
                    margin: 0 auto;
                    padding: 20px;
                }
                
                .header {
                    border-bottom: 3px solid #007acc;
                    padding-bottom: 20px;
                    margin-bottom: 30px;
                }
                
                .title {
                    font-size: 28px;
                    font-weight: bold;
                    color: #007acc;
                    margin: 0 0 10px 0;
                }
                
                .meta {
                    color: #666;
                    font-size: 14px;
                    margin-bottom: 5px;
                }
                
                .meta strong {
                    color: #333;
                }
                
                .meta a {
                    color: #007acc;
                    text-decoration: none;
                    word-break: break-all;
                }
                
                .meta a:hover {
                    text-decoration: underline;
                }
                
                .content {
                    font-size: 16px;
                    line-height: 1.8;
                }
                
                .content h1 {
                    color: #007acc;
                    font-size: 24px;
                    margin-top: 30px;
                    margin-bottom: 15px;
                    border-bottom: 2px solid #007acc;
                    padding-bottom: 5px;
                }
                
                .content h2 {
                    color: #0066cc;
                    font-size: 20px;
                    margin-top: 25px;
                    margin-bottom: 12px;
                }
                
                .content h3 {
                    color: #0066cc;
                    font-size: 18px;
                    margin-top: 20px;
                    margin-bottom: 10px;
                }
                
                .content p {
                    margin-bottom: 15px;
                    text-align: justify;
                }
                
                .content ul, .content ol {
                    margin-bottom: 15px;
                    padding-left: 25px;
                }
                
                /* Manual numbered list styling for PDF */
                .content ol.manual-numbered {
                    list-style: none;
                    padding-left: 0;
                    margin-left: 0;
                    counter-reset: none;
                }
                
                .content ol.manual-numbered li {
                    display: block;
                    margin-bottom: 8px;
                    position: relative;
                    list-style: none;
                    font-weight: bold;
                }
                
                .content ol.manual-numbered li .list-number {
                    font-weight: bold;
                    color: #007acc;
                    margin-right: 8px;
                    display: inline-block;
                    min-width: 20px;
                }
                
                .content ol.manual-numbered li strong {
                    font-weight: bold;
                }
                
                /* Fallback for regular ol elements */
                .content ol:not(.manual-numbered) {
                    counter-reset: item;
                }
                
                .content ol:not(.manual-numbered) > li {
                    display: block;
                    margin-bottom: 8px;
                    position: relative;
                }
                
                .content ol:not(.manual-numbered) > li:before {
                    content: counter(item) ". ";
                    counter-increment: item;
                    font-weight: bold;
                    position: absolute;
                    left: -25px;
                }
                
                .content ul > li {
                    margin-bottom: 8px;
                }
                
                .content strong {
                    color: #333;
                    font-weight: bold;
                    font-weight: 700;
                }
                
                .content b {
                    color: #333;
                    font-weight: bold;
                    font-weight: 700;
                }
                
                .content em {
                    font-style: italic;
                    color: #555;
                }
                
                .content code {
                    background-color: #f5f5f5;
                    padding: 2px 6px;
                    border-radius: 3px;
                    font-family: 'Monaco', 'Consolas', monospace;
                    font-size: 14px;
                }
                
                .content pre {
                    background-color: #f8f8f8;
                    border: 1px solid #ddd;
                    border-radius: 5px;
                    padding: 15px;
                    overflow-x: auto;
                    margin-bottom: 15px;
                }
                
                .content pre code {
                    background: none;
                    padding: 0;
                }
                
                .content a {
                    color: #007acc;
                    text-decoration: none;
                }
                
                .content a:hover {
                    text-decoration: underline;
                }
                
                .footer {
                    margin-top: 40px;
                    padding-top: 20px;
                    border-top: 1px solid #ddd;
                    font-size: 12px;
                    color: #666;
                    text-align: center;
                }
                
                @media print {
                    body {
                        margin: 0;
                        padding: 15px;
                    }
                    
                    .header {
                        page-break-after: avoid;
                    }
                    
                    .content h1, .content h2, .content h3 {
                        page-break-after: avoid;
                    }
                }
            </style>
        </head>
        <body>
            <div class="header">
                <h1 class="title">${distillation.title}</h1>
                <div class="meta">
                    ${distillation.sourceUrl ? `<strong>Source:</strong> <a href="${distillation.sourceUrl}" target="_blank">${distillation.sourceUrl}</a><br>` : ''}
                    ${distillation.sourceFile ? `<strong>Source:</strong> ${distillation.sourceFile.name}<br>` : ''}
                    <strong>Generated:</strong> ${formattedDate}<br>
                    ${distillation.wordCount ? `<strong>Word Count:</strong> ${distillation.wordCount} words<br>` : ''}
                    ${distillation.processingTime ? `<strong>Processing Time:</strong> ${distillation.processingTime.toFixed(1)}s<br>` : ''}
                </div>
            </div>
            
            <div class="content">
                ${contentHtml}
            </div>
            
            <div class="footer">
                💠 Distilled by SAWRON 💠
            </div>
        </body>
        </html>
        `;
    }

    /**
     * Format content with enhanced processing for numbered lists
     * @param {string} content - Content to format
     * @returns {string} - Formatted HTML content
     */
    formatContent(content) {
        if (!content) return '';

        // If content already contains HTML tags (like <strong>), preserve them but enhance numbered lists
        if (content.includes('<strong>') || content.includes('<')) {
            // Content already has HTML formatting, process it to enhance numbered lists
            let processedContent = content
                .split('\n\n')
                .map(paragraph => {
                    if (paragraph.trim()) {
                        // Check if this paragraph contains numbered list patterns that need bold formatting
                        const lines = paragraph.split('\n');
                        const processedLines = lines.map(line => {
                            const trimmedLine = line.trim();
                            // Handle nested numbering patterns like "1. 1. Text"
                            const nestedNumberMatch = trimmedLine.match(/^(\d+\.\s*)+(.+)$/);
                            if (nestedNumberMatch && !trimmedLine.includes('<strong>')) {
                                // Apply bold formatting to the entire line if not already present
                                return `<strong>${trimmedLine}</strong>`;
                            }
                            return line;
                        });

                        const processedParagraph = processedLines.join('\n');

                        // If paragraph already has HTML tags, don't wrap in <p>
                        if (processedParagraph.includes('<')) {
                            return processedParagraph.replace(/\n/g, '<br>');
                        } else {
                            return `<p>${processedParagraph.replace(/\n/g, '<br>')}</p>`;
                        }
                    }
                    return '';
                })
                .filter(p => p)
                .join('');

            return processedContent;
        }

        // Convert markdown to HTML for content without HTML tags
        return this.markdownToHtml(content);
    }

    /**
     * Convert markdown to HTML for PDF generation
     * @param {string} markdown - Markdown content
     * @returns {string} - HTML content
     */
    markdownToHtml(markdown) {
        if (!markdown) return '';

        // Process markdown and convert numbered lists to sequential numbering
        let numberedItemCounter = 0;
        const lines = markdown.split('\n');
        const result = [];
        let currentParagraph = [];
        let inList = false;
        let listType = null;

        for (let i = 0; i < lines.length; i++) {
            const line = lines[i];
            const trimmedLine = line.trim();

            // Empty line - end current paragraph or list
            if (!trimmedLine) {
                if (currentParagraph.length > 0) {
                    result.push(`<p>${currentParagraph.join('<br>')}</p>`);
                    currentParagraph = [];
                }
                if (inList) {
                    result.push(`</${listType}>`);
                    inList = false;
                    listType = null;
                    // DON'T reset numberedItemCounter here - keep it going across the document
                }
                continue;
            }

            // Headers
            if (trimmedLine.startsWith('### ')) {
                const state = this.flushParagraph(result, currentParagraph, inList, listType);
                inList = state.inList;
                listType = state.listType;
                // DON'T reset counter after headers - keep numbering continuous
                result.push(`<h3>${trimmedLine.substring(4)}</h3>`);
                continue;
            }
            if (trimmedLine.startsWith('## ')) {
                const state = this.flushParagraph(result, currentParagraph, inList, listType);
                inList = state.inList;
                listType = state.listType;
                // DON'T reset counter after headers - keep numbering continuous
                result.push(`<h2>${trimmedLine.substring(3)}</h2>`);
                continue;
            }
            if (trimmedLine.startsWith('# ')) {
                const state = this.flushParagraph(result, currentParagraph, inList, listType);
                inList = state.inList;
                listType = state.listType;
                // DON'T reset counter after headers - keep numbering continuous
                result.push(`<h1>${trimmedLine.substring(2)}</h1>`);
                continue;
            }

            // Unordered list items
            if (trimmedLine.startsWith('- ') || trimmedLine.startsWith('* ')) {
                if (currentParagraph.length > 0) {
                    result.push(`<p>${currentParagraph.join('<br>')}</p>`);
                    currentParagraph = [];
                }
                if (!inList || listType !== 'ul') {
                    if (inList) result.push(`</${listType}>`);
                    result.push('<ul>');
                    inList = true;
                    listType = 'ul';
                    // DON'T reset counter for unordered lists - keep numbering continuous
                }
                const content = this.processInlineMarkdown(trimmedLine.substring(2));
                result.push(`<li>${content}</li>`);
                continue;
            }

            // Enhanced numbered list processing - handles nested numbering like "1. 1. Text"
            const orderedMatch = trimmedLine.match(/^(\d+\.\s*)+(.+)$/);
            if (orderedMatch) {
                if (currentParagraph.length > 0) {
                    result.push(`<p>${currentParagraph.join('<br>')}</p>`);
                    currentParagraph = [];
                }

                if (!inList || listType !== 'ol') {
                    if (inList) result.push(`</${listType}>`);
                    result.push('<ol class="manual-numbered">');
                    inList = true;
                    listType = 'ol';
                    // DON'T reset counter here - keep incrementing across the entire document
                }

                numberedItemCounter++;
                // Extract the original numbering and content
                const originalNumbering = orderedMatch[1].trim(); // e.g., "1. 1."
                const textContent = orderedMatch[2]; // The actual content

                // Process the content for inline markdown (including bold)
                const processedContent = this.processInlineMarkdown(textContent);

                // Create list item with bold formatting for the entire line
                const listItem = `<li><strong><span class="list-number">${numberedItemCounter}.</span> ${processedContent}</strong></li>`;
                result.push(listItem);
                continue;
            }

            // Regular paragraph line
            if (inList) {
                result.push(`</${listType}>`);
                inList = false;
                listType = null;
                // DON'T reset numberedItemCounter here - keep it going
            }

            const processedLine = this.processInlineMarkdown(trimmedLine);
            currentParagraph.push(processedLine);
        }

        // Flush any remaining content
        this.flushParagraph(result, currentParagraph, inList, listType);
        return result.join('\n');
    }

    /**
     * Helper method to flush current paragraph and close lists
     */
    flushParagraph(result, currentParagraph, inList, listType) {
        if (currentParagraph.length > 0) {
            result.push(`<p>${currentParagraph.join('<br>')}</p>`);
            currentParagraph.length = 0;
        }
        if (inList) {
            result.push(`</${listType}>`);
            inList = false;
            listType = null;
        }
        return { inList: false, listType: null };
    }

    /**
     * Process inline markdown (bold, italic, code, links)
     * @param {string} text - Text to process
     * @returns {string} - Processed text
     */
    processInlineMarkdown(text) {
        if (!text) return '';

        let processed = text;

        // Code blocks (do first to avoid processing markdown inside code)
        processed = processed.replace(/```([\s\S]*?)```/g, '<pre><code>$1</code></pre>');
        processed = processed.replace(/`([^`]+)`/g, '<code>$1</code>');

        // Bold text
        processed = processed.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>');
        processed = processed.replace(/__(.*?)__/g, '<strong>$1</strong>');

        // Italic text (avoid conflicts with bold)
        processed = processed.replace(/(?<!\*)\*([^*]+)\*(?!\*)/g, '<em>$1</em>');
        processed = processed.replace(/(?<!_)_([^_]+)_(?!_)/g, '<em>$1</em>');

        // Links
        processed = processed.replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2">$1</a>');

        return processed;
    }

    /**
     * Generate a clean filename from the distillation title
     * @param {string} title - The distillation title
     * @param {string} distillationId - The distillation ID for uniqueness
     * @returns {string} - Clean filename
     */
    generatePdfFilename(title, distillationId) {
        if (!title) return `distillation-${distillationId}.pdf`;

        // Clean the title for use as filename
        let filename = title
            .replace(/[^\w\s-]/g, '') // Remove special characters except spaces and hyphens
            .replace(/\s+/g, '-') // Replace spaces with hyphens
            .replace(/-+/g, '-') // Replace multiple hyphens with single hyphen
            .toLowerCase()
            .substring(0, 80); // Increased length to 80 characters

        // Remove leading/trailing hyphens
        filename = filename.replace(/^-+|-+$/g, '');

        // Ensure it's not empty
        if (!filename) filename = 'distillation';

        // Add distillation ID to ensure uniqueness
        return `${filename}-${distillationId}.pdf`;
    }

    /**
     * Stop a running distillation process
     * @param {string} distillationId - The ID of the distillation to stop
     * @returns {Promise<boolean>} - True if the process was stopped
     */
    async stopProcess(distillationId) {
        try {
            console.log(`[${distillationId}] STOP REQUEST RECEIVED - CANCELLING PROCESS`);

            // Check if the distillation exists and is in a stoppable state
            const distillation = await database.getDistillation(distillationId);
            if (!distillation) {
                console.log(`[${distillationId}] Process not found`);
                return false;
            }

            // Only allow stopping if the process is currently running
            if (!['pending', 'extracting', 'distilling'].includes(distillation.status)) {
                console.log(`[${distillationId}] Process not in stoppable state: ${distillation.status}`);
                return false;
            }

            // IMMEDIATELY mark the process as cancelled in our tracking
            if (this.activeProcesses.has(distillationId)) {
                const processInfo = this.activeProcesses.get(distillationId);
                processInfo.cancelled = true;
                console.log(`[${distillationId}] MARKED AS CANCELLED IN ACTIVE PROCESSES`);

                // Abort any ongoing HTTP requests
                if (processInfo.abortController) {
                    processInfo.abortController.abort();
                    console.log(`[${distillationId}] ABORTED HTTP REQUESTS`);
                }
            } else {
                // Create a cancelled entry even if not found
                this.activeProcesses.set(distillationId, { cancelled: true, abortController: null });
                console.log(`[${distillationId}] CREATED CANCELLED ENTRY`);
            }

            // Mark as stopped with appropriate status and message
            await database.updateDistillationStatus(
                distillationId,
                'stopped',
                'Process stopped by user'
            );

            console.log(`[${distillationId}] DATABASE STATUS UPDATED TO STOPPED`);

            // Add log entry for the stop action
            if (distillation.addLog) {
                distillation.addLog('⏹️ Process stopped by user request', 'info');
                await database.saveDistillation(distillation);
            }

            console.log(`[${distillationId}] PROCESS SUCCESSFULLY STOPPED`);
            return true;
        } catch (error) {
            console.error(`Error stopping process ${distillationId}:`, error);
            return false;
        }
    }
}

module.exports = new Processor();


---
File: /.gitignore
---

# Dependencies
node_modules/

# Data and uploads
data/
uploads/

# System files
.DS_Store
Thumbs.db

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*
*.log

# Environment variables
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# AI settings (contains sensitive data)
.ai-settings/

# IDE files
.vscode/
.idea/
*.swp
*.swo

# Temporary files
*.tmp
*.temp


---
File: /package-lock.json
---

{
  "name": "sawron-knowledge-app",
  "version": "1.0.0",
  "lockfileVersion": 3,
  "requires": true,
  "packages": {
    "": {
      "name": "sawron-knowledge-app",
      "version": "1.0.0",
      "license": "MIT",
      "dependencies": {
        "@google/genai": "^0.3.0",
        "@google/generative-ai": "^0.24.1",
        "@langchain/community": "^0.3.49",
        "@langchain/core": "^0.3.66",
        "archiver": "^7.0.1",
        "axios": "^1.6.2",
        "cheerio": "^1.0.0-rc.12",
        "cors": "^2.8.5",
        "express": "^4.18.2",
        "mammoth": "^1.6.0",
        "multer": "^1.4.5-lts.1",
        "pdf-parse": "^1.1.1",
        "puppeteer": "^24.15.0",
        "sqlite3": "^5.1.6",
        "youtube-transcript": "^1.0.6",
        "youtubei.js": "^15.0.1"
      },
      "devDependencies": {
        "jest": "^29.7.0",
        "nodemon": "^3.0.2",
        "supertest": "^7.1.4"
      }
    },
    "node_modules/@ampproject/remapping": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/@ampproject/remapping/-/remapping-2.3.0.tgz",
      "integrity": "sha512-30iZtAPgz+LTIYoeivqYo853f02jBYSd5uGnGpkFV0M3xOt9aN73erkgYAmZU43x4VfqcnLxW9Kpg3R5LC4YYw==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@jridgewell/gen-mapping": "^0.3.5",
        "@jridgewell/trace-mapping": "^0.3.24"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@anthropic-ai/sdk": {
      "version": "0.27.3",
      "resolved": "https://registry.npmjs.org/@anthropic-ai/sdk/-/sdk-0.27.3.tgz",
      "integrity": "sha512-IjLt0gd3L4jlOfilxVXTifn42FnVffMgDC04RJK1KDZpmkBWLv0XC92MVVmkxrFZNS/7l3xWgP/I3nqtX1sQHw==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@types/node": "^18.11.18",
        "@types/node-fetch": "^2.6.4",
        "abort-controller": "^3.0.0",
        "agentkeepalive": "^4.2.1",
        "form-data-encoder": "1.7.2",
        "formdata-node": "^4.3.2",
        "node-fetch": "^2.6.7"
      }
    },
    "node_modules/@babel/code-frame": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/code-frame/-/code-frame-7.27.1.tgz",
      "integrity": "sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==",
      "license": "MIT",
      "dependencies": {
        "@babel/helper-validator-identifier": "^7.27.1",
        "js-tokens": "^4.0.0",
        "picocolors": "^1.1.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/compat-data": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/compat-data/-/compat-data-7.28.0.tgz",
      "integrity": "sha512-60X7qkglvrap8mn1lh2ebxXdZYtUcpd7gsmy9kLaBJ4i/WdY8PqTSdxyA8qraikqKQK5C1KRBKXqznrVapyNaw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/core": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/core/-/core-7.28.0.tgz",
      "integrity": "sha512-UlLAnTPrFdNGoFtbSXwcGFQBtQZJCNjaN6hQNP3UPvuNXT1i82N26KL3dZeIpNalWywr9IuQuncaAfUaS1g6sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@ampproject/remapping": "^2.2.0",
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-compilation-targets": "^7.27.2",
        "@babel/helper-module-transforms": "^7.27.3",
        "@babel/helpers": "^7.27.6",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/traverse": "^7.28.0",
        "@babel/types": "^7.28.0",
        "convert-source-map": "^2.0.0",
        "debug": "^4.1.0",
        "gensync": "^1.0.0-beta.2",
        "json5": "^2.2.3",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/babel"
      }
    },
    "node_modules/@babel/core/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@babel/core/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@babel/core/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/generator": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/generator/-/generator-7.28.0.tgz",
      "integrity": "sha512-lJjzvrbEeWrhB4P3QBsH7tey117PjLZnDbLiQEKjQ/fNJTjuq4HSqgFA+UNSwZT8D7dxxbnuSBMsa1lrWzKlQg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.28.0",
        "@babel/types": "^7.28.0",
        "@jridgewell/gen-mapping": "^0.3.12",
        "@jridgewell/trace-mapping": "^0.3.28",
        "jsesc": "^3.0.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/helper-compilation-targets/-/helper-compilation-targets-7.27.2.tgz",
      "integrity": "sha512-2+1thGUUWWjLTYTHZWK1n8Yga0ijBz1XAhUXcKy81rd5g6yh7hGqMp45v7cadSbEHc9G3OTv45SyneRN3ps4DQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/compat-data": "^7.27.2",
        "@babel/helper-validator-option": "^7.27.1",
        "browserslist": "^4.24.0",
        "lru-cache": "^5.1.1",
        "semver": "^6.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/lru-cache": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-5.1.1.tgz",
      "integrity": "sha512-KpNARQA3Iwv+jTA0utUVVbrh+Jlrr1Fv0e56GGzAFOXN7dk/FviaDW8LHmK52DlcH4WP2n6gI8vN1aesBFgo9w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "yallist": "^3.0.2"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/@babel/helper-compilation-targets/node_modules/yallist": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-3.1.1.tgz",
      "integrity": "sha512-a4UGQaWPH59mOXUYnAG2ewncQS4i4F43Tv3JoAM+s2VDAmS9NsK8GpDMLrCHPksFT7h3K6TOoUNn2pb7RoXx4g==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/@babel/helper-globals": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/helper-globals/-/helper-globals-7.28.0.tgz",
      "integrity": "sha512-+W6cISkXFa1jXsDEdYA8HeevQT/FULhxzR99pxphltZcVaugps53THCeiWA8SguxxpSp3gKPiuYfSWopkLQ4hw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-imports": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-imports/-/helper-module-imports-7.27.1.tgz",
      "integrity": "sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/traverse": "^7.27.1",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-module-transforms": {
      "version": "7.27.3",
      "resolved": "https://registry.npmjs.org/@babel/helper-module-transforms/-/helper-module-transforms-7.27.3.tgz",
      "integrity": "sha512-dSOvYwvyLsWBeIRyOeHXp5vPj5l1I011r52FM1+r1jCERv+aFXYk4whgQccYEGYxK2H3ZAIA8nuPkQ0HaUo3qg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-module-imports": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1",
        "@babel/traverse": "^7.27.3"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/@babel/helper-plugin-utils": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-plugin-utils/-/helper-plugin-utils-7.27.1.tgz",
      "integrity": "sha512-1gn1Up5YXka3YYAHGKpbideQ5Yjf1tDa9qYcgysz+cNCXukyLl6DjPXhD3VRwSb8c0J9tA4b2+rHEZtc6R0tlw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-string-parser": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-string-parser/-/helper-string-parser-7.27.1.tgz",
      "integrity": "sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-identifier": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-identifier/-/helper-validator-identifier-7.27.1.tgz",
      "integrity": "sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==",
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helper-validator-option": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/helper-validator-option/-/helper-validator-option-7.27.1.tgz",
      "integrity": "sha512-YvjJow9FxbhFFKDSuFnVCe2WxXk1zWc22fFePVNEaWJEu8IrZVlda6N0uHwzZrUM1il7NC9Mlp4MaJYbYd9JSg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/helpers": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/helpers/-/helpers-7.28.2.tgz",
      "integrity": "sha512-/V9771t+EgXz62aCcyofnQhGM8DQACbRhvzKFsXKC9QM+5MadF8ZmIm0crDMaz3+o0h0zXfJnd4EhbYbxsrcFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.2"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/parser": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/parser/-/parser-7.28.0.tgz",
      "integrity": "sha512-jVZGvOxOuNSsuQuLRTh13nU0AogFlw32w/MT+LV6D3sP5WdbW61E77RnkbaO2dUvmPAYrBDJXGn5gGS6tH4j8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.28.0"
      },
      "bin": {
        "parser": "bin/babel-parser.js"
      },
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@babel/plugin-syntax-async-generators": {
      "version": "7.8.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-async-generators/-/plugin-syntax-async-generators-7.8.4.tgz",
      "integrity": "sha512-tycmZxkGfZaxhMRbXlPXuVFpdWlXpir2W4AMhSJgRKzk/eDlIXOhb2LHWoLpDF7TEHylV5zNhykX6KAgHJmTNw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-bigint": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-bigint/-/plugin-syntax-bigint-7.8.3.tgz",
      "integrity": "sha512-wnTnFlG+YxQm3vDxpGE57Pj0srRU4sHE/mDkt1qv2YJJSeUAec2ma4WLUnUPeKjyrfntVwe/N6dCXpU+zL3Npg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-properties": {
      "version": "7.12.13",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-properties/-/plugin-syntax-class-properties-7.12.13.tgz",
      "integrity": "sha512-fm4idjKla0YahUNgFNLCB0qySdsoPiZP3iQE3rky0mBUtMZ23yDJ9SJdg6dXTSDnulOVqiF3Hgr9nbXvXTQZYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.12.13"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-class-static-block": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-class-static-block/-/plugin-syntax-class-static-block-7.14.5.tgz",
      "integrity": "sha512-b+YyPmr6ldyNnM6sqYeMWE+bgJcJpO6yS4QD7ymxgH34GBPNDM/THBh8iunyvKIZztiwLH4CJZ0RxTk9emgpjw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-attributes": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-attributes/-/plugin-syntax-import-attributes-7.27.1.tgz",
      "integrity": "sha512-oFT0FrKHgF53f4vOsZGi2Hh3I35PfSmVs4IBFLFj4dnafP+hIWDLg3VyKmUHfLoLHlyxY4C7DGtmHuJgn+IGww==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-import-meta": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-import-meta/-/plugin-syntax-import-meta-7.10.4.tgz",
      "integrity": "sha512-Yqfm+XDx0+Prh3VSeEQCPU81yC+JWZ2pDPFSS4ZdpfZhp4MkFMaDC1UqseovEKwSUpnIL7+vK+Clp7bfh0iD7g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-json-strings": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-json-strings/-/plugin-syntax-json-strings-7.8.3.tgz",
      "integrity": "sha512-lY6kdGpWHvjoe2vk4WrAapEuBR69EMxZl+RoGRhrFGNYVK8mOPAW8VfbT/ZgrFbXlDNiiaxQnAtgVCZ6jv30EA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-jsx": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-jsx/-/plugin-syntax-jsx-7.27.1.tgz",
      "integrity": "sha512-y8YTNIeKoyhGd9O0Jiyzyyqk8gdjnumGTQPsz0xOZOQ2RmkVJeZ1vmmfIvFEKqucBG6axJGBZDE/7iI5suUI/w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-logical-assignment-operators": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-logical-assignment-operators/-/plugin-syntax-logical-assignment-operators-7.10.4.tgz",
      "integrity": "sha512-d8waShlpFDinQ5MtvGU9xDAOzKH47+FFoney2baFIoMr952hKOLp1HR7VszoZvOsV/4+RRszNY7D17ba0te0ig==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-nullish-coalescing-operator": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-nullish-coalescing-operator/-/plugin-syntax-nullish-coalescing-operator-7.8.3.tgz",
      "integrity": "sha512-aSff4zPII1u2QD7y+F8oDsz19ew4IGEJg9SVW+bqwpwtfFleiQDMdzA/R+UlWDzfnHFCxxleFT0PMIrR36XLNQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-numeric-separator": {
      "version": "7.10.4",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-numeric-separator/-/plugin-syntax-numeric-separator-7.10.4.tgz",
      "integrity": "sha512-9H6YdfkcK/uOnY/K7/aA2xpzaAgkQn37yzWUMRK7OaPOqOpGS1+n0H5hxT9AUw9EsSjPW8SVyMJwYRtWs3X3ug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.10.4"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-object-rest-spread": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-object-rest-spread/-/plugin-syntax-object-rest-spread-7.8.3.tgz",
      "integrity": "sha512-XoqMijGZb9y3y2XskN+P1wUGiVwWZ5JmoDRwx5+3GmEplNyVM2s2Dg8ILFQm8rWM48orGy5YpI5Bl8U1y7ydlA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-catch-binding": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-catch-binding/-/plugin-syntax-optional-catch-binding-7.8.3.tgz",
      "integrity": "sha512-6VPD0Pc1lpTqw0aKoeRTMiB+kWhAoT24PA+ksWSBrFtl5SIRVpZlwN3NNPQjehA2E/91FV3RjLWoVTglWcSV3Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-optional-chaining": {
      "version": "7.8.3",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-optional-chaining/-/plugin-syntax-optional-chaining-7.8.3.tgz",
      "integrity": "sha512-KoK9ErH1MBlCPxV0VANkXW2/dw4vlbGDrFgz8bmUsBGYkFRcbRwMh6cIJubdPrkxRwuGdtCk0v/wPTKbQgBjkg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.8.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-private-property-in-object": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-private-property-in-object/-/plugin-syntax-private-property-in-object-7.14.5.tgz",
      "integrity": "sha512-0wVnp9dxJ72ZUJDV27ZfbSj6iHLoytYZmh3rFcxNnvsJF3ktkzLDZPy/mA17HGsaQT3/DQsWYX1f1QGWkCoVUg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-top-level-await": {
      "version": "7.14.5",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-top-level-await/-/plugin-syntax-top-level-await-7.14.5.tgz",
      "integrity": "sha512-hx++upLv5U1rgYfwe1xBQUhRmU41NEvpUvrp8jkrSCdvGSnM5/qdRMtylJ6PG5OFkBaHkbTAKTnd3/YyESRHFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.14.5"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/plugin-syntax-typescript": {
      "version": "7.27.1",
      "resolved": "https://registry.npmjs.org/@babel/plugin-syntax-typescript/-/plugin-syntax-typescript-7.27.1.tgz",
      "integrity": "sha512-xfYCBMxveHrRMnAWl1ZlPXOZjzkN82THFvLhQhFXFt81Z5HnN+EtUkZhv/zcKpmT3fzmWZB0ywiBrbC3vogbwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0-0"
      }
    },
    "node_modules/@babel/template": {
      "version": "7.27.2",
      "resolved": "https://registry.npmjs.org/@babel/template/-/template-7.27.2.tgz",
      "integrity": "sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/parser": "^7.27.2",
        "@babel/types": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse": {
      "version": "7.28.0",
      "resolved": "https://registry.npmjs.org/@babel/traverse/-/traverse-7.28.0.tgz",
      "integrity": "sha512-mGe7UK5wWyh0bKRfupsUchrQGqvDbZDbKJw+kcRGSmdHVYrv+ltd0pnpDTVpiTqnaBru9iEvA8pz8W46v0Amwg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.27.1",
        "@babel/generator": "^7.28.0",
        "@babel/helper-globals": "^7.28.0",
        "@babel/parser": "^7.28.0",
        "@babel/template": "^7.27.2",
        "@babel/types": "^7.28.0",
        "debug": "^4.3.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@babel/traverse/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@babel/traverse/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@babel/types": {
      "version": "7.28.2",
      "resolved": "https://registry.npmjs.org/@babel/types/-/types-7.28.2.tgz",
      "integrity": "sha512-ruv7Ae4J5dUYULmeXw1gmb7rYRz57OWCPM57pHojnLq/3Z1CK2lNSLTCVjxVk1F/TZHwOZZrOWi0ur95BbLxNQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/helper-string-parser": "^7.27.1",
        "@babel/helper-validator-identifier": "^7.27.1"
      },
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/@bcoe/v8-coverage": {
      "version": "0.2.3",
      "resolved": "https://registry.npmjs.org/@bcoe/v8-coverage/-/v8-coverage-0.2.3.tgz",
      "integrity": "sha512-0hYQ8SB4Db5zvZB4axdMHGwEaQjkZzFjQiN9LVYvIFB2nSUHW9tYpxWriPrWDASIxiaXax83REcLxuSdnGPZtw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@browserbasehq/sdk": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/@browserbasehq/sdk/-/sdk-2.6.0.tgz",
      "integrity": "sha512-83iXP5D7xMm8Wyn66TUaUrgoByCmAJuoMoZQI3sGg3JAiMlTfnCIMqyVBoNSaItaPIkaCnrsj6LiusmXV2X9YA==",
      "license": "Apache-2.0",
      "peer": true,
      "dependencies": {
        "@types/node": "^18.11.18",
        "@types/node-fetch": "^2.6.4",
        "abort-controller": "^3.0.0",
        "agentkeepalive": "^4.2.1",
        "form-data-encoder": "1.7.2",
        "formdata-node": "^4.3.2",
        "node-fetch": "^2.6.7"
      }
    },
    "node_modules/@browserbasehq/stagehand": {
      "version": "1.14.0",
      "resolved": "https://registry.npmjs.org/@browserbasehq/stagehand/-/stagehand-1.14.0.tgz",
      "integrity": "sha512-Hi/EzgMFWz+FKyepxHTrqfTPjpsuBS4zRy3e9sbMpBgLPv+9c0R+YZEvS7Bw4mTS66QtvvURRT6zgDGFotthVQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@anthropic-ai/sdk": "^0.27.3",
        "@browserbasehq/sdk": "^2.0.0",
        "ws": "^8.18.0",
        "zod-to-json-schema": "^3.23.5"
      },
      "peerDependencies": {
        "@playwright/test": "^1.42.1",
        "deepmerge": "^4.3.1",
        "dotenv": "^16.4.5",
        "openai": "^4.62.1",
        "zod": "^3.23.8"
      }
    },
    "node_modules/@bufbuild/protobuf": {
      "version": "2.6.2",
      "resolved": "https://registry.npmjs.org/@bufbuild/protobuf/-/protobuf-2.6.2.tgz",
      "integrity": "sha512-vLu7SRY84CV/Dd+NUdgtidn2hS5hSMUC1vDBY0VcviTdgRYkU43vIz3vIFbmx14cX1r+mM7WjzE5Fl1fGEM0RQ==",
      "license": "(Apache-2.0 AND BSD-3-Clause)"
    },
    "node_modules/@cfworker/json-schema": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/@cfworker/json-schema/-/json-schema-4.1.1.tgz",
      "integrity": "sha512-gAmrUZSGtKc3AiBL71iNWxDsyUC5uMaKKGdvzYsBoTW/xi42JQHl7eKV2OYzCUqvc+D2RCcf7EXY2iCyFIk6og==",
      "license": "MIT"
    },
    "node_modules/@gar/promisify": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/@gar/promisify/-/promisify-1.1.3.tgz",
      "integrity": "sha512-k2Ty1JcVojjJFwrg/ThKi2ujJ7XNLYaFGNB/bWT9wGR+oSMJHMa5w+CUq6p/pVrKeNNgA7pCqEcjSnHVoqJQFw==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/@google/genai": {
      "version": "0.3.1",
      "resolved": "https://registry.npmjs.org/@google/genai/-/genai-0.3.1.tgz",
      "integrity": "sha512-jf1RSDjRqBOjm6zYqx90jQVgCumR7qT/4vqz5dVzb6WalnTqYX6LYONGVqzucQXtB3GFSZcUsqNv5o7SSdcbkQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "google-auth-library": "^9.14.2",
        "ws": "^8.18.0"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@google/generative-ai": {
      "version": "0.24.1",
      "resolved": "https://registry.npmjs.org/@google/generative-ai/-/generative-ai-0.24.1.tgz",
      "integrity": "sha512-MqO+MLfM6kjxcKoy0p1wRzG3b4ZZXtPI+z2IE26UogS2Cm/XHO+7gGRBh6gcJsOiIVoH93UwKvW4HdgiOZCy9Q==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@graphql-typed-document-node/core": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/@graphql-typed-document-node/core/-/core-3.2.0.tgz",
      "integrity": "sha512-mB9oAsNCm9aM3/SOv4YtBMqZbYj10R7dkq8byBqxGY/ncFwhf2oQzMV+LCRlWoDSEBJ3COiR1yeDvMtsoOsuFQ==",
      "license": "MIT",
      "peerDependencies": {
        "graphql": "^0.8.0 || ^0.9.0 || ^0.10.0 || ^0.11.0 || ^0.12.0 || ^0.13.0 || ^14.0.0 || ^15.0.0 || ^16.0.0 || ^17.0.0"
      }
    },
    "node_modules/@grpc/grpc-js": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/@grpc/grpc-js/-/grpc-js-1.13.4.tgz",
      "integrity": "sha512-GsFaMXCkMqkKIvwCQjCrwH+GHbPKBjhwo/8ZuUkWHqbI73Kky9I+pQltrlT0+MWpedCoosda53lgjYfyEPgxBg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@grpc/proto-loader": "^0.7.13",
        "@js-sdsl/ordered-map": "^4.4.2"
      },
      "engines": {
        "node": ">=12.10.0"
      }
    },
    "node_modules/@grpc/proto-loader": {
      "version": "0.7.15",
      "resolved": "https://registry.npmjs.org/@grpc/proto-loader/-/proto-loader-0.7.15.tgz",
      "integrity": "sha512-tMXdRCfYVixjuFK+Hk0Q1s38gV9zDiDJfWL3h1rv4Qc39oILCu1TRTDt7+fGUI8K4G1Fj125Hx/ru3azECWTyQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "lodash.camelcase": "^4.3.0",
        "long": "^5.0.0",
        "protobufjs": "^7.2.5",
        "yargs": "^17.7.2"
      },
      "bin": {
        "proto-loader-gen-types": "build/bin/proto-loader-gen-types.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@ibm-cloud/watsonx-ai": {
      "version": "1.6.9",
      "resolved": "https://registry.npmjs.org/@ibm-cloud/watsonx-ai/-/watsonx-ai-1.6.9.tgz",
      "integrity": "sha512-aW4jUVgxjdDa8IDSM+KPeR42pxeR5AUvSXxvj+iid1DdrmRd/SRR9o/FdWEjpZLgcs5RXQFIT56goWkJv7s8oQ==",
      "license": "Apache-2.0",
      "peer": true,
      "dependencies": {
        "@types/node": "^18.0.0",
        "extend": "3.0.2",
        "ibm-cloud-sdk-core": "^5.3.2"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/@isaacs/cliui": {
      "version": "8.0.2",
      "resolved": "https://registry.npmjs.org/@isaacs/cliui/-/cliui-8.0.2.tgz",
      "integrity": "sha512-O8jcjabXaleOG9DQ0+ARXWZBTfnP4WNAqzuiJK7ll44AmxGKv/J2M4TPjxjY3znBCfvBXFzucm1twdyFybFqEA==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^5.1.2",
        "string-width-cjs": "npm:string-width@^4.2.0",
        "strip-ansi": "^7.0.1",
        "strip-ansi-cjs": "npm:strip-ansi@^6.0.1",
        "wrap-ansi": "^8.1.0",
        "wrap-ansi-cjs": "npm:wrap-ansi@^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-regex": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-6.1.0.tgz",
      "integrity": "sha512-7HSX4QQb4CspciLpVFwyRe79O3xsIZDDLER21kERQ71oaPodF8jL725AgJMFAYbooIqolJoRLuM81SpeUkpkvA==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-regex?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/ansi-styles": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-6.2.1.tgz",
      "integrity": "sha512-bN798gFfQX+viw3R7yrGWRqnrN2oRkEkUjjl4JNn4E8GxxbjtG3FbrEIIY3l8/hrwUwIeCZvi4QuOTP4MErVug==",
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/emoji-regex": {
      "version": "9.2.2",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-9.2.2.tgz",
      "integrity": "sha512-L18DaJsXSUk2+42pv8mLs5jJT2hqFkFE4j21wOmgbUqsZ2hL72NsUU785g9RXgo3s0ZNgVl42TiHp3ZtOv/Vyg==",
      "license": "MIT"
    },
    "node_modules/@isaacs/cliui/node_modules/string-width": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-5.1.2.tgz",
      "integrity": "sha512-HnLOCR3vjcY8beoNLtcjZ5/nxn2afmME6lhrDrebokqMap+XbeW8n9TXpPDOqdGK5qcI3oT0GKTW6wC7EMiVqA==",
      "license": "MIT",
      "dependencies": {
        "eastasianwidth": "^0.2.0",
        "emoji-regex": "^9.2.2",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/strip-ansi": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-7.1.0.tgz",
      "integrity": "sha512-iq6eVVI64nQQTRYq2KtEg2d2uU7LElhTJwsH4YzIHZshxlgZms/wIc4VoDQTlG/IvVIrBKG06CrZnp0qv7hkcQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^6.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/strip-ansi?sponsor=1"
      }
    },
    "node_modules/@isaacs/cliui/node_modules/wrap-ansi": {
      "version": "8.1.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-8.1.0.tgz",
      "integrity": "sha512-si7QWI6zUMq56bESFvagtmzMdGOtoxfR+Sez11Mobfc7tm+VkUckk9bW2UeffTGVUbOksxmSw0AA2gs8g71NCQ==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^6.1.0",
        "string-width": "^5.0.1",
        "strip-ansi": "^7.0.1"
      },
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@istanbuljs/load-nyc-config/-/load-nyc-config-1.1.0.tgz",
      "integrity": "sha512-VjeHSlIzpv/NyD3N0YuHfXOPDIixcA1q2ZV98wsMqcYlPmv2n3Yb2lYP9XMElnaFVXg5A7YLTeLu6V84uQDjmQ==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "camelcase": "^5.3.1",
        "find-up": "^4.1.0",
        "get-package-type": "^0.1.0",
        "js-yaml": "^3.13.1",
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/camelcase": {
      "version": "5.3.1",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-5.3.1.tgz",
      "integrity": "sha512-L28STB170nwWS63UjtlEOE3dldQApaJXZkOI1uMFfzf3rRuPegHaHesyee+YxQ+W6SvRDQV6UrdOdRiR153wJg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/@istanbuljs/load-nyc-config/node_modules/js-yaml": {
      "version": "3.14.1",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-3.14.1.tgz",
      "integrity": "sha512-okMH7OXXJ7YrN9Ok3/SXrnu4iX9yOk+25nqX4imS2npuvTYDmo/QEZoqwZkYaIDk3jVvBOTOIEgEhaLOynBS9g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "argparse": "^1.0.7",
        "esprima": "^4.0.0"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/@istanbuljs/schema": {
      "version": "0.1.3",
      "resolved": "https://registry.npmjs.org/@istanbuljs/schema/-/schema-0.1.3.tgz",
      "integrity": "sha512-ZXRY4jNvVgSVQ8DL3LTcakaAtXwTVUxE81hslsyD2AtoXW/wVob10HkOJ1X/pAlcI7D+2YoZKg5do8G/w6RYgA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/@jest/console": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/console/-/console-29.7.0.tgz",
      "integrity": "sha512-5Ni4CU7XHQi32IJ398EEP4RrB8eV09sXP2ROqD4bksHrnTree52PsxvX8tpL8LvTZ3pFzXyPbNQReSN41CAhOg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/core": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/core/-/core-29.7.0.tgz",
      "integrity": "sha512-n7aeXWKMnGtDA48y8TLWJPJmLmmZ642Ceo78cYWEpiD7FzDgmNDV/GCVRorPABdXLJZ/9wzzgZAlHjXjxDHGsg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^29.7.0",
        "@jest/reporters": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-changed-files": "^29.7.0",
        "jest-config": "^29.7.0",
        "jest-haste-map": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-regex-util": "^29.6.3",
        "jest-resolve": "^29.7.0",
        "jest-resolve-dependencies": "^29.7.0",
        "jest-runner": "^29.7.0",
        "jest-runtime": "^29.7.0",
        "jest-snapshot": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "jest-watcher": "^29.7.0",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.7.0",
        "slash": "^3.0.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/environment": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/environment/-/environment-29.7.0.tgz",
      "integrity": "sha512-aQIfHDq33ExsN4jP1NWGXhxgQ/wixs60gDiKO+XVMd8Mn0NWPWgc34ZQDTb2jKaUWQ7MuwoitXAsN2XVXNMpAw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/fake-timers": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "jest-mock": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/expect/-/expect-29.7.0.tgz",
      "integrity": "sha512-8uMeAMycttpva3P1lBHB8VciS9V0XAr3GymPpipdyQXbBcuhkLQOSe8E/p92RyAdToS6ZD1tFkX+CkhoECE0dQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "expect": "^29.7.0",
        "jest-snapshot": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/expect-utils": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/expect-utils/-/expect-utils-29.7.0.tgz",
      "integrity": "sha512-GlsNBWiFQFCVi9QVSx7f5AgMeLxe9YCCs5PuP2O2LdjDAA8Jh9eX7lA1Jq/xdXw3Wb3hyvlFNfZIfcRetSzYcA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "jest-get-type": "^29.6.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/fake-timers": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/fake-timers/-/fake-timers-29.7.0.tgz",
      "integrity": "sha512-q4DH1Ha4TTFPdxLsqDXK1d3+ioSL7yL5oCMJZgDYm6i+6CygW5E5xVr/D1HdsGxjt1ZWSfUAs9OxSB/BNelWrQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@sinonjs/fake-timers": "^10.0.2",
        "@types/node": "*",
        "jest-message-util": "^29.7.0",
        "jest-mock": "^29.7.0",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/globals": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/globals/-/globals-29.7.0.tgz",
      "integrity": "sha512-mpiz3dutLbkW2MNFubUGUEVLkTGiqW6yLVTA+JbP6fI6J5iL9Y0Nlg8k95pcF8ctKwCS7WVxteBs29hhfAotzQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/expect": "^29.7.0",
        "@jest/types": "^29.6.3",
        "jest-mock": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/reporters": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/reporters/-/reporters-29.7.0.tgz",
      "integrity": "sha512-DApq0KJbJOEzAFYjHADNNxAE3KbhxQB1y5Kplb5Waqw6zVbuWatSnMjE5gs8FUgEPmNsnZA3NCWl9NG0ia04Pg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@bcoe/v8-coverage": "^0.2.3",
        "@jest/console": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@jridgewell/trace-mapping": "^0.3.18",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "collect-v8-coverage": "^1.0.0",
        "exit": "^0.1.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "istanbul-lib-coverage": "^3.0.0",
        "istanbul-lib-instrument": "^6.0.0",
        "istanbul-lib-report": "^3.0.0",
        "istanbul-lib-source-maps": "^4.0.0",
        "istanbul-reports": "^3.1.3",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-worker": "^29.7.0",
        "slash": "^3.0.0",
        "string-length": "^4.0.1",
        "strip-ansi": "^6.0.0",
        "v8-to-istanbul": "^9.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/@jest/schemas": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/@jest/schemas/-/schemas-29.6.3.tgz",
      "integrity": "sha512-mo5j5X+jIZmJQveBKeS/clAueipV7KgiX1vMgCxam1RNYiqE1w62n0/tJJnHtjW8ZHcQco5gY85jA3mi0L+nSA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@sinclair/typebox": "^0.27.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/source-map": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/@jest/source-map/-/source-map-29.6.3.tgz",
      "integrity": "sha512-MHjT95QuipcPrpLM+8JMSzFx6eHp5Bm+4XeFDJlwsvVBjmKNiIAvasGK2fxz2WbGRlnvqehFbh07MMa7n3YJnw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.18",
        "callsites": "^3.0.0",
        "graceful-fs": "^4.2.9"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-result": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/test-result/-/test-result-29.7.0.tgz",
      "integrity": "sha512-Fdx+tv6x1zlkJPcWXmMDAG2HBnaR9XPSd5aDWQVsfrZmLVT3lU1cwyxLgRmXR9yrq4NBoEm9BMsfgFzTQAbJYA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "collect-v8-coverage": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/test-sequencer": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/test-sequencer/-/test-sequencer-29.7.0.tgz",
      "integrity": "sha512-GQwJ5WZVrKnOJuiYiAF52UNUJXgTZx1NHjFSEB0qEMmSZKAkdMoIzw/Cj6x6NF4AvV23AUqDpFzQkN/eYCYTxw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^29.7.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/transform": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/@jest/transform/-/transform-29.7.0.tgz",
      "integrity": "sha512-ok/BTPFzFKVMwO5eOHRrvnBVHdRy9IrsrW1GpMaQ9MCnilNLXQKmAX8s1YXDFaai9xJpac2ySzV0YeRRECr2Vw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/types": "^29.6.3",
        "@jridgewell/trace-mapping": "^0.3.18",
        "babel-plugin-istanbul": "^6.1.1",
        "chalk": "^4.0.0",
        "convert-source-map": "^2.0.0",
        "fast-json-stable-stringify": "^2.1.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "jest-regex-util": "^29.6.3",
        "jest-util": "^29.7.0",
        "micromatch": "^4.0.4",
        "pirates": "^4.0.4",
        "slash": "^3.0.0",
        "write-file-atomic": "^4.0.2"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jest/types": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/@jest/types/-/types-29.6.3.tgz",
      "integrity": "sha512-u3UPsIilWKOM3F9CXtrG8LEJmNxwoCQC/XVj4IKYXvvpx7QIi/Kg1LI5uDmDpKlac62NUtX7eLjRh+jVZcLOzw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "@types/istanbul-lib-coverage": "^2.0.0",
        "@types/istanbul-reports": "^3.0.0",
        "@types/node": "*",
        "@types/yargs": "^17.0.8",
        "chalk": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/@jridgewell/gen-mapping": {
      "version": "0.3.12",
      "resolved": "https://registry.npmjs.org/@jridgewell/gen-mapping/-/gen-mapping-0.3.12.tgz",
      "integrity": "sha512-OuLGC46TjB5BbN1dH8JULVVZY4WTdkF7tV9Ys6wLL1rubZnCMstOhNHueU5bLCrnRuDhKPDM4g6sw4Bel5Gzqg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/sourcemap-codec": "^1.5.0",
        "@jridgewell/trace-mapping": "^0.3.24"
      }
    },
    "node_modules/@jridgewell/resolve-uri": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/@jridgewell/resolve-uri/-/resolve-uri-3.1.2.tgz",
      "integrity": "sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.0.0"
      }
    },
    "node_modules/@jridgewell/sourcemap-codec": {
      "version": "1.5.4",
      "resolved": "https://registry.npmjs.org/@jridgewell/sourcemap-codec/-/sourcemap-codec-1.5.4.tgz",
      "integrity": "sha512-VT2+G1VQs/9oz078bLrYbecdZKs912zQlkelYpuf+SXF+QvZDYJlbx/LSx+meSAwdDFnF8FVXW92AVjjkVmgFw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@jridgewell/trace-mapping": {
      "version": "0.3.29",
      "resolved": "https://registry.npmjs.org/@jridgewell/trace-mapping/-/trace-mapping-0.3.29.tgz",
      "integrity": "sha512-uw6guiW/gcAGPDhLmd77/6lW8QLeiV5RUTsAX46Db6oLhGaVj4lhnPwb184s1bkc8kdVg/+h988dro8GRDpmYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jridgewell/resolve-uri": "^3.1.0",
        "@jridgewell/sourcemap-codec": "^1.4.14"
      }
    },
    "node_modules/@js-sdsl/ordered-map": {
      "version": "4.4.2",
      "resolved": "https://registry.npmjs.org/@js-sdsl/ordered-map/-/ordered-map-4.4.2.tgz",
      "integrity": "sha512-iUKgm52T8HOE/makSxjqoWhe95ZJA1/G1sYsGev2JDKUSS14KAgg1LHb+Ba+IPow0xflbnSkOsZcO08C7w1gYw==",
      "license": "MIT",
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/js-sdsl"
      }
    },
    "node_modules/@langchain/community": {
      "version": "0.3.49",
      "resolved": "https://registry.npmjs.org/@langchain/community/-/community-0.3.49.tgz",
      "integrity": "sha512-1AAo9mvr1FmqYHUpXhYI8P4NBPC4t9TfUAuvefEImrtb3gZ60fPelVu17ljWlKJcHC1hPSHYpPJWm0Yx7yRvrw==",
      "license": "MIT",
      "dependencies": {
        "@langchain/openai": ">=0.2.0 <0.7.0",
        "@langchain/weaviate": "^0.2.0",
        "binary-extensions": "^2.2.0",
        "expr-eval": "^2.0.2",
        "flat": "^5.0.2",
        "js-yaml": "^4.1.0",
        "langchain": ">=0.2.3 <0.3.0 || >=0.3.4 <0.4.0",
        "langsmith": "^0.3.33",
        "uuid": "^10.0.0",
        "zod": "^3.25.32"
      },
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@arcjet/redact": "^v1.0.0-alpha.23",
        "@aws-crypto/sha256-js": "^5.0.0",
        "@aws-sdk/client-bedrock-agent-runtime": "^3.749.0",
        "@aws-sdk/client-bedrock-runtime": "^3.749.0",
        "@aws-sdk/client-dynamodb": "^3.749.0",
        "@aws-sdk/client-kendra": "^3.749.0",
        "@aws-sdk/client-lambda": "^3.749.0",
        "@aws-sdk/client-s3": "^3.749.0",
        "@aws-sdk/client-sagemaker-runtime": "^3.749.0",
        "@aws-sdk/client-sfn": "^3.749.0",
        "@aws-sdk/credential-provider-node": "^3.388.0",
        "@azure/search-documents": "^12.0.0",
        "@azure/storage-blob": "^12.15.0",
        "@browserbasehq/sdk": "*",
        "@browserbasehq/stagehand": "^1.0.0",
        "@clickhouse/client": "^0.2.5",
        "@cloudflare/ai": "*",
        "@datastax/astra-db-ts": "^1.0.0",
        "@elastic/elasticsearch": "^8.4.0",
        "@getmetal/metal-sdk": "*",
        "@getzep/zep-cloud": "^1.0.6",
        "@getzep/zep-js": "^0.9.0",
        "@gomomento/sdk": "^1.51.1",
        "@gomomento/sdk-core": "^1.51.1",
        "@google-ai/generativelanguage": "*",
        "@google-cloud/storage": "^6.10.1 || ^7.7.0",
        "@gradientai/nodejs-sdk": "^1.2.0",
        "@huggingface/inference": "^4.0.5",
        "@huggingface/transformers": "^3.5.2",
        "@ibm-cloud/watsonx-ai": "*",
        "@lancedb/lancedb": "^0.12.0",
        "@langchain/core": ">=0.3.58 <0.4.0",
        "@layerup/layerup-security": "^1.5.12",
        "@libsql/client": "^0.14.0",
        "@mendable/firecrawl-js": "^1.4.3",
        "@mlc-ai/web-llm": "*",
        "@mozilla/readability": "*",
        "@neondatabase/serverless": "*",
        "@notionhq/client": "^2.2.10",
        "@opensearch-project/opensearch": "*",
        "@pinecone-database/pinecone": "*",
        "@planetscale/database": "^1.8.0",
        "@premai/prem-sdk": "^0.3.25",
        "@qdrant/js-client-rest": "^1.8.2",
        "@raycast/api": "^1.55.2",
        "@rockset/client": "^0.9.1",
        "@smithy/eventstream-codec": "^2.0.5",
        "@smithy/protocol-http": "^3.0.6",
        "@smithy/signature-v4": "^2.0.10",
        "@smithy/util-utf8": "^2.0.0",
        "@spider-cloud/spider-client": "^0.0.21",
        "@supabase/supabase-js": "^2.45.0",
        "@tensorflow-models/universal-sentence-encoder": "*",
        "@tensorflow/tfjs-converter": "*",
        "@tensorflow/tfjs-core": "*",
        "@upstash/ratelimit": "^1.1.3 || ^2.0.3",
        "@upstash/redis": "^1.20.6",
        "@upstash/vector": "^1.1.1",
        "@vercel/kv": "*",
        "@vercel/postgres": "*",
        "@writerai/writer-sdk": "^0.40.2",
        "@xata.io/client": "^0.28.0",
        "@zilliz/milvus2-sdk-node": ">=2.3.5",
        "apify-client": "^2.7.1",
        "assemblyai": "^4.6.0",
        "azion": "^1.11.1",
        "better-sqlite3": ">=9.4.0 <12.0.0",
        "cassandra-driver": "^4.7.2",
        "cborg": "^4.1.1",
        "cheerio": "^1.0.0-rc.12",
        "chromadb": "*",
        "closevector-common": "0.1.3",
        "closevector-node": "0.1.6",
        "closevector-web": "0.1.6",
        "cohere-ai": "*",
        "convex": "^1.3.1",
        "crypto-js": "^4.2.0",
        "d3-dsv": "^2.0.0",
        "discord.js": "^14.14.1",
        "dria": "^0.0.3",
        "duck-duck-scrape": "^2.2.5",
        "epub2": "^3.0.1",
        "fast-xml-parser": "*",
        "firebase-admin": "^11.9.0 || ^12.0.0",
        "google-auth-library": "*",
        "googleapis": "*",
        "hnswlib-node": "^3.0.0",
        "html-to-text": "^9.0.5",
        "ibm-cloud-sdk-core": "*",
        "ignore": "^5.2.0",
        "interface-datastore": "^8.2.11",
        "ioredis": "^5.3.2",
        "it-all": "^3.0.4",
        "jsdom": "*",
        "jsonwebtoken": "^9.0.2",
        "llmonitor": "^0.5.9",
        "lodash": "^4.17.21",
        "lunary": "^0.7.10",
        "mammoth": "^1.6.0",
        "mariadb": "^3.4.0",
        "mem0ai": "^2.1.8",
        "mongodb": "^6.17.0",
        "mysql2": "^3.9.8",
        "neo4j-driver": "*",
        "notion-to-md": "^3.1.0",
        "officeparser": "^4.0.4",
        "openai": "*",
        "pdf-parse": "1.1.1",
        "pg": "^8.11.0",
        "pg-copy-streams": "^6.0.5",
        "pickleparser": "^0.2.1",
        "playwright": "^1.32.1",
        "portkey-ai": "^0.1.11",
        "puppeteer": "*",
        "pyodide": ">=0.24.1 <0.27.0",
        "redis": "*",
        "replicate": "*",
        "sonix-speech-recognition": "^2.1.1",
        "srt-parser-2": "^1.2.3",
        "typeorm": "^0.3.20",
        "typesense": "^1.5.3",
        "usearch": "^1.1.1",
        "voy-search": "0.6.2",
        "weaviate-client": "^3.5.2",
        "web-auth-library": "^1.0.3",
        "word-extractor": "*",
        "ws": "^8.14.2",
        "youtubei.js": "*"
      },
      "peerDependenciesMeta": {
        "@arcjet/redact": {
          "optional": true
        },
        "@aws-crypto/sha256-js": {
          "optional": true
        },
        "@aws-sdk/client-bedrock-agent-runtime": {
          "optional": true
        },
        "@aws-sdk/client-bedrock-runtime": {
          "optional": true
        },
        "@aws-sdk/client-dynamodb": {
          "optional": true
        },
        "@aws-sdk/client-kendra": {
          "optional": true
        },
        "@aws-sdk/client-lambda": {
          "optional": true
        },
        "@aws-sdk/client-s3": {
          "optional": true
        },
        "@aws-sdk/client-sagemaker-runtime": {
          "optional": true
        },
        "@aws-sdk/client-sfn": {
          "optional": true
        },
        "@aws-sdk/credential-provider-node": {
          "optional": true
        },
        "@aws-sdk/dsql-signer": {
          "optional": true
        },
        "@azure/search-documents": {
          "optional": true
        },
        "@azure/storage-blob": {
          "optional": true
        },
        "@browserbasehq/sdk": {
          "optional": true
        },
        "@clickhouse/client": {
          "optional": true
        },
        "@cloudflare/ai": {
          "optional": true
        },
        "@datastax/astra-db-ts": {
          "optional": true
        },
        "@elastic/elasticsearch": {
          "optional": true
        },
        "@getmetal/metal-sdk": {
          "optional": true
        },
        "@getzep/zep-cloud": {
          "optional": true
        },
        "@getzep/zep-js": {
          "optional": true
        },
        "@gomomento/sdk": {
          "optional": true
        },
        "@gomomento/sdk-core": {
          "optional": true
        },
        "@google-ai/generativelanguage": {
          "optional": true
        },
        "@google-cloud/storage": {
          "optional": true
        },
        "@gradientai/nodejs-sdk": {
          "optional": true
        },
        "@huggingface/inference": {
          "optional": true
        },
        "@huggingface/transformers": {
          "optional": true
        },
        "@lancedb/lancedb": {
          "optional": true
        },
        "@layerup/layerup-security": {
          "optional": true
        },
        "@libsql/client": {
          "optional": true
        },
        "@mendable/firecrawl-js": {
          "optional": true
        },
        "@mlc-ai/web-llm": {
          "optional": true
        },
        "@mozilla/readability": {
          "optional": true
        },
        "@neondatabase/serverless": {
          "optional": true
        },
        "@notionhq/client": {
          "optional": true
        },
        "@opensearch-project/opensearch": {
          "optional": true
        },
        "@pinecone-database/pinecone": {
          "optional": true
        },
        "@planetscale/database": {
          "optional": true
        },
        "@premai/prem-sdk": {
          "optional": true
        },
        "@qdrant/js-client-rest": {
          "optional": true
        },
        "@raycast/api": {
          "optional": true
        },
        "@rockset/client": {
          "optional": true
        },
        "@smithy/eventstream-codec": {
          "optional": true
        },
        "@smithy/protocol-http": {
          "optional": true
        },
        "@smithy/signature-v4": {
          "optional": true
        },
        "@smithy/util-utf8": {
          "optional": true
        },
        "@spider-cloud/spider-client": {
          "optional": true
        },
        "@supabase/supabase-js": {
          "optional": true
        },
        "@tensorflow-models/universal-sentence-encoder": {
          "optional": true
        },
        "@tensorflow/tfjs-converter": {
          "optional": true
        },
        "@tensorflow/tfjs-core": {
          "optional": true
        },
        "@upstash/ratelimit": {
          "optional": true
        },
        "@upstash/redis": {
          "optional": true
        },
        "@upstash/vector": {
          "optional": true
        },
        "@vercel/kv": {
          "optional": true
        },
        "@vercel/postgres": {
          "optional": true
        },
        "@writerai/writer-sdk": {
          "optional": true
        },
        "@xata.io/client": {
          "optional": true
        },
        "@zilliz/milvus2-sdk-node": {
          "optional": true
        },
        "apify-client": {
          "optional": true
        },
        "assemblyai": {
          "optional": true
        },
        "azion": {
          "optional": true
        },
        "better-sqlite3": {
          "optional": true
        },
        "cassandra-driver": {
          "optional": true
        },
        "cborg": {
          "optional": true
        },
        "cheerio": {
          "optional": true
        },
        "chromadb": {
          "optional": true
        },
        "closevector-common": {
          "optional": true
        },
        "closevector-node": {
          "optional": true
        },
        "closevector-web": {
          "optional": true
        },
        "cohere-ai": {
          "optional": true
        },
        "convex": {
          "optional": true
        },
        "crypto-js": {
          "optional": true
        },
        "d3-dsv": {
          "optional": true
        },
        "discord.js": {
          "optional": true
        },
        "dria": {
          "optional": true
        },
        "duck-duck-scrape": {
          "optional": true
        },
        "epub2": {
          "optional": true
        },
        "fast-xml-parser": {
          "optional": true
        },
        "firebase-admin": {
          "optional": true
        },
        "google-auth-library": {
          "optional": true
        },
        "googleapis": {
          "optional": true
        },
        "hnswlib-node": {
          "optional": true
        },
        "html-to-text": {
          "optional": true
        },
        "ignore": {
          "optional": true
        },
        "interface-datastore": {
          "optional": true
        },
        "ioredis": {
          "optional": true
        },
        "it-all": {
          "optional": true
        },
        "jsdom": {
          "optional": true
        },
        "jsonwebtoken": {
          "optional": true
        },
        "llmonitor": {
          "optional": true
        },
        "lodash": {
          "optional": true
        },
        "lunary": {
          "optional": true
        },
        "mammoth": {
          "optional": true
        },
        "mariadb": {
          "optional": true
        },
        "mem0ai": {
          "optional": true
        },
        "mongodb": {
          "optional": true
        },
        "mysql2": {
          "optional": true
        },
        "neo4j-driver": {
          "optional": true
        },
        "notion-to-md": {
          "optional": true
        },
        "officeparser": {
          "optional": true
        },
        "pdf-parse": {
          "optional": true
        },
        "pg": {
          "optional": true
        },
        "pg-copy-streams": {
          "optional": true
        },
        "pickleparser": {
          "optional": true
        },
        "playwright": {
          "optional": true
        },
        "portkey-ai": {
          "optional": true
        },
        "puppeteer": {
          "optional": true
        },
        "pyodide": {
          "optional": true
        },
        "redis": {
          "optional": true
        },
        "replicate": {
          "optional": true
        },
        "sonix-speech-recognition": {
          "optional": true
        },
        "srt-parser-2": {
          "optional": true
        },
        "typeorm": {
          "optional": true
        },
        "typesense": {
          "optional": true
        },
        "usearch": {
          "optional": true
        },
        "voy-search": {
          "optional": true
        },
        "weaviate-client": {
          "optional": true
        },
        "web-auth-library": {
          "optional": true
        },
        "word-extractor": {
          "optional": true
        },
        "ws": {
          "optional": true
        },
        "youtubei.js": {
          "optional": true
        }
      }
    },
    "node_modules/@langchain/community/node_modules/uuid": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-10.0.0.tgz",
      "integrity": "sha512-8XkAphELsDnEGrDxUOHB3RGvXz6TeuYSGEZBOjtTtPm2lwhGBjLgOzLHB63IUWfBpNucQjND6d3AOudO+H3RWQ==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/@langchain/core": {
      "version": "0.3.66",
      "resolved": "https://registry.npmjs.org/@langchain/core/-/core-0.3.66.tgz",
      "integrity": "sha512-d3SgSDOlgOjdIbReIXVQl9HaQzKqO/5+E+o3kJwoKXLGP9dxi7+lMyaII7yv7G8/aUxMWLwFES9zc1jFoeJEZw==",
      "license": "MIT",
      "dependencies": {
        "@cfworker/json-schema": "^4.0.2",
        "ansi-styles": "^5.0.0",
        "camelcase": "6",
        "decamelize": "1.2.0",
        "js-tiktoken": "^1.0.12",
        "langsmith": "^0.3.46",
        "mustache": "^4.2.0",
        "p-queue": "^6.6.2",
        "p-retry": "4",
        "uuid": "^10.0.0",
        "zod": "^3.25.32",
        "zod-to-json-schema": "^3.22.3"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@langchain/core/node_modules/uuid": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-10.0.0.tgz",
      "integrity": "sha512-8XkAphELsDnEGrDxUOHB3RGvXz6TeuYSGEZBOjtTtPm2lwhGBjLgOzLHB63IUWfBpNucQjND6d3AOudO+H3RWQ==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/@langchain/openai": {
      "version": "0.6.2",
      "resolved": "https://registry.npmjs.org/@langchain/openai/-/openai-0.6.2.tgz",
      "integrity": "sha512-OjdSfGENdz4tR9TPN4KTat7vJIE6cgt7vT0z69qU1J1aHCs9MyNwqdaQFF++LVlZAae9aTpyCyqeODyge42oKw==",
      "license": "MIT",
      "dependencies": {
        "js-tiktoken": "^1.0.12",
        "openai": "^5.3.0",
        "zod": "^3.25.32"
      },
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@langchain/core": ">=0.3.58 <0.4.0"
      }
    },
    "node_modules/@langchain/openai/node_modules/openai": {
      "version": "5.10.2",
      "resolved": "https://registry.npmjs.org/openai/-/openai-5.10.2.tgz",
      "integrity": "sha512-n+vi74LzHtvlKcDPn9aApgELGiu5CwhaLG40zxLTlFQdoSJCLACORIPC2uVQ3JEYAbqapM+XyRKFy2Thej7bIw==",
      "license": "Apache-2.0",
      "bin": {
        "openai": "bin/cli"
      },
      "peerDependencies": {
        "ws": "^8.18.0",
        "zod": "^3.23.8"
      },
      "peerDependenciesMeta": {
        "ws": {
          "optional": true
        },
        "zod": {
          "optional": true
        }
      }
    },
    "node_modules/@langchain/textsplitters": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/@langchain/textsplitters/-/textsplitters-0.1.0.tgz",
      "integrity": "sha512-djI4uw9rlkAb5iMhtLED+xJebDdAG935AdP4eRTB02R7OB/act55Bj9wsskhZsvuyQRpO4O1wQOp85s6T6GWmw==",
      "license": "MIT",
      "dependencies": {
        "js-tiktoken": "^1.0.12"
      },
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@langchain/core": ">=0.2.21 <0.4.0"
      }
    },
    "node_modules/@langchain/weaviate": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/@langchain/weaviate/-/weaviate-0.2.1.tgz",
      "integrity": "sha512-rlfAKF+GB0A5MUrol34oDrBkl4q6AefARk9KDW+LfzhV/74pZZLZyIPYPxvE4XwI3gvpwp024DNsDxK/4UW0/g==",
      "license": "MIT",
      "dependencies": {
        "uuid": "^10.0.0",
        "weaviate-client": "^3.5.2"
      },
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@langchain/core": ">=0.2.21 <0.4.0"
      }
    },
    "node_modules/@langchain/weaviate/node_modules/uuid": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-10.0.0.tgz",
      "integrity": "sha512-8XkAphELsDnEGrDxUOHB3RGvXz6TeuYSGEZBOjtTtPm2lwhGBjLgOzLHB63IUWfBpNucQjND6d3AOudO+H3RWQ==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/@noble/hashes": {
      "version": "1.8.0",
      "resolved": "https://registry.npmjs.org/@noble/hashes/-/hashes-1.8.0.tgz",
      "integrity": "sha512-jCs9ldd7NwzpgXDIf6P3+NrHh9/sD6CQdxHyjQI+h/6rDNo88ypBxxz45UDuZHz9r3tNz7N/VInSVoVdtXEI4A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^14.21.3 || >=16"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      }
    },
    "node_modules/@npmcli/fs": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/@npmcli/fs/-/fs-1.1.1.tgz",
      "integrity": "sha512-8KG5RD0GVP4ydEzRn/I4BNDuxDtqVbOdm8675T49OIG/NGhaK0pjPX7ZcDlvKYbA+ulvVK3ztfcF4uBdOxuJbQ==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "@gar/promisify": "^1.0.1",
        "semver": "^7.3.5"
      }
    },
    "node_modules/@npmcli/move-file": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@npmcli/move-file/-/move-file-1.1.2.tgz",
      "integrity": "sha512-1SUf/Cg2GzGDyaf15aR9St9TWlb+XvbZXWpDx8YKs7MLzMH/BCeopv+y9vzrzgkfykCGuWOlSu3mZhj2+FQcrg==",
      "deprecated": "This functionality has been moved to @npmcli/fs",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "mkdirp": "^1.0.4",
        "rimraf": "^3.0.2"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@npmcli/move-file/node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/@paralleldrive/cuid2": {
      "version": "2.2.2",
      "resolved": "https://registry.npmjs.org/@paralleldrive/cuid2/-/cuid2-2.2.2.tgz",
      "integrity": "sha512-ZOBkgDwEdoYVlSeRbYYXs0S9MejQofiVYoTbKzy/6GQa39/q5tQU2IX46+shYnUkpEl3wc+J6wRlar7r2EK2xA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@noble/hashes": "^1.1.5"
      }
    },
    "node_modules/@pkgjs/parseargs": {
      "version": "0.11.0",
      "resolved": "https://registry.npmjs.org/@pkgjs/parseargs/-/parseargs-0.11.0.tgz",
      "integrity": "sha512-+1VkjdD0QBLPodGrJUeqarH8VAIvQODIbwh9XpP5Syisf7YoQgsJKPNFoqqLQlu+VQ/tVSshMR6loPMn8U+dPg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/@playwright/test": {
      "version": "1.54.1",
      "resolved": "https://registry.npmjs.org/@playwright/test/-/test-1.54.1.tgz",
      "integrity": "sha512-FS8hQ12acieG2dYSksmLOF7BNxnVf2afRJdCuM1eMSxj6QTSE6G4InGF7oApGgDb65MX7AwMVlIkpru0yZA4Xw==",
      "license": "Apache-2.0",
      "peer": true,
      "dependencies": {
        "playwright": "1.54.1"
      },
      "bin": {
        "playwright": "cli.js"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@protobufjs/aspromise": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/aspromise/-/aspromise-1.1.2.tgz",
      "integrity": "sha512-j+gKExEuLmKwvz3OgROXtrJ2UG2x8Ch2YZUxahh+s1F2HZ+wAceUNLkvy6zKCPVRkU++ZWQrdxsUeQXmcg4uoQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/base64": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/base64/-/base64-1.1.2.tgz",
      "integrity": "sha512-AZkcAA5vnN/v4PDqKyMR5lx7hZttPDgClv83E//FMNhR2TMcLUhfRUBHCmSl0oi9zMgDDqRUJkSxO3wm85+XLg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/codegen": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/@protobufjs/codegen/-/codegen-2.0.4.tgz",
      "integrity": "sha512-YyFaikqM5sH0ziFZCN3xDC7zeGaB/d0IUb9CATugHWbd1FRFwWwt4ld4OYMPWu5a3Xe01mGAULCdqhMlPl29Jg==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/eventemitter": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/eventemitter/-/eventemitter-1.1.0.tgz",
      "integrity": "sha512-j9ednRT81vYJ9OfVuXG6ERSTdEL1xVsNgqpkxMsbIabzSo3goCjDIveeGv5d03om39ML71RdmrGNjG5SReBP/Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/fetch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/fetch/-/fetch-1.1.0.tgz",
      "integrity": "sha512-lljVXpqXebpsijW71PZaCYeIcE5on1w5DlQy5WH6GLbFryLUrBD4932W/E2BSpfRJWseIL4v/KPgBFxDOIdKpQ==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.1",
        "@protobufjs/inquire": "^1.1.0"
      }
    },
    "node_modules/@protobufjs/float": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/float/-/float-1.0.2.tgz",
      "integrity": "sha512-Ddb+kVXlXst9d+R9PfTIxh1EdNkgoRe5tOX6t01f1lYWOvJnSPDBlG241QLzcyPdoNTsblLUdujGSE4RzrTZGQ==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/inquire": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/inquire/-/inquire-1.1.0.tgz",
      "integrity": "sha512-kdSefcPdruJiFMVSbn801t4vFK7KB/5gd2fYvrxhuJYg8ILrmn9SKSX2tZdV6V+ksulWqS7aXjBcRXl3wHoD9Q==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/path": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@protobufjs/path/-/path-1.1.2.tgz",
      "integrity": "sha512-6JOcJ5Tm08dOHAbdR3GrvP+yUUfkjG5ePsHYczMFLq3ZmMkAD98cDgcT2iA1lJ9NVwFd4tH/iSSoe44YWkltEA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/pool": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/pool/-/pool-1.1.0.tgz",
      "integrity": "sha512-0kELaGSIDBKvcgS4zkjz1PeddatrjYcmMWOlAuAPwAeccUrPHdUqo/J6LiymHHEiJT5NrF1UVwxY14f+fy4WQw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@protobufjs/utf8": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/@protobufjs/utf8/-/utf8-1.1.0.tgz",
      "integrity": "sha512-Vvn3zZrhQZkkBE8LSuW3em98c0FwgO4nxzv6OdSxPKJIEKY2bGbHn+mhGIPerzI4twdxaP8/0+06HBpwf345Lw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/@puppeteer/browsers": {
      "version": "2.10.6",
      "resolved": "https://registry.npmjs.org/@puppeteer/browsers/-/browsers-2.10.6.tgz",
      "integrity": "sha512-pHUn6ZRt39bP3698HFQlu2ZHCkS/lPcpv7fVQcGBSzNNygw171UXAKrCUhy+TEMw4lEttOKDgNpb04hwUAJeiQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "debug": "^4.4.1",
        "extract-zip": "^2.0.1",
        "progress": "^2.0.3",
        "proxy-agent": "^6.5.0",
        "semver": "^7.7.2",
        "tar-fs": "^3.1.0",
        "yargs": "^17.7.2"
      },
      "bin": {
        "browsers": "lib/cjs/main-cli.js"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/@puppeteer/browsers/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/@puppeteer/browsers/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/@puppeteer/browsers/node_modules/tar-fs": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/tar-fs/-/tar-fs-3.1.0.tgz",
      "integrity": "sha512-5Mty5y/sOF1YWj1J6GiBodjlDc05CUR8PKXrsnFAiSG0xA+GHeWLovaZPYUDXkH/1iKRf2+M5+OrRgzC7O9b7w==",
      "license": "MIT",
      "dependencies": {
        "pump": "^3.0.0",
        "tar-stream": "^3.1.5"
      },
      "optionalDependencies": {
        "bare-fs": "^4.0.1",
        "bare-path": "^3.0.0"
      }
    },
    "node_modules/@puppeteer/browsers/node_modules/tar-stream": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-3.1.7.tgz",
      "integrity": "sha512-qJj60CXt7IU1Ffyc3NJMjh6EkuCFej46zUqJ4J7pqYlThyd9bO0XBTmcOIhSzZJVWfsLks0+nle/j538YAW9RQ==",
      "license": "MIT",
      "dependencies": {
        "b4a": "^1.6.4",
        "fast-fifo": "^1.2.0",
        "streamx": "^2.15.0"
      }
    },
    "node_modules/@sinclair/typebox": {
      "version": "0.27.8",
      "resolved": "https://registry.npmjs.org/@sinclair/typebox/-/typebox-0.27.8.tgz",
      "integrity": "sha512-+Fj43pSMwJs4KRrH/938Uf+uAELIgVBmQzg/q1YG10djyfA3TnrU8N8XzqCh/okZdszqBQTZf96idMfE5lnwTA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@sinonjs/commons": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/@sinonjs/commons/-/commons-3.0.1.tgz",
      "integrity": "sha512-K3mCHKQ9sVh8o1C9cxkwxaOmXoAMlDxC1mYyHrjqOWEcBjYr76t96zL2zlj5dUGZ3HSw240X1qgH3Mjf1yJWpQ==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "type-detect": "4.0.8"
      }
    },
    "node_modules/@sinonjs/fake-timers": {
      "version": "10.3.0",
      "resolved": "https://registry.npmjs.org/@sinonjs/fake-timers/-/fake-timers-10.3.0.tgz",
      "integrity": "sha512-V4BG07kuYSUkTCSBHG8G8TNhM+F19jXFWnQtzj+we8DrkpSBCee9Z3Ms8yiGer/dlmhe35/Xdgyo3/0rQKg7YA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@sinonjs/commons": "^3.0.0"
      }
    },
    "node_modules/@tokenizer/token": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/@tokenizer/token/-/token-0.3.0.tgz",
      "integrity": "sha512-OvjF+z51L3ov0OyAU0duzsYuvO01PH7x4t6DJx+guahgTnBHkhJdG7soQeTSFLWN3efnHyibZ4Z8l2EuWwJN3A==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/@tootallnate/once": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/@tootallnate/once/-/once-1.1.2.tgz",
      "integrity": "sha512-RbzJvlNzmRq5c3O09UipeuXno4tA1FE6ikOjxZK0tuxVv3412l64l5t1W5pj4+rJq9vpkm/kwiR07aZXnsKPxw==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/@tootallnate/quickjs-emscripten": {
      "version": "0.23.0",
      "resolved": "https://registry.npmjs.org/@tootallnate/quickjs-emscripten/-/quickjs-emscripten-0.23.0.tgz",
      "integrity": "sha512-C5Mc6rdnsaJDjO3UpGW/CQTHtCKaYlScZTly4JIu97Jxo/odCiH0ITnDXSJPTOrEKk/ycSZ0AOgTmkDtkOsvIA==",
      "license": "MIT"
    },
    "node_modules/@types/babel__core": {
      "version": "7.20.5",
      "resolved": "https://registry.npmjs.org/@types/babel__core/-/babel__core-7.20.5.tgz",
      "integrity": "sha512-qoQprZvz5wQFJwMDqeseRXWv3rqMvhgpbXFfVyWhbx9X47POIA6i/+dXefEmZKoAgOaTdaIgNSMqMIU61yRyzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.20.7",
        "@babel/types": "^7.20.7",
        "@types/babel__generator": "*",
        "@types/babel__template": "*",
        "@types/babel__traverse": "*"
      }
    },
    "node_modules/@types/babel__generator": {
      "version": "7.27.0",
      "resolved": "https://registry.npmjs.org/@types/babel__generator/-/babel__generator-7.27.0.tgz",
      "integrity": "sha512-ufFd2Xi92OAVPYsy+P4n7/U7e68fex0+Ee8gSG9KX7eo084CWiQ4sdxktvdl0bOPupXtVJPY19zk6EwWqUQ8lg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__template": {
      "version": "7.4.4",
      "resolved": "https://registry.npmjs.org/@types/babel__template/-/babel__template-7.4.4.tgz",
      "integrity": "sha512-h/NUaSyG5EyxBIp8YRxo4RMe2/qQgvyowRwVMzhYhBCONbW8PUsg4lkFMrhgZhUe5z3L3MiLDuvyJ/CaPa2A8A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/parser": "^7.1.0",
        "@babel/types": "^7.0.0"
      }
    },
    "node_modules/@types/babel__traverse": {
      "version": "7.20.7",
      "resolved": "https://registry.npmjs.org/@types/babel__traverse/-/babel__traverse-7.20.7.tgz",
      "integrity": "sha512-dkO5fhS7+/oos4ciWxyEyjWe48zmG6wbCheo/G2ZnHx4fs3EU6YC6UM8rk56gAjNJ9P3MTH2jo5jb92/K6wbng==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/types": "^7.20.7"
      }
    },
    "node_modules/@types/debug": {
      "version": "4.1.12",
      "resolved": "https://registry.npmjs.org/@types/debug/-/debug-4.1.12.tgz",
      "integrity": "sha512-vIChWdVG3LG1SMxEvI/AK+FWJthlrqlTu7fbrlywTkkaONwk/UAGaULXRlf8vkzFBLVm0zkMdCquhL5aOjhXPQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@types/ms": "*"
      }
    },
    "node_modules/@types/graceful-fs": {
      "version": "4.1.9",
      "resolved": "https://registry.npmjs.org/@types/graceful-fs/-/graceful-fs-4.1.9.tgz",
      "integrity": "sha512-olP3sd1qOEe5dXTSaFvQG+02VdRXcdytWLAZsAq1PecU8uqQAhkrnbli7DagjtXKW/Bl7YJbUsa8MPcuc8LHEQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@types/istanbul-lib-coverage": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-coverage/-/istanbul-lib-coverage-2.0.6.tgz",
      "integrity": "sha512-2QF/t/auWm0lsy8XtKVPG19v3sSOQlJe/YHZgfjb/KBBHOGSV+J2q/S671rcq9uTBrLAXmZpqJiaQbMT+zNU1w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/istanbul-lib-report": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/@types/istanbul-lib-report/-/istanbul-lib-report-3.0.3.tgz",
      "integrity": "sha512-NQn7AHQnk/RSLOxrBbGyJM/aVQ+pjj5HCgasFxc0K/KhoATfQ/47AyUl15I2yBUpihjmas+a+VJBOqecrFH+uA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-coverage": "*"
      }
    },
    "node_modules/@types/istanbul-reports": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/@types/istanbul-reports/-/istanbul-reports-3.0.4.tgz",
      "integrity": "sha512-pk2B1NWalF9toCRu6gjBzR69syFjP4Od8WRAX+0mmf9lAjCRicLOWc+ZrxZHx/0XRjotgkF9t6iaMJ+aXcOdZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/istanbul-lib-report": "*"
      }
    },
    "node_modules/@types/ms": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/@types/ms/-/ms-2.1.0.tgz",
      "integrity": "sha512-GsCCIZDE/p3i96vtEqx+7dBUGXrc7zeSK3wwPHIaRThS+9OhWIXRqzs4d6k1SVU8g91DrNRWxWUGhp5KXQb2VA==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/@types/node": {
      "version": "18.19.120",
      "resolved": "https://registry.npmjs.org/@types/node/-/node-18.19.120.tgz",
      "integrity": "sha512-WtCGHFXnVI8WHLxDAt5TbnCM4eSE+nI0QN2NJtwzcgMhht2eNz6V9evJrk+lwC8bCY8OWV5Ym8Jz7ZEyGnKnMA==",
      "license": "MIT",
      "dependencies": {
        "undici-types": "~5.26.4"
      }
    },
    "node_modules/@types/node-fetch": {
      "version": "2.6.12",
      "resolved": "https://registry.npmjs.org/@types/node-fetch/-/node-fetch-2.6.12.tgz",
      "integrity": "sha512-8nneRWKCg3rMtF69nLQJnOYUcbafYeFSjqkw3jCRLsqkWFlHaoQrr5mXmofFGOx3DKn7UfmBMyov8ySvLRVldA==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@types/node": "*",
        "form-data": "^4.0.0"
      }
    },
    "node_modules/@types/retry": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/@types/retry/-/retry-0.12.0.tgz",
      "integrity": "sha512-wWKOClTTiizcZhXnPY4wikVAwmdYHp8q6DmC+EJUzAMsycb7HB32Kh9RN4+0gExjmPmZSAQjgURXIGATPegAvA==",
      "license": "MIT"
    },
    "node_modules/@types/stack-utils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/@types/stack-utils/-/stack-utils-2.0.3.tgz",
      "integrity": "sha512-9aEbYZ3TbYMznPdcdr3SmIrLXwC/AKZXQeCf9Pgao5CKb8CyHuEX5jzWPTkvregvhRJHcpRO6BFoGW9ycaOkYw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/tough-cookie": {
      "version": "4.0.5",
      "resolved": "https://registry.npmjs.org/@types/tough-cookie/-/tough-cookie-4.0.5.tgz",
      "integrity": "sha512-/Ad8+nIOV7Rl++6f1BdKxFSMgmoqEoYbHRpPcx3JEfv8VRsQe9Z4mCXeJBzxs7mbHY/XOZZuXlRNfhpVPbs6ZA==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/@types/uuid": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/@types/uuid/-/uuid-10.0.0.tgz",
      "integrity": "sha512-7gqG38EyHgyP1S+7+xomFtL+ZNHcKv6DwNaCZmJmo1vgMugyF3TCnXVg4t1uk89mLNwnLtnY3TpOpCOyp1/xHQ==",
      "license": "MIT"
    },
    "node_modules/@types/yargs": {
      "version": "17.0.33",
      "resolved": "https://registry.npmjs.org/@types/yargs/-/yargs-17.0.33.tgz",
      "integrity": "sha512-WpxBCKWPLr4xSsHgz511rFJAM+wS28w2zEO1QDNY5zM/S8ok70NNfztH0xwhqKyaK0OHCbN98LDAZuy1ctxDkA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/yargs-parser": "*"
      }
    },
    "node_modules/@types/yargs-parser": {
      "version": "21.0.3",
      "resolved": "https://registry.npmjs.org/@types/yargs-parser/-/yargs-parser-21.0.3.tgz",
      "integrity": "sha512-I4q9QU9MQv4oEOz4tAHJtNz1cwuLxn2F3xcc2iV5WdqLPpUnj30aUuxt1mAxYTG+oe8CZMV/+6rU4S4gRDzqtQ==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/@types/yauzl": {
      "version": "2.10.3",
      "resolved": "https://registry.npmjs.org/@types/yauzl/-/yauzl-2.10.3.tgz",
      "integrity": "sha512-oJoftv0LSuaDZE3Le4DbKX+KS9G36NzOeSap90UIK0yMA/NhKJhqlSGtNDORNRaIbQfzjXDrQa0ytJ6mNRGz/Q==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@types/node": "*"
      }
    },
    "node_modules/@xmldom/xmldom": {
      "version": "0.8.10",
      "resolved": "https://registry.npmjs.org/@xmldom/xmldom/-/xmldom-0.8.10.tgz",
      "integrity": "sha512-2WALfTl4xo2SkGCYRt6rDTFfk9R1czmBvUQy12gK2KuRKIpWEhcbbzy8EZXtz/jkRqHX8bFEc6FC1HjX4TUWYw==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/abbrev": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/abbrev/-/abbrev-1.1.1.tgz",
      "integrity": "sha512-nne9/IiQ/hzIhY6pdDnbBtz7DjPTKrY00P/zvPSm5pOFkl6xuGrGnXn/VtTNNfNtAfZ9/1RtehkszU9qcTii0Q==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/abort-controller": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/abort-controller/-/abort-controller-3.0.0.tgz",
      "integrity": "sha512-h8lQ8tacZYnR3vNQTgibj+tODHI5/+l06Au2Pcriv/Gmet0eaj4TwWH41sO9wnHDiQsEj19q0drzdWdeAHtweg==",
      "license": "MIT",
      "dependencies": {
        "event-target-shim": "^5.0.0"
      },
      "engines": {
        "node": ">=6.5"
      }
    },
    "node_modules/abort-controller-x": {
      "version": "0.4.3",
      "resolved": "https://registry.npmjs.org/abort-controller-x/-/abort-controller-x-0.4.3.tgz",
      "integrity": "sha512-VtUwTNU8fpMwvWGn4xE93ywbogTYsuT+AUxAXOeelbXuQVIwNmC5YLeho9sH4vZ4ITW8414TTAOG1nW6uIVHCA==",
      "license": "MIT"
    },
    "node_modules/accepts": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/accepts/-/accepts-1.3.8.tgz",
      "integrity": "sha512-PYAthTa2m2VKxuvSD3DPC/Gy+U+sOA1LAuT8mkmRuvw+NACSaeXEQ+NHcVF7rONl6qcaxV3Uuemwawk+7+SJLw==",
      "license": "MIT",
      "dependencies": {
        "mime-types": "~2.1.34",
        "negotiator": "0.6.3"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/acorn": {
      "version": "8.15.0",
      "resolved": "https://registry.npmjs.org/acorn/-/acorn-8.15.0.tgz",
      "integrity": "sha512-NZyJarBfL7nWwIq+FDL6Zp/yHEhePMNnnJ0y3qfieCrmNvYct8uvtiV41UvlSe6apAfk0fY1FbWx+NwfmpvtTg==",
      "license": "MIT",
      "bin": {
        "acorn": "bin/acorn"
      },
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/agent-base": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-6.0.2.tgz",
      "integrity": "sha512-RZNwNclF7+MS/8bDg70amg32dyeZGZxiDuQmZxKLAlQjr3jGyLx+4Kkk58UO7D2QdgFIQCovuSuZESne6RG6XQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "debug": "4"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/agent-base/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/agent-base/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/agentkeepalive": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/agentkeepalive/-/agentkeepalive-4.6.0.tgz",
      "integrity": "sha512-kja8j7PjmncONqaTsB8fQ+wE2mSU2DJ9D4XKoJ5PFWIdRMa6SLSN1ff4mOr4jCbfRSsxR4keIiySJU0N9T5hIQ==",
      "license": "MIT",
      "dependencies": {
        "humanize-ms": "^1.2.1"
      },
      "engines": {
        "node": ">= 8.0.0"
      }
    },
    "node_modules/aggregate-error": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/aggregate-error/-/aggregate-error-3.1.0.tgz",
      "integrity": "sha512-4I7Td01quW/RpocfNayFdFVk1qSuoh0E7JrbRJ16nH01HhKFQ88INq9Sd+nd72zqRySlr9BmDA8xlEJ6vJMrYA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "clean-stack": "^2.0.0",
        "indent-string": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-escapes": {
      "version": "4.3.2",
      "resolved": "https://registry.npmjs.org/ansi-escapes/-/ansi-escapes-4.3.2.tgz",
      "integrity": "sha512-gKXj5ALrKWQLsYG9jlTRmR/xKluxHV+Z9QEwNIgCfM1/uwPMCuzVVnh5mwTd+OuBZcwSIMbqssNWRm1lE51QaQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "type-fest": "^0.21.3"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/ansi-regex": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/ansi-regex/-/ansi-regex-5.0.1.tgz",
      "integrity": "sha512-quJQXlTSUGL2LH9SUXo8VwsY4soanhgo6LNSm84E1LBcE8s3O0wpdiRzyR9z/ZZJMlMWv37qOOb9pdJlMUEKFQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/ansi-styles": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-5.2.0.tgz",
      "integrity": "sha512-Cxwpt2SfTzTtXcfOlzGEee8O+c+MmUgGrNiBcXnuWxuFJHe6a5Hz7qwhwe5OgaSYI0IJvkLqWX1ASG+cJOkEiA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/anymatch": {
      "version": "3.1.3",
      "resolved": "https://registry.npmjs.org/anymatch/-/anymatch-3.1.3.tgz",
      "integrity": "sha512-KMReFUr0B4t+D+OBkjR3KYqvocp2XaSzO55UcB6mgQMd3KbcE+mWTyvVV7D/zsdEbNnV6acZUutkiHQXvTr1Rw==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "normalize-path": "^3.0.0",
        "picomatch": "^2.0.4"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/append-field": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/append-field/-/append-field-1.0.0.tgz",
      "integrity": "sha512-klpgFSWLW1ZEs8svjfb7g4qWY0YS5imI82dTg+QahUvJ8YqAY0P10Uk8tTyh9ZGuYEZEMaeJYCF5BFuX552hsw==",
      "license": "MIT"
    },
    "node_modules/aproba": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/aproba/-/aproba-2.1.0.tgz",
      "integrity": "sha512-tLIEcj5GuR2RSTnxNKdkK0dJ/GrC7P38sUkiDmDuHfsHmbagTFAxDVIBltoklXEVIQ/f14IL8IMJ5pn9Hez1Ew==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/archiver": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/archiver/-/archiver-7.0.1.tgz",
      "integrity": "sha512-ZcbTaIqJOfCc03QwD468Unz/5Ir8ATtvAHsK+FdXbDIbGfihqh9mrvdcYunQzqn4HrvWWaFyaxJhGZagaJJpPQ==",
      "license": "MIT",
      "dependencies": {
        "archiver-utils": "^5.0.2",
        "async": "^3.2.4",
        "buffer-crc32": "^1.0.0",
        "readable-stream": "^4.0.0",
        "readdir-glob": "^1.1.2",
        "tar-stream": "^3.0.0",
        "zip-stream": "^6.0.1"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/archiver-utils": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/archiver-utils/-/archiver-utils-5.0.2.tgz",
      "integrity": "sha512-wuLJMmIBQYCsGZgYLTy5FIB2pF6Lfb6cXMSF8Qywwk3t20zWnAi7zLcQFdKQmIB8wyZpY5ER38x08GbwtR2cLA==",
      "license": "MIT",
      "dependencies": {
        "glob": "^10.0.0",
        "graceful-fs": "^4.2.0",
        "is-stream": "^2.0.1",
        "lazystream": "^1.0.0",
        "lodash": "^4.17.15",
        "normalize-path": "^3.0.0",
        "readable-stream": "^4.0.0"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/archiver-utils/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/archiver-utils/node_modules/buffer": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.2.1"
      }
    },
    "node_modules/archiver-utils/node_modules/glob": {
      "version": "10.4.5",
      "resolved": "https://registry.npmjs.org/glob/-/glob-10.4.5.tgz",
      "integrity": "sha512-7Bv8RF0k6xjo7d4A/PxYLbUCfb6c+Vpd2/mB2yRDlew7Jb5hEXiCD9ibfO7wpk8i4sevK6DFny9h7EYbM3/sHg==",
      "license": "ISC",
      "dependencies": {
        "foreground-child": "^3.1.0",
        "jackspeak": "^3.1.2",
        "minimatch": "^9.0.4",
        "minipass": "^7.1.2",
        "package-json-from-dist": "^1.0.0",
        "path-scurry": "^1.11.1"
      },
      "bin": {
        "glob": "dist/esm/bin.mjs"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/archiver-utils/node_modules/minimatch": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-9.0.5.tgz",
      "integrity": "sha512-G6T0ZX48xgozx7587koeX9Ys2NYy6Gmv//P89sEte9V9whIapMNF4idKxnW2QtCcLiTWlb/wfCabAtAFWhhBow==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=16 || 14 >=14.17"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/archiver-utils/node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/archiver-utils/node_modules/readable-stream": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-4.7.0.tgz",
      "integrity": "sha512-oIGGmcpTLwPga8Bn6/Z75SVaH1z5dUut2ibSyAMVhmUggWpmDn2dapB0n7f8nwaSiRtepAsfJyfXIO5DCVAODg==",
      "license": "MIT",
      "dependencies": {
        "abort-controller": "^3.0.0",
        "buffer": "^6.0.3",
        "events": "^3.3.0",
        "process": "^0.11.10",
        "string_decoder": "^1.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/archiver-utils/node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/archiver/node_modules/buffer": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.2.1"
      }
    },
    "node_modules/archiver/node_modules/buffer-crc32": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-1.0.0.tgz",
      "integrity": "sha512-Db1SbgBS/fg/392AblrMJk97KggmvYhr4pB5ZIMTWtaivCPMWLkmb7m21cJvpvgK+J3nsU2CmmixNBZx4vFj/w==",
      "license": "MIT",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/archiver/node_modules/readable-stream": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-4.7.0.tgz",
      "integrity": "sha512-oIGGmcpTLwPga8Bn6/Z75SVaH1z5dUut2ibSyAMVhmUggWpmDn2dapB0n7f8nwaSiRtepAsfJyfXIO5DCVAODg==",
      "license": "MIT",
      "dependencies": {
        "abort-controller": "^3.0.0",
        "buffer": "^6.0.3",
        "events": "^3.3.0",
        "process": "^0.11.10",
        "string_decoder": "^1.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/archiver/node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/archiver/node_modules/tar-stream": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-3.1.7.tgz",
      "integrity": "sha512-qJj60CXt7IU1Ffyc3NJMjh6EkuCFej46zUqJ4J7pqYlThyd9bO0XBTmcOIhSzZJVWfsLks0+nle/j538YAW9RQ==",
      "license": "MIT",
      "dependencies": {
        "b4a": "^1.6.4",
        "fast-fifo": "^1.2.0",
        "streamx": "^2.15.0"
      }
    },
    "node_modules/are-we-there-yet": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/are-we-there-yet/-/are-we-there-yet-3.0.1.tgz",
      "integrity": "sha512-QZW4EDmGwlYur0Yyf/b2uGucHQMa8aFUP7eu9ddR73vvhFyt4V0Vl3QHPcTNJ8l6qYOBdxgXdnBXQrHilfRQBg==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "delegates": "^1.0.0",
        "readable-stream": "^3.6.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/are-we-there-yet/node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/argparse": {
      "version": "1.0.10",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-1.0.10.tgz",
      "integrity": "sha512-o5Roy6tNG4SL/FOkCAN6RzjiakZS25RLYFrcMttJqbdd8BWrnA+fGz57iN5Pb06pvBGvl5gQ0B48dJlslXvoTg==",
      "license": "MIT",
      "dependencies": {
        "sprintf-js": "~1.0.2"
      }
    },
    "node_modules/array-flatten": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/array-flatten/-/array-flatten-1.1.1.tgz",
      "integrity": "sha512-PCVAQswWemu6UdxsDFFX/+gVeYqKAod3D3UVm91jHwynguOwAvYPhx8nNlM++NqRcK6CxxpUafjmhIdKiHibqg==",
      "license": "MIT"
    },
    "node_modules/asap": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/asap/-/asap-2.0.6.tgz",
      "integrity": "sha512-BSHWgDSAiKs50o2Re8ppvp3seVHXSRM44cdSsT9FfNEUUZLOGWVCsiWaRPWM1Znn+mqZ1OfVZ3z3DWEzSp7hRA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/ast-types": {
      "version": "0.13.4",
      "resolved": "https://registry.npmjs.org/ast-types/-/ast-types-0.13.4.tgz",
      "integrity": "sha512-x1FCFnFifvYDDzTaLII71vG5uvDwgtmDTEVWAxrgeiR8VjMONcCXJx7E+USjDtHlwFmt9MysbqgF9b9Vjr6w+w==",
      "license": "MIT",
      "dependencies": {
        "tslib": "^2.0.1"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/async": {
      "version": "3.2.6",
      "resolved": "https://registry.npmjs.org/async/-/async-3.2.6.tgz",
      "integrity": "sha512-htCUDlxyyCLMgaM3xXg0C0LW2xqfuQ6p05pCEIsXuyQ+a1koYKTuBMzRNwmybfLgvJDMd0r1LTn4+E0Ti6C2AA==",
      "license": "MIT"
    },
    "node_modules/asynckit": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/asynckit/-/asynckit-0.4.0.tgz",
      "integrity": "sha512-Oei9OH4tRh0YqU3GxhX79dM/mwVgvbZJaSNaRk+bshkj0S5cfHcgYakreBjrHwatXKbz+IoIdYLxrKim2MjW0Q==",
      "license": "MIT"
    },
    "node_modules/axios": {
      "version": "1.11.0",
      "resolved": "https://registry.npmjs.org/axios/-/axios-1.11.0.tgz",
      "integrity": "sha512-1Lx3WLFQWm3ooKDYZD1eXmoGO9fxYQjrycfHFC8P0sCfQVXyROp0p9PFWBehewBOdCwHc+f/b8I0fMto5eSfwA==",
      "license": "MIT",
      "dependencies": {
        "follow-redirects": "^1.15.6",
        "form-data": "^4.0.4",
        "proxy-from-env": "^1.1.0"
      }
    },
    "node_modules/b4a": {
      "version": "1.6.7",
      "resolved": "https://registry.npmjs.org/b4a/-/b4a-1.6.7.tgz",
      "integrity": "sha512-OnAYlL5b7LEkALw87fUVafQw5rVR9RjwGd4KUwNQ6DrrNmaVaUCgLipfVlzrPQ4tWOR9P0IXGNOx50jYCCdSJg==",
      "license": "Apache-2.0"
    },
    "node_modules/babel-jest": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/babel-jest/-/babel-jest-29.7.0.tgz",
      "integrity": "sha512-BrvGY3xZSwEcCzKvKsCi2GgHqDqsYkOP4/by5xCgIwGXQxIEh+8ew3gmrE1y7XRR6LHZIj6yLYnUi/mm2KXKBg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/transform": "^29.7.0",
        "@types/babel__core": "^7.1.14",
        "babel-plugin-istanbul": "^6.1.1",
        "babel-preset-jest": "^29.6.3",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.8.0"
      }
    },
    "node_modules/babel-plugin-istanbul": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/babel-plugin-istanbul/-/babel-plugin-istanbul-6.1.1.tgz",
      "integrity": "sha512-Y1IQok9821cC9onCx5otgFfRm7Lm+I+wwxOx738M/WLPZ9Q42m4IG5W0FNX8WLL2gYMZo3JkuXIH2DOpWM+qwA==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/helper-plugin-utils": "^7.0.0",
        "@istanbuljs/load-nyc-config": "^1.0.0",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-instrument": "^5.0.4",
        "test-exclude": "^6.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-istanbul/node_modules/istanbul-lib-instrument": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-5.2.1.tgz",
      "integrity": "sha512-pzqtp31nLv/XFOzXGuvhCb8qhjmTVo5vjVk19XE4CRlSWz0KoeJ3bw9XsA7nOp9YBf4qHjwBxkDzKcME/J29Yg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/core": "^7.12.3",
        "@babel/parser": "^7.14.7",
        "@istanbuljs/schema": "^0.1.2",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^6.3.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/babel-plugin-istanbul/node_modules/semver": {
      "version": "6.3.1",
      "resolved": "https://registry.npmjs.org/semver/-/semver-6.3.1.tgz",
      "integrity": "sha512-BR7VvDCVHO+q2xBEWskxS6DJE1qRnb7DxzUrogb71CWoSficBxYsiAGd+Kl0mmq/MprG9yArRkyrQxTO6XjMzA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      }
    },
    "node_modules/babel-plugin-jest-hoist": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/babel-plugin-jest-hoist/-/babel-plugin-jest-hoist-29.6.3.tgz",
      "integrity": "sha512-ESAc/RJvGTFEzRwOTT4+lNDk/GNHMkKbNzsvT0qKRfDyyYTskxB5rnU2njIDYVxXCBHHEI1c0YwHob3WaYujOg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/template": "^7.3.3",
        "@babel/types": "^7.3.3",
        "@types/babel__core": "^7.1.14",
        "@types/babel__traverse": "^7.0.6"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/babel-preset-current-node-syntax": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/babel-preset-current-node-syntax/-/babel-preset-current-node-syntax-1.1.0.tgz",
      "integrity": "sha512-ldYss8SbBlWva1bs28q78Ju5Zq1F+8BrqBZZ0VFhLBvhh6lCpC2o3gDJi/5DRLs9FgYZCnmPYIVFU4lRXCkyUw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/plugin-syntax-async-generators": "^7.8.4",
        "@babel/plugin-syntax-bigint": "^7.8.3",
        "@babel/plugin-syntax-class-properties": "^7.12.13",
        "@babel/plugin-syntax-class-static-block": "^7.14.5",
        "@babel/plugin-syntax-import-attributes": "^7.24.7",
        "@babel/plugin-syntax-import-meta": "^7.10.4",
        "@babel/plugin-syntax-json-strings": "^7.8.3",
        "@babel/plugin-syntax-logical-assignment-operators": "^7.10.4",
        "@babel/plugin-syntax-nullish-coalescing-operator": "^7.8.3",
        "@babel/plugin-syntax-numeric-separator": "^7.10.4",
        "@babel/plugin-syntax-object-rest-spread": "^7.8.3",
        "@babel/plugin-syntax-optional-catch-binding": "^7.8.3",
        "@babel/plugin-syntax-optional-chaining": "^7.8.3",
        "@babel/plugin-syntax-private-property-in-object": "^7.14.5",
        "@babel/plugin-syntax-top-level-await": "^7.14.5"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/babel-preset-jest": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/babel-preset-jest/-/babel-preset-jest-29.6.3.tgz",
      "integrity": "sha512-0B3bhxR6snWXJZtR/RliHTDPRgn1sNHOR0yVtq/IiQFyuOVjFS+wuio/R4gSNkyYmKmJB4wGZv2NZanmKmTnNA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "babel-plugin-jest-hoist": "^29.6.3",
        "babel-preset-current-node-syntax": "^1.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@babel/core": "^7.0.0"
      }
    },
    "node_modules/balanced-match": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/balanced-match/-/balanced-match-1.0.2.tgz",
      "integrity": "sha512-3oSeUO0TMV67hN1AmbXsK4yaqU7tjiHlbxRDZOpH0KW9+CeX4bRAaX0Anxt0tx2MrpRpWwQaPwIlISEJhYU5Pw==",
      "license": "MIT"
    },
    "node_modules/bare-events": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/bare-events/-/bare-events-2.6.0.tgz",
      "integrity": "sha512-EKZ5BTXYExaNqi3I3f9RtEsaI/xBSGjE0XZCZilPzFAV/goswFHuPd9jEZlPIZ/iNZJwDSao9qRiScySz7MbQg==",
      "license": "Apache-2.0",
      "optional": true
    },
    "node_modules/bare-fs": {
      "version": "4.1.6",
      "resolved": "https://registry.npmjs.org/bare-fs/-/bare-fs-4.1.6.tgz",
      "integrity": "sha512-25RsLF33BqooOEFNdMcEhMpJy8EoR88zSMrnOQOaM3USnOK2VmaJ1uaQEwPA6AQjrv1lXChScosN6CzbwbO9OQ==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "bare-events": "^2.5.4",
        "bare-path": "^3.0.0",
        "bare-stream": "^2.6.4"
      },
      "engines": {
        "bare": ">=1.16.0"
      },
      "peerDependencies": {
        "bare-buffer": "*"
      },
      "peerDependenciesMeta": {
        "bare-buffer": {
          "optional": true
        }
      }
    },
    "node_modules/bare-os": {
      "version": "3.6.1",
      "resolved": "https://registry.npmjs.org/bare-os/-/bare-os-3.6.1.tgz",
      "integrity": "sha512-uaIjxokhFidJP+bmmvKSgiMzj2sV5GPHaZVAIktcxcpCyBFFWO+YlikVAdhmUo2vYFvFhOXIAlldqV29L8126g==",
      "license": "Apache-2.0",
      "optional": true,
      "engines": {
        "bare": ">=1.14.0"
      }
    },
    "node_modules/bare-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/bare-path/-/bare-path-3.0.0.tgz",
      "integrity": "sha512-tyfW2cQcB5NN8Saijrhqn0Zh7AnFNsnczRcuWODH0eYAXBsJ5gVxAUuNr7tsHSC6IZ77cA0SitzT+s47kot8Mw==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "bare-os": "^3.0.1"
      }
    },
    "node_modules/bare-stream": {
      "version": "2.6.5",
      "resolved": "https://registry.npmjs.org/bare-stream/-/bare-stream-2.6.5.tgz",
      "integrity": "sha512-jSmxKJNJmHySi6hC42zlZnq00rga4jjxcgNZjY9N5WlOe/iOoGRtdwGsHzQv2RlH2KOYMwGUXhf2zXd32BA9RA==",
      "license": "Apache-2.0",
      "optional": true,
      "dependencies": {
        "streamx": "^2.21.0"
      },
      "peerDependencies": {
        "bare-buffer": "*",
        "bare-events": "*"
      },
      "peerDependenciesMeta": {
        "bare-buffer": {
          "optional": true
        },
        "bare-events": {
          "optional": true
        }
      }
    },
    "node_modules/base64-js": {
      "version": "1.5.1",
      "resolved": "https://registry.npmjs.org/base64-js/-/base64-js-1.5.1.tgz",
      "integrity": "sha512-AKpaYlHn8t4SVbOHCy+b5+KKgvR4vrsD8vbvrbiQJps7fKDTkjkDry6ji0rUJjC0kzbNePLwzxq8iypo41qeWA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/basic-ftp": {
      "version": "5.0.5",
      "resolved": "https://registry.npmjs.org/basic-ftp/-/basic-ftp-5.0.5.tgz",
      "integrity": "sha512-4Bcg1P8xhUuqcii/S0Z9wiHIrQVPMermM1any+MX5GeGD7faD3/msQUDGLol9wOcz4/jbg/WJnGqoJF6LiBdtg==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/bignumber.js": {
      "version": "9.3.1",
      "resolved": "https://registry.npmjs.org/bignumber.js/-/bignumber.js-9.3.1.tgz",
      "integrity": "sha512-Ko0uX15oIUS7wJ3Rb30Fs6SkVbLmPBAKdlm7q9+ak9bbIeFf0MwuBsQV6z7+X768/cHsfg+WlysDWJcmthjsjQ==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/binary-extensions": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/binary-extensions/-/binary-extensions-2.3.0.tgz",
      "integrity": "sha512-Ceh+7ox5qe7LJuLHoY0feh3pHuUDHAcRUeyL2VYghZwfpkNIy/+8Ocg0a3UuSoYzavmylwuLWQOf3hl0jjMMIw==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/bindings": {
      "version": "1.5.0",
      "resolved": "https://registry.npmjs.org/bindings/-/bindings-1.5.0.tgz",
      "integrity": "sha512-p2q/t/mhvuOj/UeLlV6566GD/guowlr0hHxClI0W9m7MWYkL1F0hLo+0Aexs9HSPCtR1SXQ0TD3MMKrXZajbiQ==",
      "license": "MIT",
      "dependencies": {
        "file-uri-to-path": "1.0.0"
      }
    },
    "node_modules/bl": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/bl/-/bl-4.1.0.tgz",
      "integrity": "sha512-1W07cM9gS6DcLperZfFSj+bWLtaPGSOHWhPiGzXmvVJbRLdG82sH/Kn8EtW1VqWVA54AKf2h5k5BbnIbwF3h6w==",
      "license": "MIT",
      "dependencies": {
        "buffer": "^5.5.0",
        "inherits": "^2.0.4",
        "readable-stream": "^3.4.0"
      }
    },
    "node_modules/bl/node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/bluebird": {
      "version": "3.4.7",
      "resolved": "https://registry.npmjs.org/bluebird/-/bluebird-3.4.7.tgz",
      "integrity": "sha512-iD3898SR7sWVRHbiQv+sHUtHnMvC1o3nW5rAcqnq3uOn07DSAppZYUkIGslDz6gXC7HfunPe7YVBgoEJASPcHA==",
      "license": "MIT"
    },
    "node_modules/body-parser": {
      "version": "1.20.3",
      "resolved": "https://registry.npmjs.org/body-parser/-/body-parser-1.20.3.tgz",
      "integrity": "sha512-7rAxByjUMqQ3/bHJy7D6OGXvx/MMc4IqBn/X0fcM1QUcAItpZrBEYhWGem+tzXH90c+G01ypMcYJBO9Y30203g==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "content-type": "~1.0.5",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "on-finished": "2.4.1",
        "qs": "6.13.0",
        "raw-body": "2.5.2",
        "type-is": "~1.6.18",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/boolbase": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/boolbase/-/boolbase-1.0.0.tgz",
      "integrity": "sha512-JZOSA7Mo9sNGB8+UjSgzdLtokWAky1zbztM3WRLCbZ70/3cTANmQmOdR7y2g+J0e2WXywy1yS468tY+IruqEww==",
      "license": "ISC"
    },
    "node_modules/brace-expansion": {
      "version": "1.1.12",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-1.1.12.tgz",
      "integrity": "sha512-9T9UjW3r0UW5c1Q7GTwllptXwhvYmEzFhzMfZ9H7FQWt+uZePjZPjBP/W1ZEyZ1twGWom5/56TF4lPcqjnDHcg==",
      "devOptional": true,
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0",
        "concat-map": "0.0.1"
      }
    },
    "node_modules/braces": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/braces/-/braces-3.0.3.tgz",
      "integrity": "sha512-yQbXgO/OSZVD2IsiLlro+7Hf6Q18EJrKSEsdoMzKePKXct3gvD8oLcOQdIzGupr5Fj+EDe8gO/lxc1BzfMpxvA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "fill-range": "^7.1.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/browserslist": {
      "version": "4.25.1",
      "resolved": "https://registry.npmjs.org/browserslist/-/browserslist-4.25.1.tgz",
      "integrity": "sha512-KGj0KoOMXLpSNkkEI6Z6mShmQy0bc1I+T7K9N81k4WWMrfz+6fQ6es80B/YLAeRoKvjYE1YSHHOW1qe9xIVzHw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "caniuse-lite": "^1.0.30001726",
        "electron-to-chromium": "^1.5.173",
        "node-releases": "^2.0.19",
        "update-browserslist-db": "^1.1.3"
      },
      "bin": {
        "browserslist": "cli.js"
      },
      "engines": {
        "node": "^6 || ^7 || ^8 || ^9 || ^10 || ^11 || ^12 || >=13.7"
      }
    },
    "node_modules/bser": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/bser/-/bser-2.1.1.tgz",
      "integrity": "sha512-gQxTNE/GAfIIrmHLUE3oJyp5FO6HRBfhjnw4/wMmA63ZGDJnWBmgY/lyQBpnDUkGmAhbSe39tx2d/iTOAfglwQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "node-int64": "^0.4.0"
      }
    },
    "node_modules/buffer": {
      "version": "5.7.1",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-5.7.1.tgz",
      "integrity": "sha512-EHcyIPBQ4BSGlvjB16k5KgAJ27CIsHY/2JBmCRReo48y9rQ3MaUzWX3KVlBa4U7MyX02HdVj0K7C3WaB3ju7FQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.1.13"
      }
    },
    "node_modules/buffer-crc32": {
      "version": "0.2.13",
      "resolved": "https://registry.npmjs.org/buffer-crc32/-/buffer-crc32-0.2.13.tgz",
      "integrity": "sha512-VO9Ht/+p3SN7SKWqcrgEzjGbRSJYTx+Q1pTQC0wrWqHx0vpJraQ6GtHx8tvcg1rlK1byhU5gccxgOgj7B0TDkQ==",
      "license": "MIT",
      "engines": {
        "node": "*"
      }
    },
    "node_modules/buffer-equal-constant-time": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/buffer-equal-constant-time/-/buffer-equal-constant-time-1.0.1.tgz",
      "integrity": "sha512-zRpUiDwd/xk6ADqPMATG8vc9VPrkck7T07OIx0gnjmJAnHnTVXNQG3vfvWNuiZIkwu9KrKdA1iJKfsfTVxE6NA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/buffer-from": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/buffer-from/-/buffer-from-1.1.2.tgz",
      "integrity": "sha512-E+XQCRwSbaaiChtv6k6Dwgc+bx+Bs6vuKJHHl5kox/BaKbhiXzqQOwK4cO22yElGp2OCmjwVhT3HmxgyPGnJfQ==",
      "license": "MIT"
    },
    "node_modules/busboy": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/busboy/-/busboy-1.6.0.tgz",
      "integrity": "sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==",
      "dependencies": {
        "streamsearch": "^1.1.0"
      },
      "engines": {
        "node": ">=10.16.0"
      }
    },
    "node_modules/bytes": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/bytes/-/bytes-3.1.2.tgz",
      "integrity": "sha512-/Nf7TyzTx6S3yRJObOAV7956r8cr2+Oj8AC5dt8wSP3BQAoeX58NoHyCU8P8zGkNXStjTSi6fzO6F0pBdcYbEg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/cacache": {
      "version": "15.3.0",
      "resolved": "https://registry.npmjs.org/cacache/-/cacache-15.3.0.tgz",
      "integrity": "sha512-VVdYzXEn+cnbXpFgWs5hTT7OScegHVmLhJIR8Ufqk3iFD6A6j5iSX1KuBTfNEv4tdJWE2PzA6IVFtcLC7fN9wQ==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "@npmcli/fs": "^1.0.0",
        "@npmcli/move-file": "^1.0.1",
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "glob": "^7.1.4",
        "infer-owner": "^1.0.4",
        "lru-cache": "^6.0.0",
        "minipass": "^3.1.1",
        "minipass-collect": "^1.0.2",
        "minipass-flush": "^1.0.5",
        "minipass-pipeline": "^1.2.2",
        "mkdirp": "^1.0.3",
        "p-map": "^4.0.0",
        "promise-inflight": "^1.0.1",
        "rimraf": "^3.0.2",
        "ssri": "^8.0.1",
        "tar": "^6.0.2",
        "unique-filename": "^1.1.1"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/cacache/node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "license": "MIT",
      "optional": true,
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/call-bind-apply-helpers": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/call-bind-apply-helpers/-/call-bind-apply-helpers-1.0.2.tgz",
      "integrity": "sha512-Sp1ablJ0ivDkSzjcaJdxEunN5/XvksFJ2sMBFfq6x0ryhQV/2b/KwFe21cMpmHtPOSij8K99/wSfoEuTObmuMQ==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/call-bound": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/call-bound/-/call-bound-1.0.4.tgz",
      "integrity": "sha512-+ys997U96po4Kx/ABpBCqhA9EuxJaQWDQg7295H4hBphv3IZg0boBKuwYpt4YXp6MZ5AmZQnU/tyMTlRpaSejg==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "get-intrinsic": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/callsites": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/callsites/-/callsites-3.1.0.tgz",
      "integrity": "sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/camelcase": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/camelcase/-/camelcase-6.3.0.tgz",
      "integrity": "sha512-Gmy6FhYlCY7uOElZUSbxo2UCDH8owEk996gkbrpsgGtrJLM3J7jGxl9Ic7Qwwj4ivOE5AWZWRMecDdF7hqGjFA==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/caniuse-lite": {
      "version": "1.0.30001727",
      "resolved": "https://registry.npmjs.org/caniuse-lite/-/caniuse-lite-1.0.30001727.tgz",
      "integrity": "sha512-pB68nIHmbN6L/4C6MH1DokyR3bYqFwjaSs/sWDHGj4CTcFtQUQMuJftVwWkXq7mNWOybD3KhUv3oWHoGxgP14Q==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/caniuse-lite"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "CC-BY-4.0"
    },
    "node_modules/chalk": {
      "version": "4.1.2",
      "resolved": "https://registry.npmjs.org/chalk/-/chalk-4.1.2.tgz",
      "integrity": "sha512-oKnbhFyRIXpUuez8iBMmyEa4nbj4IOQyuhc/wy9kY7/WVPcwIO9VA668Pu8RkO7+0G76SLROeyw9CpQ061i4mA==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.1.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/chalk?sponsor=1"
      }
    },
    "node_modules/chalk/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/chalk/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/chalk/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/char-regex": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/char-regex/-/char-regex-1.0.2.tgz",
      "integrity": "sha512-kWWXztvZ5SBQV+eRgKFeh8q5sLuZY2+8WUIzlxWVTg+oGwY14qylx1KbKzHd8P6ZYkAg0xyIDU9JMHhyJMZ1jw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/cheerio": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/cheerio/-/cheerio-1.1.2.tgz",
      "integrity": "sha512-IkxPpb5rS/d1IiLbHMgfPuS0FgiWTtFIm/Nj+2woXDLTZ7fOT2eqzgYbdMlLweqlHbsZjxEChoVK+7iph7jyQg==",
      "license": "MIT",
      "dependencies": {
        "cheerio-select": "^2.1.0",
        "dom-serializer": "^2.0.0",
        "domhandler": "^5.0.3",
        "domutils": "^3.2.2",
        "encoding-sniffer": "^0.2.1",
        "htmlparser2": "^10.0.0",
        "parse5": "^7.3.0",
        "parse5-htmlparser2-tree-adapter": "^7.1.0",
        "parse5-parser-stream": "^7.1.2",
        "undici": "^7.12.0",
        "whatwg-mimetype": "^4.0.0"
      },
      "engines": {
        "node": ">=20.18.1"
      },
      "funding": {
        "url": "https://github.com/cheeriojs/cheerio?sponsor=1"
      }
    },
    "node_modules/cheerio-select": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/cheerio-select/-/cheerio-select-2.1.0.tgz",
      "integrity": "sha512-9v9kG0LvzrlcungtnJtpGNxY+fzECQKhK4EGJX2vByejiMX84MFNQw4UxPJl3bFbTMw+Dfs37XaIkCwTZfLh4g==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "^1.0.0",
        "css-select": "^5.1.0",
        "css-what": "^6.1.0",
        "domelementtype": "^2.3.0",
        "domhandler": "^5.0.3",
        "domutils": "^3.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/chokidar": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/chokidar/-/chokidar-3.6.0.tgz",
      "integrity": "sha512-7VT13fmjotKpGipCW9JEQAusEPE+Ei8nl6/g4FBAmIm0GOOLMua9NDDo/DWp0ZAxCr3cPq5ZpBqmPAQgDda2Pw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "anymatch": "~3.1.2",
        "braces": "~3.0.2",
        "glob-parent": "~5.1.2",
        "is-binary-path": "~2.1.0",
        "is-glob": "~4.0.1",
        "normalize-path": "~3.0.0",
        "readdirp": "~3.6.0"
      },
      "engines": {
        "node": ">= 8.10.0"
      },
      "funding": {
        "url": "https://paulmillr.com/funding/"
      },
      "optionalDependencies": {
        "fsevents": "~2.3.2"
      }
    },
    "node_modules/chownr": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-2.0.0.tgz",
      "integrity": "sha512-bIomtDF5KGpdogkLd9VspvFzk9KfpyyGlS8YFVZl7TGPBHL5snIOnxeshwVgPteQ9b4Eydl+pVbIyE1DcvCWgQ==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/chromium-bidi": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/chromium-bidi/-/chromium-bidi-7.2.0.tgz",
      "integrity": "sha512-gREyhyBstermK+0RbcJLbFhcQctg92AGgDe/h/taMJEOLRdtSswBAO9KmvltFSQWgM2LrwWu5SIuEUbdm3JsyQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "mitt": "^3.0.1",
        "zod": "^3.24.1"
      },
      "peerDependencies": {
        "devtools-protocol": "*"
      }
    },
    "node_modules/ci-info": {
      "version": "3.9.0",
      "resolved": "https://registry.npmjs.org/ci-info/-/ci-info-3.9.0.tgz",
      "integrity": "sha512-NIxF55hv4nSqQswkAeiOi1r83xy8JldOFDTWiug55KBu9Jnblncd2U6ViHmYgHf01TPZS77NJBhBMKdWj9HQMQ==",
      "dev": true,
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/sibiraj-s"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/cjs-module-lexer": {
      "version": "1.4.3",
      "resolved": "https://registry.npmjs.org/cjs-module-lexer/-/cjs-module-lexer-1.4.3.tgz",
      "integrity": "sha512-9z8TZaGM1pfswYeXrUpzPrkx8UnWYdhJclsiYMm6x/w5+nN+8Tf/LnAgfLGQCm59qAOxU8WwHEq2vNwF6i4j+Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/clean-stack": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/clean-stack/-/clean-stack-2.2.0.tgz",
      "integrity": "sha512-4diC9HaTE+KRAMWhDhrGOECgWZxoevMc5TlkObMqNSsVU62PYzXZ/SMTjzyGAFF1YusgxGcSWTEXBhp0CPwQ1A==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/cliui": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/cliui/-/cliui-8.0.1.tgz",
      "integrity": "sha512-BSeNnyus75C4//NQ9gQt1/csTXyo/8Sb+afLAkzAptFuMsod9HFokGNudZpi/oQV73hnVK+sR+5PVRMd+Dr7YQ==",
      "license": "ISC",
      "dependencies": {
        "string-width": "^4.2.0",
        "strip-ansi": "^6.0.1",
        "wrap-ansi": "^7.0.0"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/co": {
      "version": "4.6.0",
      "resolved": "https://registry.npmjs.org/co/-/co-4.6.0.tgz",
      "integrity": "sha512-QVb0dM5HvG+uaxitm8wONl7jltx8dqhfU33DcqtOZcLSVIKSDDLDi7+0LbAKiyI8hD9u42m2YxXSkMGWThaecQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "iojs": ">= 1.0.0",
        "node": ">= 0.12.0"
      }
    },
    "node_modules/collect-v8-coverage": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/collect-v8-coverage/-/collect-v8-coverage-1.0.2.tgz",
      "integrity": "sha512-lHl4d5/ONEbLlJvaJNtsF/Lz+WvB07u2ycqTYbdrq7UypDXailES4valYb2eWiJFxZlVmpGekfqoxQhzyFdT4Q==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/color-convert": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/color-convert/-/color-convert-2.0.1.tgz",
      "integrity": "sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==",
      "license": "MIT",
      "dependencies": {
        "color-name": "~1.1.4"
      },
      "engines": {
        "node": ">=7.0.0"
      }
    },
    "node_modules/color-name": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/color-name/-/color-name-1.1.4.tgz",
      "integrity": "sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==",
      "license": "MIT"
    },
    "node_modules/color-support": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/color-support/-/color-support-1.1.3.tgz",
      "integrity": "sha512-qiBjkpbMLO/HL68y+lh4q0/O1MZFj2RX6X/KmMa3+gJD3z+WwI1ZzDHysvqHGS3mP6mznPckpXmw1nI9cJjyRg==",
      "license": "ISC",
      "optional": true,
      "bin": {
        "color-support": "bin.js"
      }
    },
    "node_modules/combined-stream": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/combined-stream/-/combined-stream-1.0.8.tgz",
      "integrity": "sha512-FQN4MRfuJeHf7cBbBMJFXhKSDq+2kAArBlmRBvcvFE5BB1HZKXtSFASDhdlz9zOYwxh8lDdnvmMOe/+5cdoEdg==",
      "license": "MIT",
      "dependencies": {
        "delayed-stream": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/component-emitter": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/component-emitter/-/component-emitter-1.3.1.tgz",
      "integrity": "sha512-T0+barUSQRTUQASh8bx02dl+DhF54GtIDY13Y3m9oWTklKbb3Wv974meRpeZ3lp1JpLVECWWNHC4vaG2XHXouQ==",
      "dev": true,
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/compress-commons": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/compress-commons/-/compress-commons-6.0.2.tgz",
      "integrity": "sha512-6FqVXeETqWPoGcfzrXb37E50NP0LXT8kAMu5ooZayhWWdgEY4lBEEcbQNXtkuKQsGduxiIcI4gOTsxTmuq/bSg==",
      "license": "MIT",
      "dependencies": {
        "crc-32": "^1.2.0",
        "crc32-stream": "^6.0.0",
        "is-stream": "^2.0.1",
        "normalize-path": "^3.0.0",
        "readable-stream": "^4.0.0"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/compress-commons/node_modules/buffer": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.2.1"
      }
    },
    "node_modules/compress-commons/node_modules/readable-stream": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-4.7.0.tgz",
      "integrity": "sha512-oIGGmcpTLwPga8Bn6/Z75SVaH1z5dUut2ibSyAMVhmUggWpmDn2dapB0n7f8nwaSiRtepAsfJyfXIO5DCVAODg==",
      "license": "MIT",
      "dependencies": {
        "abort-controller": "^3.0.0",
        "buffer": "^6.0.3",
        "events": "^3.3.0",
        "process": "^0.11.10",
        "string_decoder": "^1.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/compress-commons/node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/concat-map": {
      "version": "0.0.1",
      "resolved": "https://registry.npmjs.org/concat-map/-/concat-map-0.0.1.tgz",
      "integrity": "sha512-/Srv4dswyQNBfohGpz9o6Yb3Gz3SrUDqBH5rTuhGR7ahtlbYKnVxw2bCFMRljaA7EXHaXZ8wsHdodFvbkhKmqg==",
      "devOptional": true,
      "license": "MIT"
    },
    "node_modules/concat-stream": {
      "version": "1.6.2",
      "resolved": "https://registry.npmjs.org/concat-stream/-/concat-stream-1.6.2.tgz",
      "integrity": "sha512-27HBghJxjiZtIk3Ycvn/4kbJk/1uZuJFfuPEns6LaEvpvG1f0hTea8lilrouyo9mVc2GWdcEZ8OLoGmSADlrCw==",
      "engines": [
        "node >= 0.8"
      ],
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^2.2.2",
        "typedarray": "^0.0.6"
      }
    },
    "node_modules/console-control-strings": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/console-control-strings/-/console-control-strings-1.1.0.tgz",
      "integrity": "sha512-ty/fTekppD2fIwRvnZAVdeOiGd1c7YXEixbgJTNzqcxJWKQnjJ/V1bNEEE6hygpM3WjwHFUVK6HTjWSzV4a8sQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/console-table-printer": {
      "version": "2.14.6",
      "resolved": "https://registry.npmjs.org/console-table-printer/-/console-table-printer-2.14.6.tgz",
      "integrity": "sha512-MCBl5HNVaFuuHW6FGbL/4fB7N/ormCy+tQ+sxTrF6QtSbSNETvPuOVbkJBhzDgYhvjWGrTma4eYJa37ZuoQsPw==",
      "license": "MIT",
      "dependencies": {
        "simple-wcswidth": "^1.0.1"
      }
    },
    "node_modules/content-disposition": {
      "version": "0.5.4",
      "resolved": "https://registry.npmjs.org/content-disposition/-/content-disposition-0.5.4.tgz",
      "integrity": "sha512-FveZTNuGw04cxlAiWbzi6zTAL/lhehaWbTtgluJh4/E95DqMwTmha3KZN1aAWA8cFIhHzMZUvLevkw5Rqk+tSQ==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "5.2.1"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/content-type": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/content-type/-/content-type-1.0.5.tgz",
      "integrity": "sha512-nTjqfcBFEipKdXCv4YDQWCfmcLZKm81ldF0pAopTvyrFGVbcR6P/VAAd5G7N+0tTr8QqiU0tFadD6FK4NtJwOA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/convert-source-map": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/convert-source-map/-/convert-source-map-2.0.0.tgz",
      "integrity": "sha512-Kvp459HrV2FEJ1CAsi1Ku+MY3kasH19TFykTz2xWmMeq6bk2NU3XXvfJ+Q61m0xktWwt+1HSYf3JZsTms3aRJg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/cookie": {
      "version": "0.7.1",
      "resolved": "https://registry.npmjs.org/cookie/-/cookie-0.7.1.tgz",
      "integrity": "sha512-6DnInpx7SJ2AK3+CTUE/ZM0vWTUboZCegxhC2xiIydHR9jNuTAASBrfEpHhiGOZw/nX51bHt6YQl8jsGo4y/0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/cookie-signature": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/cookie-signature/-/cookie-signature-1.0.6.tgz",
      "integrity": "sha512-QADzlaHc8icV8I7vbaJXJwod9HWYp8uCqf1xa4OfNu1T7JVxQIrUgOWtHdNDtPiywmFbiS12VjotIXLrKM3orQ==",
      "license": "MIT"
    },
    "node_modules/cookiejar": {
      "version": "2.1.4",
      "resolved": "https://registry.npmjs.org/cookiejar/-/cookiejar-2.1.4.tgz",
      "integrity": "sha512-LDx6oHrK+PhzLKJU9j5S7/Y3jM/mUHvD/DeI1WQmJn652iPC5Y4TBzC9l+5OMOXlyTTA+SmVUPm0HQUwpD5Jqw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/core-util-is": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/core-util-is/-/core-util-is-1.0.3.tgz",
      "integrity": "sha512-ZQBvi1DcpJ4GDqanjucZ2Hj3wEO5pZDS89BWbkcrvdxksJorwUDDZamX9ldFkp9aw2lmBDLgkObEA4DWNJ9FYQ==",
      "license": "MIT"
    },
    "node_modules/cors": {
      "version": "2.8.5",
      "resolved": "https://registry.npmjs.org/cors/-/cors-2.8.5.tgz",
      "integrity": "sha512-KIHbLJqu73RGr/hnbrO9uBeixNGuvSQjul/jdFvS/KFSIH1hWVd1ng7zOHx+YrEfInLG7q4n6GHQ9cDtxv/P6g==",
      "license": "MIT",
      "dependencies": {
        "object-assign": "^4",
        "vary": "^1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/cosmiconfig": {
      "version": "9.0.0",
      "resolved": "https://registry.npmjs.org/cosmiconfig/-/cosmiconfig-9.0.0.tgz",
      "integrity": "sha512-itvL5h8RETACmOTFc4UfIyB2RfEHi71Ax6E/PivVxq9NseKbOWpeyHEOIbmAw1rs8Ak0VursQNww7lf7YtUwzg==",
      "license": "MIT",
      "dependencies": {
        "env-paths": "^2.2.1",
        "import-fresh": "^3.3.0",
        "js-yaml": "^4.1.0",
        "parse-json": "^5.2.0"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/d-fischer"
      },
      "peerDependencies": {
        "typescript": ">=4.9.5"
      },
      "peerDependenciesMeta": {
        "typescript": {
          "optional": true
        }
      }
    },
    "node_modules/crc-32": {
      "version": "1.2.2",
      "resolved": "https://registry.npmjs.org/crc-32/-/crc-32-1.2.2.tgz",
      "integrity": "sha512-ROmzCKrTnOwybPcJApAA6WBWij23HVfGVNKqqrZpuyZOHqK2CwHSvpGuyt/UNNvaIjEd8X5IFGp4Mh+Ie1IHJQ==",
      "license": "Apache-2.0",
      "bin": {
        "crc32": "bin/crc32.njs"
      },
      "engines": {
        "node": ">=0.8"
      }
    },
    "node_modules/crc32-stream": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/crc32-stream/-/crc32-stream-6.0.0.tgz",
      "integrity": "sha512-piICUB6ei4IlTv1+653yq5+KoqfBYmj9bw6LqXoOneTMDXk5nM1qt12mFW1caG3LlJXEKW1Bp0WggEmIfQB34g==",
      "license": "MIT",
      "dependencies": {
        "crc-32": "^1.2.0",
        "readable-stream": "^4.0.0"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/crc32-stream/node_modules/buffer": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.2.1"
      }
    },
    "node_modules/crc32-stream/node_modules/readable-stream": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-4.7.0.tgz",
      "integrity": "sha512-oIGGmcpTLwPga8Bn6/Z75SVaH1z5dUut2ibSyAMVhmUggWpmDn2dapB0n7f8nwaSiRtepAsfJyfXIO5DCVAODg==",
      "license": "MIT",
      "dependencies": {
        "abort-controller": "^3.0.0",
        "buffer": "^6.0.3",
        "events": "^3.3.0",
        "process": "^0.11.10",
        "string_decoder": "^1.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/crc32-stream/node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/create-jest": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/create-jest/-/create-jest-29.7.0.tgz",
      "integrity": "sha512-Adz2bdH0Vq3F53KEMJOoftQFutWCukm6J24wbPWRO4k1kMY7gS7ds/uoJkNuV8wDCtWWnuwGcJwpWcih+zEW1Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "chalk": "^4.0.0",
        "exit": "^0.1.2",
        "graceful-fs": "^4.2.9",
        "jest-config": "^29.7.0",
        "jest-util": "^29.7.0",
        "prompts": "^2.0.1"
      },
      "bin": {
        "create-jest": "bin/create-jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/cross-fetch": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/cross-fetch/-/cross-fetch-3.2.0.tgz",
      "integrity": "sha512-Q+xVJLoGOeIMXZmbUK4HYk+69cQH6LudR0Vu/pRm2YlU/hDV9CiS0gKUMaWY5f2NeUH9C1nV3bsTlCo0FsTV1Q==",
      "license": "MIT",
      "dependencies": {
        "node-fetch": "^2.7.0"
      }
    },
    "node_modules/cross-spawn": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/cross-spawn/-/cross-spawn-7.0.6.tgz",
      "integrity": "sha512-uV2QOWP2nWzsy2aMp8aRibhi9dlzF5Hgh5SHaB9OiTGEyDTiJJyx0uy51QXdyWbtAHNua4XJzUKca3OzKUd3vA==",
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.1.0",
        "shebang-command": "^2.0.0",
        "which": "^2.0.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/css-select": {
      "version": "5.2.2",
      "resolved": "https://registry.npmjs.org/css-select/-/css-select-5.2.2.tgz",
      "integrity": "sha512-TizTzUddG/xYLA3NXodFM0fSbNizXjOKhqiQQwvhlspadZokn1KDy0NZFS0wuEubIYAV5/c1/lAr0TaaFXEXzw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "^1.0.0",
        "css-what": "^6.1.0",
        "domhandler": "^5.0.2",
        "domutils": "^3.0.1",
        "nth-check": "^2.0.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/css-what": {
      "version": "6.2.2",
      "resolved": "https://registry.npmjs.org/css-what/-/css-what-6.2.2.tgz",
      "integrity": "sha512-u/O3vwbptzhMs3L1fQE82ZSLHQQfto5gyZzwteVIEyeaY5Fc7R4dapF/BvRoSYFeqfBk4m0V1Vafq5Pjv25wvA==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">= 6"
      },
      "funding": {
        "url": "https://github.com/sponsors/fb55"
      }
    },
    "node_modules/data-uri-to-buffer": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/data-uri-to-buffer/-/data-uri-to-buffer-6.0.2.tgz",
      "integrity": "sha512-7hvf7/GW8e86rW0ptuwS3OcBGDjIi6SZva7hCyWC0yYry2cOPmLIjXAUHI6DK2HsnwJd9ifmt57i8eV2n4YNpw==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/debug": {
      "version": "2.6.9",
      "resolved": "https://registry.npmjs.org/debug/-/debug-2.6.9.tgz",
      "integrity": "sha512-bC7ElrdJaJnPbAP+1EotYvqZsb3ecl5wi6Bfi6BJTUcNowp6cvspg0jXznRTKDjm/E7AdgFBVeAPVMNcKGsHMA==",
      "license": "MIT",
      "dependencies": {
        "ms": "2.0.0"
      }
    },
    "node_modules/decamelize": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/decamelize/-/decamelize-1.2.0.tgz",
      "integrity": "sha512-z2S+W9X73hAUUki+N+9Za2lBlun89zigOyGrsax+KUQ6wKW4ZoWpEYBkGhQjwAjjDCkWxhY0VKEhk8wzY7F5cA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/decompress-response": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/decompress-response/-/decompress-response-6.0.0.tgz",
      "integrity": "sha512-aW35yZM6Bb/4oJlZncMH2LCoZtJXTRxES17vE3hoRiowU2kWHaJKFkSBDnDR+cm9J+9QhXmREyIfv0pji9ejCQ==",
      "license": "MIT",
      "dependencies": {
        "mimic-response": "^3.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/dedent": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/dedent/-/dedent-1.6.0.tgz",
      "integrity": "sha512-F1Z+5UCFpmQUzJa11agbyPVMbpgT/qA3/SKyJ1jyBgm7dUcUEa8v9JwDkerSQXfakBwFljIxhOJqGkjUwZ9FSA==",
      "dev": true,
      "license": "MIT",
      "peerDependencies": {
        "babel-plugin-macros": "^3.1.0"
      },
      "peerDependenciesMeta": {
        "babel-plugin-macros": {
          "optional": true
        }
      }
    },
    "node_modules/deep-extend": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/deep-extend/-/deep-extend-0.6.0.tgz",
      "integrity": "sha512-LOHxIOaPYdHlJRtCQfDIVZtfw/ufM8+rVj649RIHzcm/vGwQRXFt6OPqIFWsm2XEMrNIEtWR64sY1LEKD2vAOA==",
      "license": "MIT",
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/deepmerge": {
      "version": "4.3.1",
      "resolved": "https://registry.npmjs.org/deepmerge/-/deepmerge-4.3.1.tgz",
      "integrity": "sha512-3sUqbMEc77XqpdNO7FRyRog+eW3ph+GYCbj+rK+uYyRMuwsVy0rMiVtPn+QJlKFvWP/1PYpapqYn0Me2knFn+A==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/degenerator": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/degenerator/-/degenerator-5.0.1.tgz",
      "integrity": "sha512-TllpMR/t0M5sqCXfj85i4XaAzxmS5tVA16dqvdkMwGmzI+dXLXnw3J+3Vdv7VKw+ThlTMboK6i9rnZ6Nntj5CQ==",
      "license": "MIT",
      "dependencies": {
        "ast-types": "^0.13.4",
        "escodegen": "^2.1.0",
        "esprima": "^4.0.1"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/delayed-stream": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delayed-stream/-/delayed-stream-1.0.0.tgz",
      "integrity": "sha512-ZySD7Nf91aLB0RxL4KGrKHBXl7Eds1DAmEdcoVawXnLD7SDhpNgtuII2aAkg7a7QS41jxPSZ17p4VdGnMHk3MQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/delegates": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/delegates/-/delegates-1.0.0.tgz",
      "integrity": "sha512-bd2L678uiWATM6m5Z1VzNCErI3jiGzt6HGY8OVICs40JQq/HALfbyNJmp0UDakEY4pMMaN0Ly5om/B1VI/+xfQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/depd": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/depd/-/depd-2.0.0.tgz",
      "integrity": "sha512-g7nH6P6dyDioJogAAGprGpCtVImJhpPk/roCzdb3fIh61/s/nPsfR6onyMwkCAR/OlC3yBC0lESvUoQEAssIrw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/destroy": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/destroy/-/destroy-1.2.0.tgz",
      "integrity": "sha512-2sJGJTaXIIaR1w4iJSNoN0hnMY7Gpc/n8D4qSCJw8QqFWXf7cuAgnEHxBpweaVcPevC2l3KpjYCx3NypQQgaJg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8",
        "npm": "1.2.8000 || >= 1.4.16"
      }
    },
    "node_modules/detect-libc": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/detect-libc/-/detect-libc-2.0.4.tgz",
      "integrity": "sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/detect-newline": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/detect-newline/-/detect-newline-3.1.0.tgz",
      "integrity": "sha512-TLz+x/vEXm/Y7P7wn1EJFNLxYpUD4TgMosxY6fAVJUnJMbupHBOncxyWUG9OpTaH9EBD7uFI5LfEgmMOc54DsA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/devtools-protocol": {
      "version": "0.0.1464554",
      "resolved": "https://registry.npmjs.org/devtools-protocol/-/devtools-protocol-0.0.1464554.tgz",
      "integrity": "sha512-CAoP3lYfwAGQTaAXYvA6JZR0fjGUb7qec1qf4mToyoH2TZgUFeIqYcjh6f9jNuhHfuZiEdH+PONHYrLhRQX6aw==",
      "license": "BSD-3-Clause"
    },
    "node_modules/dezalgo": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/dezalgo/-/dezalgo-1.0.4.tgz",
      "integrity": "sha512-rXSP0bf+5n0Qonsb+SVVfNfIsimO4HEtmnIpPHY8Q1UCzKlQrDMfdobr8nJOOsRgWCyMRqeSBQzmWUMq7zvVig==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "asap": "^2.0.0",
        "wrappy": "1"
      }
    },
    "node_modules/diff-sequences": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/diff-sequences/-/diff-sequences-29.6.3.tgz",
      "integrity": "sha512-EjePK1srD3P08o2j4f0ExnylqRs5B9tJjcp9t1krH2qRi8CCdsYfwe9JgSLurFBWwq4uOlipzfk5fHNvwFKr8Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/dingbat-to-unicode": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dingbat-to-unicode/-/dingbat-to-unicode-1.0.1.tgz",
      "integrity": "sha512-98l0sW87ZT58pU4i61wa2OHwxbiYSbuxsCBozaVnYX2iCnr3bLM3fIes1/ej7h1YdOKuKt/MLs706TVnALA65w==",
      "license": "BSD-2-Clause"
    },
    "node_modules/dom-serializer": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/dom-serializer/-/dom-serializer-2.0.0.tgz",
      "integrity": "sha512-wIkAryiqt/nV5EQKqQpo3SToSOV9J0DnbJqwK7Wv/Trc92zIAYZ4FlMu+JPFW1DfGFt81ZTCGgDEabffXeLyJg==",
      "license": "MIT",
      "dependencies": {
        "domelementtype": "^2.3.0",
        "domhandler": "^5.0.2",
        "entities": "^4.2.0"
      },
      "funding": {
        "url": "https://github.com/cheeriojs/dom-serializer?sponsor=1"
      }
    },
    "node_modules/domelementtype": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/domelementtype/-/domelementtype-2.3.0.tgz",
      "integrity": "sha512-OLETBj6w0OsagBwdXnPdN0cnMfF9opN69co+7ZrbfPGrdpPVNBUj02spi6B1N7wChLQiPn4CSH/zJvXw56gmHw==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/fb55"
        }
      ],
      "license": "BSD-2-Clause"
    },
    "node_modules/domhandler": {
      "version": "5.0.3",
      "resolved": "https://registry.npmjs.org/domhandler/-/domhandler-5.0.3.tgz",
      "integrity": "sha512-cgwlv/1iFQiFnU96XXgROh8xTeetsnJiDsTc7TYCLFd9+/WNkIqPTxiM/8pSd8VIrhXGTf1Ny1q1hquVqDJB5w==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "domelementtype": "^2.3.0"
      },
      "engines": {
        "node": ">= 4"
      },
      "funding": {
        "url": "https://github.com/fb55/domhandler?sponsor=1"
      }
    },
    "node_modules/domutils": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/domutils/-/domutils-3.2.2.tgz",
      "integrity": "sha512-6kZKyUajlDuqlHKVX1w7gyslj9MPIXzIFiz/rGu35uC1wMi+kMhQwGhl4lt9unC9Vb9INnY9Z3/ZA3+FhASLaw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "dom-serializer": "^2.0.0",
        "domelementtype": "^2.3.0",
        "domhandler": "^5.0.3"
      },
      "funding": {
        "url": "https://github.com/fb55/domutils?sponsor=1"
      }
    },
    "node_modules/dotenv": {
      "version": "16.6.1",
      "resolved": "https://registry.npmjs.org/dotenv/-/dotenv-16.6.1.tgz",
      "integrity": "sha512-uBq4egWHTcTt33a72vpSG0z3HnPuIl6NqYcTrKEg2azoEyl2hpW0zqlxysq2pK9HlDIHyHyakeYaYnSAwd8bow==",
      "license": "BSD-2-Clause",
      "peer": true,
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://dotenvx.com"
      }
    },
    "node_modules/duck": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/duck/-/duck-0.1.12.tgz",
      "integrity": "sha512-wkctla1O6VfP89gQ+J/yDesM0S7B7XLXjKGzXxMDVFg7uEn706niAtyYovKbyq1oT9YwDcly721/iUWoc8MVRg==",
      "license": "BSD",
      "dependencies": {
        "underscore": "^1.13.1"
      }
    },
    "node_modules/dunder-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/dunder-proto/-/dunder-proto-1.0.1.tgz",
      "integrity": "sha512-KIN/nDJBQRcXw0MLVhZE9iQHmG68qAVIBg9CqmUYjmQIhgij9U5MFvrqkUL5FbtyyzZuOeOt0zdeRe4UY7ct+A==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.1",
        "es-errors": "^1.3.0",
        "gopd": "^1.2.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/eastasianwidth": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/eastasianwidth/-/eastasianwidth-0.2.0.tgz",
      "integrity": "sha512-I88TYZWc9XiYHRQ4/3c5rjjfgkjhLyW2luGIheGERbNQ6OY7yTybanSpDXZa8y7VUP9YmDcYa+eyq4ca7iLqWA==",
      "license": "MIT"
    },
    "node_modules/ecdsa-sig-formatter": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/ecdsa-sig-formatter/-/ecdsa-sig-formatter-1.0.11.tgz",
      "integrity": "sha512-nagl3RYrbNv6kQkeJIpt6NJZy8twLB/2vtz6yN9Z4vRKHN4/QZJIEbqohALSgwKdnksuY3k5Addp5lg8sVoVcQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/ee-first": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/ee-first/-/ee-first-1.1.1.tgz",
      "integrity": "sha512-WMwm9LhRUo+WUaRN+vRuETqG89IgZphVSNkdFgeb6sS/E4OrDIN7t48CAewSHXc6C8lefD8KKfr5vY61brQlow==",
      "license": "MIT"
    },
    "node_modules/electron-to-chromium": {
      "version": "1.5.190",
      "resolved": "https://registry.npmjs.org/electron-to-chromium/-/electron-to-chromium-1.5.190.tgz",
      "integrity": "sha512-k4McmnB2091YIsdCgkS0fMVMPOJgxl93ltFzaryXqwip1AaxeDqKCGLxkXODDA5Ab/D+tV5EL5+aTx76RvLRxw==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/emittery": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/emittery/-/emittery-0.13.1.tgz",
      "integrity": "sha512-DeWwawk6r5yR9jFgnDKYt4sLS0LmHJJi3ZOnb5/JdbYwj3nW+FxQnHIjhBKz8YLC7oRNPVM9NQ47I3CVx34eqQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=12"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/emittery?sponsor=1"
      }
    },
    "node_modules/emoji-regex": {
      "version": "8.0.0",
      "resolved": "https://registry.npmjs.org/emoji-regex/-/emoji-regex-8.0.0.tgz",
      "integrity": "sha512-MSjYzcWNOA0ewAHpz0MxpYFvwg6yjy1NG3xteoqz644VCo/RPgnr1/GGt+ic3iJTzQ8Eu3TdM14SawnVUmGE6A==",
      "license": "MIT"
    },
    "node_modules/encodeurl": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-2.0.0.tgz",
      "integrity": "sha512-Q0n9HRi4m6JuGIV1eFlmvJB7ZEVxu93IrMyiMsGC0lrMJMWzRgx6WGquyfQgZVb31vhGgXnfmPNNXmxnOkRBrg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/encoding": {
      "version": "0.1.13",
      "resolved": "https://registry.npmjs.org/encoding/-/encoding-0.1.13.tgz",
      "integrity": "sha512-ETBauow1T35Y/WZMkio9jiM0Z5xjHHmJ4XmjZOq1l/dXz3lr2sRn87nJy20RupqSh1F2m3HHPSp8ShIPQJrJ3A==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "iconv-lite": "^0.6.2"
      }
    },
    "node_modules/encoding-sniffer": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/encoding-sniffer/-/encoding-sniffer-0.2.1.tgz",
      "integrity": "sha512-5gvq20T6vfpekVtqrYQsSCFZ1wEg5+wW0/QaZMWkFr6BqD3NfKs0rLCx4rrVlSWJeZb5NBJgVLswK/w2MWU+Gw==",
      "license": "MIT",
      "dependencies": {
        "iconv-lite": "^0.6.3",
        "whatwg-encoding": "^3.1.1"
      },
      "funding": {
        "url": "https://github.com/fb55/encoding-sniffer?sponsor=1"
      }
    },
    "node_modules/encoding-sniffer/node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/encoding/node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/end-of-stream": {
      "version": "1.4.5",
      "resolved": "https://registry.npmjs.org/end-of-stream/-/end-of-stream-1.4.5.tgz",
      "integrity": "sha512-ooEGc6HP26xXq/N+GCGOT0JKCLDGrq2bQUZrQ7gyrJiZANJ/8YDTxTpQBXGMn+WbIQXNVpyWymm7KYVICQnyOg==",
      "license": "MIT",
      "dependencies": {
        "once": "^1.4.0"
      }
    },
    "node_modules/entities": {
      "version": "4.5.0",
      "resolved": "https://registry.npmjs.org/entities/-/entities-4.5.0.tgz",
      "integrity": "sha512-V0hjH4dGPh9Ao5p0MoRY6BVqtwCjhz6vI5LT8AJ55H+4g9/4vbHx1I54fS0XuclLhDHArPQCiMjDxjaL8fPxhw==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/env-paths": {
      "version": "2.2.1",
      "resolved": "https://registry.npmjs.org/env-paths/-/env-paths-2.2.1.tgz",
      "integrity": "sha512-+h1lkLKhZMTYjog1VEpJNG7NZJWcuc2DDk/qsqSTRRCOXiLjeQ1d1/udrUGhqMxUgAlwKNZ0cf2uqan5GLuS2A==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/err-code": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/err-code/-/err-code-2.0.3.tgz",
      "integrity": "sha512-2bmlRpNKBxT/CRmPOlyISQpNj+qSeYvcym/uT0Jx2bMOlKLtSy1ZmLuVxSEKKyor/N5yhvp/ZiG1oE3DEYMSFA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/error-ex": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/error-ex/-/error-ex-1.3.2.tgz",
      "integrity": "sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==",
      "license": "MIT",
      "dependencies": {
        "is-arrayish": "^0.2.1"
      }
    },
    "node_modules/es-define-property": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/es-define-property/-/es-define-property-1.0.1.tgz",
      "integrity": "sha512-e3nRfgfUZ4rNGL232gUgX06QNyyez04KdjFrF+LTRoOXmrOgFKDg4BCdsjW8EnT69eqdYGmRpJwiPVYNrCaW3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-errors": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/es-errors/-/es-errors-1.3.0.tgz",
      "integrity": "sha512-Zf5H2Kxt2xjTvbJvP2ZWLEICxA6j+hAmMzIlypy4xcBg1vKVnx89Wy0GbS+kf5cwCVFFzdCFh2XSCFNULS6csw==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-object-atoms": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/es-object-atoms/-/es-object-atoms-1.1.1.tgz",
      "integrity": "sha512-FGgH2h8zKNim9ljj7dankFPcICIK9Cp5bm+c2gQSYePhpaG5+esrLODihIorn+Pe6FGJzWhXQotPv73jTaldXA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/es-set-tostringtag": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/es-set-tostringtag/-/es-set-tostringtag-2.1.0.tgz",
      "integrity": "sha512-j6vWzfrGVfyXxge+O0x5sh6cvxAog0a/4Rdd2K36zCMV5eJ+/+tOAngRO8cODMNWbVRdVlmGZQL2YS3yR8bIUA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.6",
        "has-tostringtag": "^1.0.2",
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/escalade": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/escalade/-/escalade-3.2.0.tgz",
      "integrity": "sha512-WUj2qlxaQtO4g6Pq5c29GTcWGDyd8itL8zTlipgECz3JesAiiOKotd8JU6otB3PACgG6xkJUyVhboMS+bje/jA==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/escape-html": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/escape-html/-/escape-html-1.0.3.tgz",
      "integrity": "sha512-NiSupZ4OeuGwr68lGIeym/ksIZMJodUGOSCZ/FSnTxcrekbvqrgdUxlJOMpijaKZVjAJrWrGs/6Jy8OMuyj9ow==",
      "license": "MIT"
    },
    "node_modules/escape-string-regexp": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/escape-string-regexp/-/escape-string-regexp-2.0.0.tgz",
      "integrity": "sha512-UpzcLCXolUWcNu5HtVMHYdXJjArjsF9C0aNnquZYY4uW/Vu0miy5YoWvbV345HauVvcAUnpRuhMMcqTcGOY2+w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/escodegen": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/escodegen/-/escodegen-2.1.0.tgz",
      "integrity": "sha512-2NlIDTwUWJN0mRPQOdtQBzbUHvdGY2P1VXSyU83Q3xKxM7WHX2Ql8dKq782Q9TgQUNOLEzEYu9bzLNj1q88I5w==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "esprima": "^4.0.1",
        "estraverse": "^5.2.0",
        "esutils": "^2.0.2"
      },
      "bin": {
        "escodegen": "bin/escodegen.js",
        "esgenerate": "bin/esgenerate.js"
      },
      "engines": {
        "node": ">=6.0"
      },
      "optionalDependencies": {
        "source-map": "~0.6.1"
      }
    },
    "node_modules/esprima": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/esprima/-/esprima-4.0.1.tgz",
      "integrity": "sha512-eGuFFw7Upda+g4p+QHvnW0RyTX/SVeJBDM/gCtMARO0cLuT2HcEKnTPvhjV6aGeqrCB/sbNop0Kszm0jsaWU4A==",
      "license": "BSD-2-Clause",
      "bin": {
        "esparse": "bin/esparse.js",
        "esvalidate": "bin/esvalidate.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/estraverse": {
      "version": "5.3.0",
      "resolved": "https://registry.npmjs.org/estraverse/-/estraverse-5.3.0.tgz",
      "integrity": "sha512-MMdARuVEQziNTeJD8DgMqmhwR11BRQ/cBP+pLtYdSTnf3MIO8fFeiINEbX36ZdNlfU/7A9f3gUw49B3oQsvwBA==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/esutils": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/esutils/-/esutils-2.0.3.tgz",
      "integrity": "sha512-kVscqXk4OCp68SZ0dkgEKVi6/8ij300KBWTJq32P/dYeWTSwK41WyTxalN1eRmA5Z9UU/LX9D7FWSmV9SAYx6g==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/etag": {
      "version": "1.8.1",
      "resolved": "https://registry.npmjs.org/etag/-/etag-1.8.1.tgz",
      "integrity": "sha512-aIL5Fx7mawVa300al2BnEE4iNvo1qETxLrPI/o05L7z6go7fCw1J6EQmbK4FmJ2AS7kgVF/KEZWufBfdClMcPg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/event-target-shim": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/event-target-shim/-/event-target-shim-5.0.1.tgz",
      "integrity": "sha512-i/2XbnSz/uxRCU6+NdVJgKWDTM427+MqYbkQzD321DuCQJUqOuJKIA0IM2+W2xtYHdKOmZ4dR6fExsd4SXL+WQ==",
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/eventemitter3": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/eventemitter3/-/eventemitter3-4.0.7.tgz",
      "integrity": "sha512-8guHBZCwKnFhYdHr2ysuRWErTwhoN2X8XELRlrRwpmfeY2jjuUN4taQMsULKUVo1K4DvZl+0pgfyoysHxvmvEw==",
      "license": "MIT"
    },
    "node_modules/events": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/events/-/events-3.3.0.tgz",
      "integrity": "sha512-mQw+2fkQbALzQ7V0MY0IqdnXNOeTtP4r0lN9z7AAawCXgqea7bDii20AYrIBrFd/Hx0M2Ocz6S111CaFkUcb0Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.8.x"
      }
    },
    "node_modules/execa": {
      "version": "5.1.1",
      "resolved": "https://registry.npmjs.org/execa/-/execa-5.1.1.tgz",
      "integrity": "sha512-8uSpZZocAZRBAPIEINJj3Lo9HyGitllczc27Eh5YYojjMFMn8yHMDMaUHE2Jqfq05D/wucwI4JGURyXt1vchyg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "cross-spawn": "^7.0.3",
        "get-stream": "^6.0.0",
        "human-signals": "^2.1.0",
        "is-stream": "^2.0.0",
        "merge-stream": "^2.0.0",
        "npm-run-path": "^4.0.1",
        "onetime": "^5.1.2",
        "signal-exit": "^3.0.3",
        "strip-final-newline": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/execa?sponsor=1"
      }
    },
    "node_modules/exit": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/exit/-/exit-0.1.2.tgz",
      "integrity": "sha512-Zk/eNKV2zbjpKzrsQ+n1G6poVbErQxJ0LBOJXaKZ1EViLzH+hrLu9cdXI4zw9dBQJslwBEpbQ2P1oS7nDxs6jQ==",
      "dev": true,
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/expand-template": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/expand-template/-/expand-template-2.0.3.tgz",
      "integrity": "sha512-XYfuKMvj4O35f/pOXLObndIRvyQ+/+6AhODh+OKWj9S9498pHHn/IMszH+gt0fBCRWMNfk1ZSp5x3AifmnI2vg==",
      "license": "(MIT OR WTFPL)",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/expect": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/expect/-/expect-29.7.0.tgz",
      "integrity": "sha512-2Zks0hf1VLFYI1kbh0I5jP3KHHyCHpkfyHBzsSXRFgl/Bg9mWYfMW8oD+PdMPlEwy5HNsR9JutYy6pMeOh61nw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/expect-utils": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "jest-matcher-utils": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/expr-eval": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/expr-eval/-/expr-eval-2.0.2.tgz",
      "integrity": "sha512-4EMSHGOPSwAfBiibw3ndnP0AvjDWLsMvGOvWEZ2F96IGk0bIVdjQisOHxReSkE13mHcfbuCiXw+G4y0zv6N8Eg==",
      "license": "MIT"
    },
    "node_modules/express": {
      "version": "4.21.2",
      "resolved": "https://registry.npmjs.org/express/-/express-4.21.2.tgz",
      "integrity": "sha512-28HqgMZAmih1Czt9ny7qr6ek2qddF4FclbMzwhCREB6OFfH+rXAnuNCwo1/wFvrtbgsQDb4kSbX9de9lFbrXnA==",
      "license": "MIT",
      "dependencies": {
        "accepts": "~1.3.8",
        "array-flatten": "1.1.1",
        "body-parser": "1.20.3",
        "content-disposition": "0.5.4",
        "content-type": "~1.0.4",
        "cookie": "0.7.1",
        "cookie-signature": "1.0.6",
        "debug": "2.6.9",
        "depd": "2.0.0",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "finalhandler": "1.3.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "merge-descriptors": "1.0.3",
        "methods": "~1.1.2",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "path-to-regexp": "0.1.12",
        "proxy-addr": "~2.0.7",
        "qs": "6.13.0",
        "range-parser": "~1.2.1",
        "safe-buffer": "5.2.1",
        "send": "0.19.0",
        "serve-static": "1.16.2",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "type-is": "~1.6.18",
        "utils-merge": "1.0.1",
        "vary": "~1.1.2"
      },
      "engines": {
        "node": ">= 0.10.0"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/express"
      }
    },
    "node_modules/extend": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/extend/-/extend-3.0.2.tgz",
      "integrity": "sha512-fjquC59cD7CyW6urNXK0FBufkZcoiGG80wTuPujX590cB5Ttln20E2UB4S/WARVqhXffZl2LNgS+gQdPIIim/g==",
      "license": "MIT"
    },
    "node_modules/extract-zip": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/extract-zip/-/extract-zip-2.0.1.tgz",
      "integrity": "sha512-GDhU9ntwuKyGXdZBUgTIe+vXnWj0fppUEtMDL0+idd5Sta8TGpHssn/eusA9mrPr9qNDym6SxAYZjNvCn/9RBg==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "debug": "^4.1.1",
        "get-stream": "^5.1.0",
        "yauzl": "^2.10.0"
      },
      "bin": {
        "extract-zip": "cli.js"
      },
      "engines": {
        "node": ">= 10.17.0"
      },
      "optionalDependencies": {
        "@types/yauzl": "^2.9.1"
      }
    },
    "node_modules/extract-zip/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/extract-zip/node_modules/get-stream": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-5.2.0.tgz",
      "integrity": "sha512-nBF+F1rAZVCu/p7rjzgA+Yb4lfYXrpl7a6VmJrU8wF9I1CKvP/QwPNZHnOlwbTkY6dvtFIzFMSyQXbLoTQPRpA==",
      "license": "MIT",
      "dependencies": {
        "pump": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/extract-zip/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/fast-fifo": {
      "version": "1.3.2",
      "resolved": "https://registry.npmjs.org/fast-fifo/-/fast-fifo-1.3.2.tgz",
      "integrity": "sha512-/d9sfos4yxzpwkDkuN7k2SqFKtYNmCTzgfEpz82x34IM9/zc8KGxQoXg1liNC/izpRM/MBdt44Nmx41ZWqk+FQ==",
      "license": "MIT"
    },
    "node_modules/fast-json-stable-stringify": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fast-json-stable-stringify/-/fast-json-stable-stringify-2.1.0.tgz",
      "integrity": "sha512-lhd/wF+Lk98HZoTCtlVraHtfh5XYijIjalXck7saUtuanSDyLMxnHhSXEDJqHxD7msR8D0uCmqlkwjCV8xvwHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fast-safe-stringify": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/fast-safe-stringify/-/fast-safe-stringify-2.1.1.tgz",
      "integrity": "sha512-W+KJc2dmILlPplD/H4K9l9LcAHAfPtP6BY84uVLXQ6Evcz9Lcg33Y2z1IVblT6xdY54PXYVHEv+0Wpq8Io6zkA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/fb-watchman": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/fb-watchman/-/fb-watchman-2.0.2.tgz",
      "integrity": "sha512-p5161BqbuCaSnB8jIbzQHOlpgsPmK5rJVDfDKO91Axs5NC1uu3HRQm6wt9cd9/+GtQQIO53JdGXXoyDpTAsgYA==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "bser": "2.1.1"
      }
    },
    "node_modules/fd-slicer": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/fd-slicer/-/fd-slicer-1.1.0.tgz",
      "integrity": "sha512-cE1qsB/VwyQozZ+q1dGxR8LBYNZeofhEdUNGSMbQD3Gw2lAzX9Zb3uIU6Ebc/Fmyjo9AWWfnn0AUCHqtevs/8g==",
      "license": "MIT",
      "dependencies": {
        "pend": "~1.2.0"
      }
    },
    "node_modules/file-type": {
      "version": "16.5.4",
      "resolved": "https://registry.npmjs.org/file-type/-/file-type-16.5.4.tgz",
      "integrity": "sha512-/yFHK0aGjFEgDJjEKP0pWCplsPFPhwyfwevf/pVxiN0tmE4L9LmwWxWukdJSHdoCli4VgQLehjJtwQBnqmsKcw==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "readable-web-to-node-stream": "^3.0.0",
        "strtok3": "^6.2.4",
        "token-types": "^4.1.1"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sindresorhus/file-type?sponsor=1"
      }
    },
    "node_modules/file-uri-to-path": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/file-uri-to-path/-/file-uri-to-path-1.0.0.tgz",
      "integrity": "sha512-0Zt+s3L7Vf1biwWZ29aARiVYLx7iMGnEUl9x33fbB/j3jR81u/O2LbqK+Bm1CDSNDKVtJ/YjwY7TUd5SkeLQLw==",
      "license": "MIT"
    },
    "node_modules/fill-range": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/fill-range/-/fill-range-7.1.1.tgz",
      "integrity": "sha512-YsGpe3WHLK8ZYi4tWDg2Jy3ebRz2rXowDxnld4bkQB00cc/1Zw9AWnC0i9ztDJitivtQvaI9KaLyKrc+hBW0yg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "to-regex-range": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/finalhandler": {
      "version": "1.3.1",
      "resolved": "https://registry.npmjs.org/finalhandler/-/finalhandler-1.3.1.tgz",
      "integrity": "sha512-6BN9trH7bp3qvnrRyzsBz+g3lZxTNZTbVO2EV1CS0WIcDbawYVdYvGflME/9QP0h0pYlCDBCTjYa9nZzMDpyxQ==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "on-finished": "2.4.1",
        "parseurl": "~1.3.3",
        "statuses": "2.0.1",
        "unpipe": "~1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/find-up": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/find-up/-/find-up-4.1.0.tgz",
      "integrity": "sha512-PpOwAdQ/YlXQ2vj8a3h8IipDuYRi3wceVQQGYWxNINccq40Anw7BlsEXCMbt1Zt+OLA6Fq9suIpIWD0OsnISlw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "locate-path": "^5.0.0",
        "path-exists": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/flat": {
      "version": "5.0.2",
      "resolved": "https://registry.npmjs.org/flat/-/flat-5.0.2.tgz",
      "integrity": "sha512-b6suED+5/3rTpUBdG1gupIl8MPFCAMA0QXwmljLhvCUKcUvdE4gWky9zpuGCcXHOsz4J9wPGNWq6OKpmIzz3hQ==",
      "license": "BSD-3-Clause",
      "bin": {
        "flat": "cli.js"
      }
    },
    "node_modules/follow-redirects": {
      "version": "1.15.9",
      "resolved": "https://registry.npmjs.org/follow-redirects/-/follow-redirects-1.15.9.tgz",
      "integrity": "sha512-gew4GsXizNgdoRyqmyfMHyAmXsZDk6mHkSxZFCzW9gwlbtOW44CDtYavM+y+72qD/Vq2l550kMF52DT8fOLJqQ==",
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/RubenVerborgh"
        }
      ],
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      },
      "peerDependenciesMeta": {
        "debug": {
          "optional": true
        }
      }
    },
    "node_modules/foreground-child": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/foreground-child/-/foreground-child-3.3.1.tgz",
      "integrity": "sha512-gIXjKqtFuWEgzFRJA9WCQeSJLZDjgJUOMCMzxtvFq/37KojM1BFGufqsCy0r4qSQmYLsZYMeyRqzIWOMup03sw==",
      "license": "ISC",
      "dependencies": {
        "cross-spawn": "^7.0.6",
        "signal-exit": "^4.0.1"
      },
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/foreground-child/node_modules/signal-exit": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-4.1.0.tgz",
      "integrity": "sha512-bzyZ1e88w9O1iNJbKnOlvYTrWPDl46O1bG0D3XInv+9tkPrxrN8jUUTiFlDkkmKWgn1M6CfIA13SuGqOa9Korw==",
      "license": "ISC",
      "engines": {
        "node": ">=14"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/form-data": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/form-data/-/form-data-4.0.4.tgz",
      "integrity": "sha512-KrGhL9Q4zjj0kiUt5OO4Mr/A/jlI2jDYs5eHBpYHPcBEVSiipAvn2Ko2HnPe20rmcuuvMHNdZFp+4IlGTMF0Ow==",
      "license": "MIT",
      "dependencies": {
        "asynckit": "^0.4.0",
        "combined-stream": "^1.0.8",
        "es-set-tostringtag": "^2.1.0",
        "hasown": "^2.0.2",
        "mime-types": "^2.1.12"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/form-data-encoder": {
      "version": "1.7.2",
      "resolved": "https://registry.npmjs.org/form-data-encoder/-/form-data-encoder-1.7.2.tgz",
      "integrity": "sha512-qfqtYan3rxrnCk1VYaA4H+Ms9xdpPqvLZa6xmMgFvhO32x7/3J/ExcTd6qpxM0vH2GdMI+poehyBZvqfMTto8A==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/formdata-node": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/formdata-node/-/formdata-node-4.4.1.tgz",
      "integrity": "sha512-0iirZp3uVDjVGt9p49aTaqjk84TrglENEDuqfdlZQ1roC9CWlPk6Avf8EEnZNcAqPonwkG35x4n3ww/1THYAeQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "node-domexception": "1.0.0",
        "web-streams-polyfill": "4.0.0-beta.3"
      },
      "engines": {
        "node": ">= 12.20"
      }
    },
    "node_modules/formidable": {
      "version": "3.5.4",
      "resolved": "https://registry.npmjs.org/formidable/-/formidable-3.5.4.tgz",
      "integrity": "sha512-YikH+7CUTOtP44ZTnUhR7Ic2UASBPOqmaRkRKxRbywPTe5VxF7RRCck4af9wutiZ/QKM5nME9Bie2fFaPz5Gug==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@paralleldrive/cuid2": "^2.2.2",
        "dezalgo": "^1.0.4",
        "once": "^1.4.0"
      },
      "engines": {
        "node": ">=14.0.0"
      },
      "funding": {
        "url": "https://ko-fi.com/tunnckoCore/commissions"
      }
    },
    "node_modules/forwarded": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/forwarded/-/forwarded-0.2.0.tgz",
      "integrity": "sha512-buRG0fpBtRHSTCOASe6hD258tEubFoRLb4ZNA6NxMVHNw2gOcwHo9wyablzMzOA5z9xA9L1KNjk/Nt6MT9aYow==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fresh": {
      "version": "0.5.2",
      "resolved": "https://registry.npmjs.org/fresh/-/fresh-0.5.2.tgz",
      "integrity": "sha512-zJ2mQYM18rEFOudeV4GShTGIQ7RbzA7ozbU9I/XBpm7kqgMywgmylMwXHxZJmkVoYkna9d2pVXVXPdYTP9ej8Q==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/fs-constants": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs-constants/-/fs-constants-1.0.0.tgz",
      "integrity": "sha512-y6OAwoSIf7FyjMIv94u+b5rdheZEjzR63GTyZJm5qh4Bi+2YgwLCcI/fPFZkL5PSixOt6ZNKm+w+Hfp/Bciwow==",
      "license": "MIT"
    },
    "node_modules/fs-minipass": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/fs-minipass/-/fs-minipass-2.1.0.tgz",
      "integrity": "sha512-V/JgOLFCS+R6Vcq0slCuaeWEdNC3ouDlJMNIsacH2VtALiu9mV4LPrHc5cDl8k5aw6J8jwgWWpiTo5RYhmIzvg==",
      "license": "ISC",
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/fs.realpath": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/fs.realpath/-/fs.realpath-1.0.0.tgz",
      "integrity": "sha512-OO0pH2lK6a0hZnAdau5ItzHPI6pUlvI7jMVnxUQRtw4owF2wk8lOSabtGDCTP4Ggrg2MbGnWO9X8K1t4+fGMDw==",
      "devOptional": true,
      "license": "ISC"
    },
    "node_modules/fsevents": {
      "version": "2.3.3",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.3.tgz",
      "integrity": "sha512-5xoDfX+fL7faATnagmWPpbFtwh/R77WmMMqqHGS65C3vvB0YHrgF+B1YmZ3441tMj5n63k0212XNoJwzlhffQw==",
      "dev": true,
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/function-bind": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/function-bind/-/function-bind-1.1.2.tgz",
      "integrity": "sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/gauge": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/gauge/-/gauge-4.0.4.tgz",
      "integrity": "sha512-f9m+BEN5jkg6a0fZjleidjN51VE1X+mPFQ2DJ0uv1V39oCLCbsGe6yjbBnp7eK7z/+GAon99a3nHuqbuuthyPg==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "aproba": "^1.0.3 || ^2.0.0",
        "color-support": "^1.1.3",
        "console-control-strings": "^1.1.0",
        "has-unicode": "^2.0.1",
        "signal-exit": "^3.0.7",
        "string-width": "^4.2.3",
        "strip-ansi": "^6.0.1",
        "wide-align": "^1.1.5"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/gaxios": {
      "version": "6.7.1",
      "resolved": "https://registry.npmjs.org/gaxios/-/gaxios-6.7.1.tgz",
      "integrity": "sha512-LDODD4TMYx7XXdpwxAVRAIAuB0bzv0s+ywFonY46k126qzQHT9ygyoa9tncmOiQmmDrik65UYsEkv3lbfqQ3yQ==",
      "license": "Apache-2.0",
      "dependencies": {
        "extend": "^3.0.2",
        "https-proxy-agent": "^7.0.1",
        "is-stream": "^2.0.0",
        "node-fetch": "^2.6.9",
        "uuid": "^9.0.1"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gaxios/node_modules/agent-base": {
      "version": "7.1.4",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.4.tgz",
      "integrity": "sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/gaxios/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/gaxios/node_modules/https-proxy-agent": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.2",
        "debug": "4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/gaxios/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/gcp-metadata": {
      "version": "6.1.1",
      "resolved": "https://registry.npmjs.org/gcp-metadata/-/gcp-metadata-6.1.1.tgz",
      "integrity": "sha512-a4tiq7E0/5fTjxPAaH4jpjkSv/uCaU2p5KC6HVGrvl0cDjA8iBZv4vv1gyzlmK0ZUKqwpOyQMKzZQe3lTit77A==",
      "license": "Apache-2.0",
      "dependencies": {
        "gaxios": "^6.1.1",
        "google-logging-utils": "^0.0.2",
        "json-bigint": "^1.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gensync": {
      "version": "1.0.0-beta.2",
      "resolved": "https://registry.npmjs.org/gensync/-/gensync-1.0.0-beta.2.tgz",
      "integrity": "sha512-3hN7NaskYvMDLQY55gnW3NQ+mesEAepTqlg+VEbj7zzqEMBVNhzcGYYeqFo/TlYz6eQiFcp1HcsCZO+nGgS8zg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6.9.0"
      }
    },
    "node_modules/get-caller-file": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/get-caller-file/-/get-caller-file-2.0.5.tgz",
      "integrity": "sha512-DyFP3BM/3YHTQOCUL/w0OZHR0lpKeGrxotcHWcqNEdnltqFwXVfhEBQ94eIo34AfQpo0rGki4cyIiftY06h2Fg==",
      "license": "ISC",
      "engines": {
        "node": "6.* || 8.* || >= 10.*"
      }
    },
    "node_modules/get-intrinsic": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/get-intrinsic/-/get-intrinsic-1.3.0.tgz",
      "integrity": "sha512-9fSjSaos/fRIVIp+xSJlE6lfwhES7LNtKaCBIamHsjr2na1BiABJPo0mOjjz8GJDURarmCPGqaiVg5mfjb98CQ==",
      "license": "MIT",
      "dependencies": {
        "call-bind-apply-helpers": "^1.0.2",
        "es-define-property": "^1.0.1",
        "es-errors": "^1.3.0",
        "es-object-atoms": "^1.1.1",
        "function-bind": "^1.1.2",
        "get-proto": "^1.0.1",
        "gopd": "^1.2.0",
        "has-symbols": "^1.1.0",
        "hasown": "^2.0.2",
        "math-intrinsics": "^1.1.0"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/get-package-type": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/get-package-type/-/get-package-type-0.1.0.tgz",
      "integrity": "sha512-pjzuKtY64GYfWizNAJ0fr9VqttZkNiK2iS430LtIHzjBEr6bX8Am2zm4sW4Ro5wjWW5cAlRL1qAMTcXbjNAO2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.0.0"
      }
    },
    "node_modules/get-proto": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/get-proto/-/get-proto-1.0.1.tgz",
      "integrity": "sha512-sTSfBjoXBp89JvIKIefqw7U2CCebsc74kiY6awiGogKtoSGbgjYE/G/+l9sF3MWFPNc9IcoOC4ODfKHfxFmp0g==",
      "license": "MIT",
      "dependencies": {
        "dunder-proto": "^1.0.1",
        "es-object-atoms": "^1.0.0"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/get-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/get-stream/-/get-stream-6.0.1.tgz",
      "integrity": "sha512-ts6Wi+2j3jQjqi70w5AlN8DFnkSwC+MqmxEzdEALB2qXZYV3X/b1CTfgPLGJNMeAWxdPfU8FO1ms3NUfaHCPYg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/get-uri": {
      "version": "6.0.5",
      "resolved": "https://registry.npmjs.org/get-uri/-/get-uri-6.0.5.tgz",
      "integrity": "sha512-b1O07XYq8eRuVzBNgJLstU6FYc1tS6wnMtF1I1D9lE8LxZSOGZ7LhxN54yPP6mGw5f2CkXY2BQUL9Fx41qvcIg==",
      "license": "MIT",
      "dependencies": {
        "basic-ftp": "^5.0.2",
        "data-uri-to-buffer": "^6.0.2",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/get-uri/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/get-uri/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/github-from-package": {
      "version": "0.0.0",
      "resolved": "https://registry.npmjs.org/github-from-package/-/github-from-package-0.0.0.tgz",
      "integrity": "sha512-SyHy3T1v2NUXn29OsWdxmK6RwHD+vkj3v8en8AOBZ1wBQ/hCAQ5bAQTD02kW4W9tUp/3Qh6J8r9EvntiyCmOOw==",
      "license": "MIT"
    },
    "node_modules/glob": {
      "version": "7.2.3",
      "resolved": "https://registry.npmjs.org/glob/-/glob-7.2.3.tgz",
      "integrity": "sha512-nFR0zLpU2YCaRxwoCJvL6UvCH2JFyFVIvwTLsIf21AuHlMskA1hhTdk+LlYJtOlYt9v6dvszD2BGRqBL+iQK9Q==",
      "deprecated": "Glob versions prior to v9 are no longer supported",
      "devOptional": true,
      "license": "ISC",
      "dependencies": {
        "fs.realpath": "^1.0.0",
        "inflight": "^1.0.4",
        "inherits": "2",
        "minimatch": "^3.1.1",
        "once": "^1.3.0",
        "path-is-absolute": "^1.0.0"
      },
      "engines": {
        "node": "*"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/glob-parent": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/glob-parent/-/glob-parent-5.1.2.tgz",
      "integrity": "sha512-AOIgSQCepiJYwP3ARnGx+5VnTu2HBYdzbGP45eLw1vr3zB3vZLeyed1sC9hnbcOc9/SrMyM5RPQrkGz4aS9Zow==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "is-glob": "^4.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/google-auth-library": {
      "version": "9.15.1",
      "resolved": "https://registry.npmjs.org/google-auth-library/-/google-auth-library-9.15.1.tgz",
      "integrity": "sha512-Jb6Z0+nvECVz+2lzSMt9u98UsoakXxA2HGHMCxh+so3n90XgYWkq5dur19JAJV7ONiJY22yBTyJB1TSkvPq9Ng==",
      "license": "Apache-2.0",
      "dependencies": {
        "base64-js": "^1.3.0",
        "ecdsa-sig-formatter": "^1.0.11",
        "gaxios": "^6.1.1",
        "gcp-metadata": "^6.1.0",
        "gtoken": "^7.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/google-logging-utils": {
      "version": "0.0.2",
      "resolved": "https://registry.npmjs.org/google-logging-utils/-/google-logging-utils-0.0.2.tgz",
      "integrity": "sha512-NEgUnEcBiP5HrPzufUkBzJOD/Sxsco3rLNo1F1TNf7ieU8ryUzBhqba8r756CjLX7rn3fHl6iLEwPYuqpoKgQQ==",
      "license": "Apache-2.0",
      "engines": {
        "node": ">=14"
      }
    },
    "node_modules/gopd": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/gopd/-/gopd-1.2.0.tgz",
      "integrity": "sha512-ZUKRh6/kUFoAiTAtTYPZJ3hw9wNxx+BIBOijnlG9PnrJsCcSjs1wyyD6vJpaYtgnzDrKYRSqf3OO6Rfa93xsRg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/graceful-fs": {
      "version": "4.2.11",
      "resolved": "https://registry.npmjs.org/graceful-fs/-/graceful-fs-4.2.11.tgz",
      "integrity": "sha512-RbJ5/jmFcNNCcDV5o9eTnBLJ/HszWV0P73bc+Ff4nS/rJj+YaS6IGyiOL0VoBYX+l1Wrl3k63h/KrH+nhJ0XvQ==",
      "license": "ISC"
    },
    "node_modules/graphql": {
      "version": "16.11.0",
      "resolved": "https://registry.npmjs.org/graphql/-/graphql-16.11.0.tgz",
      "integrity": "sha512-mS1lbMsxgQj6hge1XZ6p7GPhbrtFwUFYi3wRzXAC/FmYnyXMTvvI3td3rjmQ2u8ewXueaSvRPWaEcgVVOT9Jnw==",
      "license": "MIT",
      "engines": {
        "node": "^12.22.0 || ^14.16.0 || ^16.0.0 || >=17.0.0"
      }
    },
    "node_modules/graphql-request": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/graphql-request/-/graphql-request-6.1.0.tgz",
      "integrity": "sha512-p+XPfS4q7aIpKVcgmnZKhMNqhltk20hfXtkaIkTfjjmiKMJ5xrt5c743cL03y/K7y1rg3WrIC49xGiEQ4mxdNw==",
      "license": "MIT",
      "dependencies": {
        "@graphql-typed-document-node/core": "^3.2.0",
        "cross-fetch": "^3.1.5"
      },
      "peerDependencies": {
        "graphql": "14 - 16"
      }
    },
    "node_modules/gtoken": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/gtoken/-/gtoken-7.1.0.tgz",
      "integrity": "sha512-pCcEwRi+TKpMlxAQObHDQ56KawURgyAf6jtIY046fJ5tIv3zDe/LEIubckAO8fj6JnAxLdmWkUfNyulQ2iKdEw==",
      "license": "MIT",
      "dependencies": {
        "gaxios": "^6.0.0",
        "jws": "^4.0.0"
      },
      "engines": {
        "node": ">=14.0.0"
      }
    },
    "node_modules/has-flag": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-3.0.0.tgz",
      "integrity": "sha512-sKJf1+ceQBr4SMkvQnBDNDtf4TXpVhVGateu0t918bl30FnbE2m4vNLX+VWe/dpjlb+HugGYzW7uQXH98HPEYw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/has-symbols": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/has-symbols/-/has-symbols-1.1.0.tgz",
      "integrity": "sha512-1cDNdwJ2Jaohmb3sg4OmKaMBwuC48sYni5HUw2DvsC8LjGTLK9h+eb1X6RyuOHe4hT0ULCW68iomhjUoKUqlPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-tostringtag": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/has-tostringtag/-/has-tostringtag-1.0.2.tgz",
      "integrity": "sha512-NqADB8VjPFLM2V0VvHUewwwsw0ZWBaIdgo+ieHtK3hasLz4qeCRjYcqfB6AQrBggRKppKF8L52/VqdVsO47Dlw==",
      "license": "MIT",
      "dependencies": {
        "has-symbols": "^1.0.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/has-unicode": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/has-unicode/-/has-unicode-2.0.1.tgz",
      "integrity": "sha512-8Rf9Y83NBReMnx0gFzA8JImQACstCYWUplepDa9xprwwtmgEZUF0h/i5xSA625zB/I37EtrswSST6OXxwaaIJQ==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/hasown": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/hasown/-/hasown-2.0.2.tgz",
      "integrity": "sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==",
      "license": "MIT",
      "dependencies": {
        "function-bind": "^1.1.2"
      },
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/html-escaper": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/html-escaper/-/html-escaper-2.0.2.tgz",
      "integrity": "sha512-H2iMtd0I4Mt5eYiapRdIDjp+XzelXQ0tFE4JS7YFwFevXXMmOp9myNrUvCg0D6ws8iqkRPBfKHgbwig1SmlLfg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/htmlparser2": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/htmlparser2/-/htmlparser2-10.0.0.tgz",
      "integrity": "sha512-TwAZM+zE5Tq3lrEHvOlvwgj1XLWQCtaaibSN11Q+gGBAS7Y1uZSWwXXRe4iF6OXnaq1riyQAPFOBtYc77Mxq0g==",
      "funding": [
        "https://github.com/fb55/htmlparser2?sponsor=1",
        {
          "type": "github",
          "url": "https://github.com/sponsors/fb55"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "domelementtype": "^2.3.0",
        "domhandler": "^5.0.3",
        "domutils": "^3.2.1",
        "entities": "^6.0.0"
      }
    },
    "node_modules/htmlparser2/node_modules/entities": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/entities/-/entities-6.0.1.tgz",
      "integrity": "sha512-aN97NXWF6AWBTahfVOIrB/NShkzi5H7F9r1s9mD3cDj4Ko5f2qhhVoYMibXF7GlLveb/D2ioWay8lxI97Ven3g==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/http-cache-semantics": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/http-cache-semantics/-/http-cache-semantics-4.2.0.tgz",
      "integrity": "sha512-dTxcvPXqPvXBQpq5dUr6mEMJX4oIEFv6bwom3FDwKRDsuIjjJGANqhBuoAn9c1RQJIdAKav33ED65E2ys+87QQ==",
      "license": "BSD-2-Clause",
      "optional": true
    },
    "node_modules/http-errors": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/http-errors/-/http-errors-2.0.0.tgz",
      "integrity": "sha512-FtwrG/euBzaEjYeRqOgly7G0qviiXoJWnvEH2Z1plBdXgbyjv34pHTSb9zoeHMyDy33+DWy5Wt9Wo+TURtOYSQ==",
      "license": "MIT",
      "dependencies": {
        "depd": "2.0.0",
        "inherits": "2.0.4",
        "setprototypeof": "1.2.0",
        "statuses": "2.0.1",
        "toidentifier": "1.0.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/http-proxy-agent": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-4.0.1.tgz",
      "integrity": "sha512-k0zdNgqWTGA6aeIRVpvfVob4fL52dTfaehylg0Y4UvSySvOq/Y+BOyPrgpUrA7HylqvU8vIZGsRuXmspskV0Tg==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "@tootallnate/once": "1",
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/http-proxy-agent/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/http-proxy-agent/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/https-proxy-agent": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-5.0.1.tgz",
      "integrity": "sha512-dFcAjpTQFgoLMzC2VwU+C/CbS7uRL0lWmxDITmqm7C+7F0Odmj6s9l6alZc6AELXhrnggM2CeWSXHGOdX2YtwA==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "agent-base": "6",
        "debug": "4"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/https-proxy-agent/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/https-proxy-agent/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/human-signals": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/human-signals/-/human-signals-2.1.0.tgz",
      "integrity": "sha512-B4FFZ6q/T2jhhksgkbEW3HBvWIfDW85snkQgawt07S7J5QXTk6BkNV+0yAeZrM5QpMAdYlocGoljn0sJ/WQkFw==",
      "dev": true,
      "license": "Apache-2.0",
      "engines": {
        "node": ">=10.17.0"
      }
    },
    "node_modules/humanize-ms": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/humanize-ms/-/humanize-ms-1.2.1.tgz",
      "integrity": "sha512-Fl70vYtsAFb/C06PTS9dZBo7ihau+Tu/DNCk/OyHhea07S+aeMWpFFkUaXRa8fI+ScZbEI8dfSxwY7gxZ9SAVQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.0.0"
      }
    },
    "node_modules/ibm-cloud-sdk-core": {
      "version": "5.4.2",
      "resolved": "https://registry.npmjs.org/ibm-cloud-sdk-core/-/ibm-cloud-sdk-core-5.4.2.tgz",
      "integrity": "sha512-5VFkKYU/vSIWFJTVt392XEdPmiEwUJqhxjn1MRO3lfELyU2FB+yYi8brbmXUgq+D1acHR1fpS7tIJ6IlnrR9Cg==",
      "license": "Apache-2.0",
      "peer": true,
      "dependencies": {
        "@types/debug": "^4.1.12",
        "@types/node": "^18.19.80",
        "@types/tough-cookie": "^4.0.0",
        "axios": "^1.11.0",
        "camelcase": "^6.3.0",
        "debug": "^4.3.4",
        "dotenv": "^16.4.5",
        "extend": "3.0.2",
        "file-type": "16.5.4",
        "form-data": "^4.0.4",
        "isstream": "0.1.2",
        "jsonwebtoken": "^9.0.2",
        "mime-types": "2.1.35",
        "retry-axios": "^2.6.0",
        "tough-cookie": "^4.1.3"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/ibm-cloud-sdk-core/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/ibm-cloud-sdk-core/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/iconv-lite": {
      "version": "0.4.24",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.4.24.tgz",
      "integrity": "sha512-v3MXnZAcvnywkTUEZomIActle7RXXeedOR31wwl7VlyoXO4Qi9arvSenNQWne1TcRwhCL1HwLI21bEqdpj8/rA==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/ieee754": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/ieee754/-/ieee754-1.2.1.tgz",
      "integrity": "sha512-dcyqhDvX1C46lXZcVqCpK+FtMRQVdIMN6/Df5js2zouUsqG7I6sFxitIC+7KYK29KdXOLHdu9zL4sFnoVQnqaA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "BSD-3-Clause"
    },
    "node_modules/ignore-by-default": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/ignore-by-default/-/ignore-by-default-1.0.1.tgz",
      "integrity": "sha512-Ius2VYcGNk7T90CppJqcIkS5ooHUZyIQK+ClZfMfMNFEF9VSE73Fq+906u/CWu92x4gzZMWOwfFYckPObzdEbA==",
      "dev": true,
      "license": "ISC"
    },
    "node_modules/immediate": {
      "version": "3.0.6",
      "resolved": "https://registry.npmjs.org/immediate/-/immediate-3.0.6.tgz",
      "integrity": "sha512-XXOFtyqDjNDAQxVfYxuF7g9Il/IbWmmlQg2MYKOH8ExIT1qg6xc4zyS3HaEEATgs1btfzxq15ciUiY7gjSXRGQ==",
      "license": "MIT"
    },
    "node_modules/import-fresh": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/import-fresh/-/import-fresh-3.3.1.tgz",
      "integrity": "sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==",
      "license": "MIT",
      "dependencies": {
        "parent-module": "^1.0.0",
        "resolve-from": "^4.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/import-fresh/node_modules/resolve-from": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-4.0.0.tgz",
      "integrity": "sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/import-local": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/import-local/-/import-local-3.2.0.tgz",
      "integrity": "sha512-2SPlun1JUPWoM6t3F0dw0FkCF/jWY8kttcY4f599GLTSjh2OCuuhdTkJQsEcZzBqbXZGKMK2OqW1oZsjtf/gQA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "pkg-dir": "^4.2.0",
        "resolve-cwd": "^3.0.0"
      },
      "bin": {
        "import-local-fixture": "fixtures/cli.js"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/imurmurhash": {
      "version": "0.1.4",
      "resolved": "https://registry.npmjs.org/imurmurhash/-/imurmurhash-0.1.4.tgz",
      "integrity": "sha512-JmXMZ6wuvDmLiHEml9ykzqO6lwFbof0GG4IkcGaENdCRDDmMVnny7s5HsIgHCbaq0w2MyPhDqkhTUgS2LU2PHA==",
      "devOptional": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.8.19"
      }
    },
    "node_modules/indent-string": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/indent-string/-/indent-string-4.0.0.tgz",
      "integrity": "sha512-EdDDZu4A2OyIK7Lr/2zG+w5jmbuk1DVBnEwREQvBzspBJkCEbRa8GxU1lghYcaGJCnRWibjDXlq779X1/y5xwg==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/infer-owner": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/infer-owner/-/infer-owner-1.0.4.tgz",
      "integrity": "sha512-IClj+Xz94+d7irH5qRyfJonOdfTzuDaifE6ZPWfx0N0+/ATZCbuTPq2prFl526urkQd90WyUKIh1DfBQ2hMz9A==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/inflight": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/inflight/-/inflight-1.0.6.tgz",
      "integrity": "sha512-k92I/b08q4wvFscXCLvqfsHCrjrF7yiXsQuIVvVE7N82W3+aqpzuUdBbfhWcy/FZR3/4IgflMgKLOsvPDrGCJA==",
      "deprecated": "This module is not supported, and leaks memory. Do not use it. Check out lru-cache if you want a good and tested way to coalesce async requests by a key value, which is much more comprehensive and powerful.",
      "devOptional": true,
      "license": "ISC",
      "dependencies": {
        "once": "^1.3.0",
        "wrappy": "1"
      }
    },
    "node_modules/inherits": {
      "version": "2.0.4",
      "resolved": "https://registry.npmjs.org/inherits/-/inherits-2.0.4.tgz",
      "integrity": "sha512-k/vGaX4/Yla3WzyMCvTQOXYeIHvqOKtnqBduzTHpzpQZzAskKMhZ2K+EnBiSM9zGSoIFeMpXKxa4dYeZIQqewQ==",
      "license": "ISC"
    },
    "node_modules/ini": {
      "version": "1.3.8",
      "resolved": "https://registry.npmjs.org/ini/-/ini-1.3.8.tgz",
      "integrity": "sha512-JV/yugV2uzW5iMRSiZAyDtQd+nxtUnjeLt0acNdw98kKLrvuRVyB80tsREOE7yvGVgalhZ6RNXCmEHkUKBKxew==",
      "license": "ISC"
    },
    "node_modules/ip-address": {
      "version": "9.0.5",
      "resolved": "https://registry.npmjs.org/ip-address/-/ip-address-9.0.5.tgz",
      "integrity": "sha512-zHtQzGojZXTwZTHQqra+ETKd4Sn3vgi7uBmlPoXVWZqYvuKmtI0l/VZTjqGmJY9x88GGOaZ9+G9ES8hC4T4X8g==",
      "license": "MIT",
      "dependencies": {
        "jsbn": "1.1.0",
        "sprintf-js": "^1.1.3"
      },
      "engines": {
        "node": ">= 12"
      }
    },
    "node_modules/ip-address/node_modules/sprintf-js": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.1.3.tgz",
      "integrity": "sha512-Oo+0REFV59/rz3gfJNKQiBlwfHaSESl1pcGyABQsnnIfWOFt6JNj5gCog2U6MLZ//IGYD+nA8nI+mTShREReaA==",
      "license": "BSD-3-Clause"
    },
    "node_modules/ipaddr.js": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/ipaddr.js/-/ipaddr.js-1.9.1.tgz",
      "integrity": "sha512-0KI/607xoxSToH7GjN1FfSbLoU0+btTicjsQSWQlh/hZykN8KpmMf7uYwPW3R+akZ6R/w18ZlXSHBYXiYUPO3g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/is-arrayish": {
      "version": "0.2.1",
      "resolved": "https://registry.npmjs.org/is-arrayish/-/is-arrayish-0.2.1.tgz",
      "integrity": "sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==",
      "license": "MIT"
    },
    "node_modules/is-binary-path": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-binary-path/-/is-binary-path-2.1.0.tgz",
      "integrity": "sha512-ZMERYes6pDydyuGidse7OsHxtbI7WVeUEozgR/g7rd0xUimYNlvZRE/K2MgZTjWy725IfelLeVcEM97mmtRGXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "binary-extensions": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-core-module": {
      "version": "2.16.1",
      "resolved": "https://registry.npmjs.org/is-core-module/-/is-core-module-2.16.1.tgz",
      "integrity": "sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "hasown": "^2.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/is-extglob": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/is-extglob/-/is-extglob-2.1.1.tgz",
      "integrity": "sha512-SbKbANkN603Vi4jEZv49LeVJMn4yGwsbzZworEoyEiutsN3nJYdbO36zfhGJ6QEDpOZIFkDtnq5JRxmvl3jsoQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-fullwidth-code-point": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/is-fullwidth-code-point/-/is-fullwidth-code-point-3.0.0.tgz",
      "integrity": "sha512-zymm5+u+sCsSWyD9qNaejV3DFvhCKclKdizYaJUuHA83RLjb7nSuGnddCHGv0hk+KY7BMAlsWeK4Ueg6EV6XQg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/is-generator-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/is-generator-fn/-/is-generator-fn-2.1.0.tgz",
      "integrity": "sha512-cTIB4yPYL/Grw0EaSzASzg6bBy9gqCofvWN8okThAYIxKJZC+udlRAmGbM0XLeniEJSs8uEgHPGuHSe1XsOLSQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/is-glob": {
      "version": "4.0.3",
      "resolved": "https://registry.npmjs.org/is-glob/-/is-glob-4.0.3.tgz",
      "integrity": "sha512-xelSayHH36ZgE7ZWhli7pW34hNbNl8Ojv5KVmkJD4hBdD3th8Tfk9vYasLM+mXWOZhFkgZfxhLSnrwRr4elSSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-extglob": "^2.1.1"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/is-lambda": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/is-lambda/-/is-lambda-1.0.1.tgz",
      "integrity": "sha512-z7CMFGNrENq5iFB9Bqo64Xk6Y9sg+epq1myIcdHaGnbMTYOxvzsEtdYqQUylB7LxfkvgrrjP32T6Ywciio9UIQ==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/is-number": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/is-number/-/is-number-7.0.0.tgz",
      "integrity": "sha512-41Cifkg6e8TylSpdtTpeLVMqvSBEVzTttHvERD741+pnZ8ANv0004MRL43QKPDlK9cGvNp6NZWZUBlbGXYxxng==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=0.12.0"
      }
    },
    "node_modules/is-stream": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/is-stream/-/is-stream-2.0.1.tgz",
      "integrity": "sha512-hFoiJiTl63nn+kstHGBtewWSKnQLpyb155KHheA1l39uvtO9nWIop1p3udqPcUd/xbF1VLMO4n7OI6p7RbngDg==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/isarray": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/isarray/-/isarray-1.0.0.tgz",
      "integrity": "sha512-VLghIWNM6ELQzo7zwmcg0NmTVyWKYjvIeM83yjp0wRDTmUnrM678fQbcKBo6n2CJEF0szoG//ytg+TKla89ALQ==",
      "license": "MIT"
    },
    "node_modules/isexe": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/isexe/-/isexe-2.0.0.tgz",
      "integrity": "sha512-RHxMLp9lnKHGHRng9QFhRCMbYAcVpn69smSGcq3f36xjgVVWThj4qqLbTLlq7Ssj8B+fIQ1EuCEGI2lKsyQeIw==",
      "license": "ISC"
    },
    "node_modules/isstream": {
      "version": "0.1.2",
      "resolved": "https://registry.npmjs.org/isstream/-/isstream-0.1.2.tgz",
      "integrity": "sha512-Yljz7ffyPbrLpLngrMtZ7NduUgVvi6wG9RJ9IUcyCd59YQ911PBJphODUcbOVbqYfxe1wuYf/LJ8PauMRwsM/g==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/istanbul-lib-coverage": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/istanbul-lib-coverage/-/istanbul-lib-coverage-3.2.2.tgz",
      "integrity": "sha512-O8dpsF+r0WV/8MNRKfnmrtCWhuKjxrq2w+jpzBL5UZKTi2LeVWnWOmWRxFlesJONmc+wLAGvKQZEOanko0LFTg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-instrument": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/istanbul-lib-instrument/-/istanbul-lib-instrument-6.0.3.tgz",
      "integrity": "sha512-Vtgk7L/R2JHyyGW07spoFlB8/lpjiOLTjMdms6AFMraYt3BaJauod/NGrfnVG/y4Ix1JEuMRPDPEj2ua+zz1/Q==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@babel/core": "^7.23.9",
        "@babel/parser": "^7.23.9",
        "@istanbuljs/schema": "^0.1.3",
        "istanbul-lib-coverage": "^3.2.0",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-report/-/istanbul-lib-report-3.0.1.tgz",
      "integrity": "sha512-GCfE1mtsHGOELCU8e/Z7YWzpmybrx/+dSTfLrvY8qRmaY6zXTKWn6WQIjaAFw069icm6GVMNkgu0NzI4iPZUNw==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "istanbul-lib-coverage": "^3.0.0",
        "make-dir": "^4.0.0",
        "supports-color": "^7.1.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-report/node_modules/supports-color": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-7.2.0.tgz",
      "integrity": "sha512-qpCAvRl9stuOHveKsn7HncJRvv501qIacKzQlO/+Lwxc9+0q2wLyv4Dfvt80/DPn2pqOBsJdDiogXGR9+OvwRw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/istanbul-lib-source-maps": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/istanbul-lib-source-maps/-/istanbul-lib-source-maps-4.0.1.tgz",
      "integrity": "sha512-n3s8EwkdFIJCG3BPKBYvskgXGoy88ARzvegkitk60NxRdwltLOTaH7CUiMRXvwYorl0Q712iEjcWB+fK/MrWVw==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "debug": "^4.1.1",
        "istanbul-lib-coverage": "^3.0.0",
        "source-map": "^0.6.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/istanbul-lib-source-maps/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/istanbul-reports": {
      "version": "3.1.7",
      "resolved": "https://registry.npmjs.org/istanbul-reports/-/istanbul-reports-3.1.7.tgz",
      "integrity": "sha512-BewmUXImeuRk2YY0PVbxgKAysvhRPUQE0h5QRM++nVWyubKGV0l8qQ5op8+B2DOmwSe63Jivj0BjkPQVf8fP5g==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "html-escaper": "^2.0.0",
        "istanbul-lib-report": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jackspeak": {
      "version": "3.4.3",
      "resolved": "https://registry.npmjs.org/jackspeak/-/jackspeak-3.4.3.tgz",
      "integrity": "sha512-OGlZQpz2yfahA/Rd1Y8Cd9SIEsqvXkLVoSw/cgwhnhFMDbsQFeZYoJJ7bIZBS9BcamUW96asq/npPWugM+RQBw==",
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "@isaacs/cliui": "^8.0.2"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      },
      "optionalDependencies": {
        "@pkgjs/parseargs": "^0.11.0"
      }
    },
    "node_modules/jest": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest/-/jest-29.7.0.tgz",
      "integrity": "sha512-NIy3oAFp9shda19hy4HK0HRTWKtPJmGdnvywu01nOqNC2vZg+Z+fvJDxpMQA88eb2I9EcafcdjYgsDthnYTvGw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^29.7.0",
        "@jest/types": "^29.6.3",
        "import-local": "^3.0.2",
        "jest-cli": "^29.7.0"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-changed-files": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-changed-files/-/jest-changed-files-29.7.0.tgz",
      "integrity": "sha512-fEArFiwf1BpQ+4bXSprcDc3/x4HSzL4al2tozwVpDFpsxALjLYdyiIK4e5Vz66GQJIbXJ82+35PtysofptNX2w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "execa": "^5.0.0",
        "jest-util": "^29.7.0",
        "p-limit": "^3.1.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-circus": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-circus/-/jest-circus-29.7.0.tgz",
      "integrity": "sha512-3E1nCMgipcTkCocFwM90XXQab9bS+GMsjdpmPrlelaxwD93Ad8iVEjX/vvHPdLPnFf+L40u+5+iutRdA1N9myw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/expect": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "co": "^4.6.0",
        "dedent": "^1.0.0",
        "is-generator-fn": "^2.0.0",
        "jest-each": "^29.7.0",
        "jest-matcher-utils": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-runtime": "^29.7.0",
        "jest-snapshot": "^29.7.0",
        "jest-util": "^29.7.0",
        "p-limit": "^3.1.0",
        "pretty-format": "^29.7.0",
        "pure-rand": "^6.0.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-cli": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-cli/-/jest-cli-29.7.0.tgz",
      "integrity": "sha512-OVVobw2IubN/GSYsxETi+gOe7Ka59EFMR/twOU3Jb2GnKKeMGJB5SGUUrEz3SFVmJASUdZUzy83sLNNQ2gZslg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/core": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/types": "^29.6.3",
        "chalk": "^4.0.0",
        "create-jest": "^29.7.0",
        "exit": "^0.1.2",
        "import-local": "^3.0.2",
        "jest-config": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "yargs": "^17.3.1"
      },
      "bin": {
        "jest": "bin/jest.js"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "node-notifier": "^8.0.1 || ^9.0.0 || ^10.0.0"
      },
      "peerDependenciesMeta": {
        "node-notifier": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-config/-/jest-config-29.7.0.tgz",
      "integrity": "sha512-uXbpfeQ7R6TZBqI3/TxCU4q4ttk3u0PJeC+E0zbfSoSjq6bJ7buBPxzQPL0ifrkY4DNu4JUdk0ImlBUYi840eQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@jest/test-sequencer": "^29.7.0",
        "@jest/types": "^29.6.3",
        "babel-jest": "^29.7.0",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "deepmerge": "^4.2.2",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-circus": "^29.7.0",
        "jest-environment-node": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "jest-regex-util": "^29.6.3",
        "jest-resolve": "^29.7.0",
        "jest-runner": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "micromatch": "^4.0.4",
        "parse-json": "^5.2.0",
        "pretty-format": "^29.7.0",
        "slash": "^3.0.0",
        "strip-json-comments": "^3.1.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "peerDependencies": {
        "@types/node": "*",
        "ts-node": ">=9.0.0"
      },
      "peerDependenciesMeta": {
        "@types/node": {
          "optional": true
        },
        "ts-node": {
          "optional": true
        }
      }
    },
    "node_modules/jest-config/node_modules/strip-json-comments": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-3.1.1.tgz",
      "integrity": "sha512-6fPc+R4ihwqP6N/aIv2f1gMH8lOVtWQHoqC4yK6oSDVVocumAsfCqjkXnqiYMhmMwS/mEHLp7Vehlt3ql6lEig==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/jest-diff": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-diff/-/jest-diff-29.7.0.tgz",
      "integrity": "sha512-LMIgiIrhigmPrs03JHpxUh2yISK3vLFPkAodPeo0+BuF7wA2FoQbkEg1u8gBYBThncu7e1oEDUfIXVuTqLRUjw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "diff-sequences": "^29.6.3",
        "jest-get-type": "^29.6.3",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-docblock": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-docblock/-/jest-docblock-29.7.0.tgz",
      "integrity": "sha512-q617Auw3A612guyaFgsbFeYpNP5t2aoUNLwBUbc/0kD1R4t9ixDbyFTHd1nok4epoVFpr7PmeWHrhvuV3XaJ4g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "detect-newline": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-each": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-each/-/jest-each-29.7.0.tgz",
      "integrity": "sha512-gns+Er14+ZrEoC5fhOfYCY1LOHHr0TI+rQUHZS8Ttw2l7gl+80eHc/gFf2Ktkw0+SIACDTeWvpFcv3B04VembQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.6.3",
        "jest-util": "^29.7.0",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-environment-node": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-environment-node/-/jest-environment-node-29.7.0.tgz",
      "integrity": "sha512-DOSwCRqXirTOyheM+4d5YZOrWcdu0LNZ87ewUoywbcb2XR4wKgqiG8vNeYwhjFMbEkfju7wx2GYH0P2gevGvFw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/fake-timers": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "jest-mock": "^29.7.0",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-get-type": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/jest-get-type/-/jest-get-type-29.6.3.tgz",
      "integrity": "sha512-zrteXnqYxfQh7l5FHyL38jL39di8H8rHoecLH3JNxH3BwOrBsNeabdap5e0I23lD4HHI8W5VFBZqG4Eaq5LNcw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-haste-map": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-haste-map/-/jest-haste-map-29.7.0.tgz",
      "integrity": "sha512-fP8u2pyfqx0K1rGn1R9pyE0/KTn+G7PxktWidOBTqFPLYX0b9ksaMFkhK5vrS3DVun09pckLdlx90QthlW7AmA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/graceful-fs": "^4.1.3",
        "@types/node": "*",
        "anymatch": "^3.0.3",
        "fb-watchman": "^2.0.0",
        "graceful-fs": "^4.2.9",
        "jest-regex-util": "^29.6.3",
        "jest-util": "^29.7.0",
        "jest-worker": "^29.7.0",
        "micromatch": "^4.0.4",
        "walker": "^1.0.8"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      },
      "optionalDependencies": {
        "fsevents": "^2.3.2"
      }
    },
    "node_modules/jest-leak-detector": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-leak-detector/-/jest-leak-detector-29.7.0.tgz",
      "integrity": "sha512-kYA8IJcSYtST2BY9I+SMC32nDpBT3J2NvWJx8+JCuCdl/CR1I4EKUJROiP8XtCcxqgTTBGJNdbB1A8XRKbTetw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "jest-get-type": "^29.6.3",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-matcher-utils": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-matcher-utils/-/jest-matcher-utils-29.7.0.tgz",
      "integrity": "sha512-sBkD+Xi9DtcChsI3L3u0+N0opgPYnCRPtGcQYrgXmR+hmt/fYfWAL0xRXYU8eWOdfuLgBe0YCW3AFtnRLagq/g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "jest-diff": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-message-util": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-message-util/-/jest-message-util-29.7.0.tgz",
      "integrity": "sha512-GBEV4GRADeP+qtB2+6u61stea8mGcOT4mCtrYISZwfu9/ISHFJ/5zOMXYbpBE9RsS5+Gb63DW4FgmnKJ79Kf6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.12.13",
        "@jest/types": "^29.6.3",
        "@types/stack-utils": "^2.0.0",
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "micromatch": "^4.0.4",
        "pretty-format": "^29.7.0",
        "slash": "^3.0.0",
        "stack-utils": "^2.0.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-mock": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-mock/-/jest-mock-29.7.0.tgz",
      "integrity": "sha512-ITOMZn+UkYS4ZFh83xYAOzWStloNzJFO2s8DWrE4lhtGD+AorgnbkiKERe4wQVBydIGPx059g6riW5Btp6Llnw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "jest-util": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-pnp-resolver": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/jest-pnp-resolver/-/jest-pnp-resolver-1.2.3.tgz",
      "integrity": "sha512-+3NpwQEnRoIBtx4fyhblQDPgJI0H1IEIkX7ShLUjPGA7TtUTvI1oiKi3SR4oBR0hQhQR80l4WAe5RrXBwWMA8w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      },
      "peerDependencies": {
        "jest-resolve": "*"
      },
      "peerDependenciesMeta": {
        "jest-resolve": {
          "optional": true
        }
      }
    },
    "node_modules/jest-regex-util": {
      "version": "29.6.3",
      "resolved": "https://registry.npmjs.org/jest-regex-util/-/jest-regex-util-29.6.3.tgz",
      "integrity": "sha512-KJJBsRCyyLNWCNBOvZyRDnAIfUiRJ8v+hOBQYGn8gDyF3UegwiP4gwRR3/SDa42g1YbVycTidUF3rKjyLFDWbg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-resolve/-/jest-resolve-29.7.0.tgz",
      "integrity": "sha512-IOVhZSrg+UvVAshDSDtHyFCCBUl/Q3AAJv8iZ6ZjnZ74xzvwuzLXid9IIIPgTnY62SJjfuupMKZsZQRsCvxEgA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chalk": "^4.0.0",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "jest-pnp-resolver": "^1.2.2",
        "jest-util": "^29.7.0",
        "jest-validate": "^29.7.0",
        "resolve": "^1.20.0",
        "resolve.exports": "^2.0.0",
        "slash": "^3.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-resolve-dependencies": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-resolve-dependencies/-/jest-resolve-dependencies-29.7.0.tgz",
      "integrity": "sha512-un0zD/6qxJ+S0et7WxeI3H5XSe9lTBBR7bOHCHXkKR6luG5mwDDlIzVQ0V5cZCuoTgEdcdwzTghYkTWfubi+nA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "jest-regex-util": "^29.6.3",
        "jest-snapshot": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runner": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-runner/-/jest-runner-29.7.0.tgz",
      "integrity": "sha512-fsc4N6cPCAahybGBfTRcq5wFR6fpLznMg47sY5aDpsoejOcVYFb07AHuSnR0liMcPTgBsA3ZJL6kFOjPdoNipQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/console": "^29.7.0",
        "@jest/environment": "^29.7.0",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "graceful-fs": "^4.2.9",
        "jest-docblock": "^29.7.0",
        "jest-environment-node": "^29.7.0",
        "jest-haste-map": "^29.7.0",
        "jest-leak-detector": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-resolve": "^29.7.0",
        "jest-runtime": "^29.7.0",
        "jest-util": "^29.7.0",
        "jest-watcher": "^29.7.0",
        "jest-worker": "^29.7.0",
        "p-limit": "^3.1.0",
        "source-map-support": "0.5.13"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-runtime": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-runtime/-/jest-runtime-29.7.0.tgz",
      "integrity": "sha512-gUnLjgwdGqW7B4LvOIkbKs9WGbn+QLqRQQ9juC6HndeDiezIwhDP+mhMwHWCEcfQ5RUXa6OPnFF8BJh5xegwwQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/environment": "^29.7.0",
        "@jest/fake-timers": "^29.7.0",
        "@jest/globals": "^29.7.0",
        "@jest/source-map": "^29.6.3",
        "@jest/test-result": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "cjs-module-lexer": "^1.0.0",
        "collect-v8-coverage": "^1.0.0",
        "glob": "^7.1.3",
        "graceful-fs": "^4.2.9",
        "jest-haste-map": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-mock": "^29.7.0",
        "jest-regex-util": "^29.6.3",
        "jest-resolve": "^29.7.0",
        "jest-snapshot": "^29.7.0",
        "jest-util": "^29.7.0",
        "slash": "^3.0.0",
        "strip-bom": "^4.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-snapshot": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-snapshot/-/jest-snapshot-29.7.0.tgz",
      "integrity": "sha512-Rm0BMWtxBcioHr1/OX5YCP8Uov4riHvKPknOGs804Zg9JGZgmIBkbtlxJC/7Z4msKYVbIJtfU+tKb8xlYNfdkw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@babel/core": "^7.11.6",
        "@babel/generator": "^7.7.2",
        "@babel/plugin-syntax-jsx": "^7.7.2",
        "@babel/plugin-syntax-typescript": "^7.7.2",
        "@babel/types": "^7.3.3",
        "@jest/expect-utils": "^29.7.0",
        "@jest/transform": "^29.7.0",
        "@jest/types": "^29.6.3",
        "babel-preset-current-node-syntax": "^1.0.0",
        "chalk": "^4.0.0",
        "expect": "^29.7.0",
        "graceful-fs": "^4.2.9",
        "jest-diff": "^29.7.0",
        "jest-get-type": "^29.6.3",
        "jest-matcher-utils": "^29.7.0",
        "jest-message-util": "^29.7.0",
        "jest-util": "^29.7.0",
        "natural-compare": "^1.4.0",
        "pretty-format": "^29.7.0",
        "semver": "^7.5.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-util": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-util/-/jest-util-29.7.0.tgz",
      "integrity": "sha512-z6EbKajIpqGKU56y5KBUgy1dt1ihhQJgWzUlZHArA/+X2ad7Cb5iF+AK1EWVL/Bo7Rz9uurpqw6SiBCefUbCGA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "chalk": "^4.0.0",
        "ci-info": "^3.2.0",
        "graceful-fs": "^4.2.9",
        "picomatch": "^2.2.3"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-validate": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-validate/-/jest-validate-29.7.0.tgz",
      "integrity": "sha512-ZB7wHqaRGVw/9hST/OuFUReG7M8vKeq0/J2egIGLdvjHCmYqGARhzXmtgi+gVeZ5uXFF219aOc3Ls2yLg27tkw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/types": "^29.6.3",
        "camelcase": "^6.2.0",
        "chalk": "^4.0.0",
        "jest-get-type": "^29.6.3",
        "leven": "^3.1.0",
        "pretty-format": "^29.7.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-watcher": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-watcher/-/jest-watcher-29.7.0.tgz",
      "integrity": "sha512-49Fg7WXkU3Vl2h6LbLtMQ/HyB6rXSIX7SqvBLQmssRBGN9I0PNvPmAmCWSOY6SOvrjhI/F7/bGAv9RtnsPA03g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/test-result": "^29.7.0",
        "@jest/types": "^29.6.3",
        "@types/node": "*",
        "ansi-escapes": "^4.2.1",
        "chalk": "^4.0.0",
        "emittery": "^0.13.1",
        "jest-util": "^29.7.0",
        "string-length": "^4.0.1"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/jest-worker/-/jest-worker-29.7.0.tgz",
      "integrity": "sha512-eIz2msL/EzL9UFTFFx7jBTkeZfku0yUAyZZZmJ93H2TYEiroIx2PQjEXcwYtYl8zXCxb+PAmA2hLIt/6ZEkPHw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@types/node": "*",
        "jest-util": "^29.7.0",
        "merge-stream": "^2.0.0",
        "supports-color": "^8.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/jest-worker/node_modules/has-flag": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/has-flag/-/has-flag-4.0.0.tgz",
      "integrity": "sha512-EykJT/Q1KjTWctppgIAgfSO0tKVuZUjhgMr17kqTumMl6Afv3EISleU7qZUzoXDFTAHTDC4NOoG/ZxU3EvlMPQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/jest-worker/node_modules/supports-color": {
      "version": "8.1.1",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-8.1.1.tgz",
      "integrity": "sha512-MpUEN2OodtUzxvKQl72cUF7RQ5EiHsGvSsVG0ia9c5RbWGL2CI4C7EpPS8UTBIplnlzZiNuV56w+FuNxy3ty2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/supports-color?sponsor=1"
      }
    },
    "node_modules/jintr": {
      "version": "3.3.1",
      "resolved": "https://registry.npmjs.org/jintr/-/jintr-3.3.1.tgz",
      "integrity": "sha512-nnOzyhf0SLpbWuZ270Omwbj5LcXUkTcZkVnK8/veJXtSZOiATM5gMZMdmzN75FmTyj+NVgrGaPdH12zIJ24oIA==",
      "funding": [
        "https://github.com/sponsors/LuanRT"
      ],
      "license": "MIT",
      "dependencies": {
        "acorn": "^8.8.0"
      }
    },
    "node_modules/js-tiktoken": {
      "version": "1.0.20",
      "resolved": "https://registry.npmjs.org/js-tiktoken/-/js-tiktoken-1.0.20.tgz",
      "integrity": "sha512-Xlaqhhs8VfCd6Sh7a1cFkZHQbYTLCwVJJWiHVxBYzLPxW0XsoxBy1hitmjkdIjD3Aon5BXLHFwU5O8WUx6HH+A==",
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.5.1"
      }
    },
    "node_modules/js-tokens": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/js-tokens/-/js-tokens-4.0.0.tgz",
      "integrity": "sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==",
      "license": "MIT"
    },
    "node_modules/js-yaml": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/js-yaml/-/js-yaml-4.1.0.tgz",
      "integrity": "sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==",
      "license": "MIT",
      "dependencies": {
        "argparse": "^2.0.1"
      },
      "bin": {
        "js-yaml": "bin/js-yaml.js"
      }
    },
    "node_modules/js-yaml/node_modules/argparse": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/argparse/-/argparse-2.0.1.tgz",
      "integrity": "sha512-8+9WqebbFzpX9OR+Wa6O29asIogeRMzcGtAINdpMHHyAg10f05aSFVBbcEqGf/PXw1EjAZ+q2/bEBg3DvurK3Q==",
      "license": "Python-2.0"
    },
    "node_modules/jsbn": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/jsbn/-/jsbn-1.1.0.tgz",
      "integrity": "sha512-4bYVV3aAMtDTTu4+xsDYa6sy9GyJ69/amsu9sYF2zqjiEoZA5xJi3BrfX3uY+/IekIu7MwdObdbDWpoZdBv3/A==",
      "license": "MIT"
    },
    "node_modules/jsesc": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/jsesc/-/jsesc-3.1.0.tgz",
      "integrity": "sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "jsesc": "bin/jsesc"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/json-bigint": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/json-bigint/-/json-bigint-1.0.0.tgz",
      "integrity": "sha512-SiPv/8VpZuWbvLSMtTDU8hEfrZWg/mH/nV/b4o0CYbSxu1UIQPLdwKOCIyLQX+VIPO5vrLX3i8qtqFyhdPSUSQ==",
      "license": "MIT",
      "dependencies": {
        "bignumber.js": "^9.0.0"
      }
    },
    "node_modules/json-parse-even-better-errors": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/json-parse-even-better-errors/-/json-parse-even-better-errors-2.3.1.tgz",
      "integrity": "sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==",
      "license": "MIT"
    },
    "node_modules/json5": {
      "version": "2.2.3",
      "resolved": "https://registry.npmjs.org/json5/-/json5-2.2.3.tgz",
      "integrity": "sha512-XmOWe7eyHYH14cLdVPoyg+GOH3rYX++KpzrylJwSW98t3Nk+U8XOl8FWKOgwtzdb8lXGf6zYwDUzeHMWfxasyg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "json5": "lib/cli.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/jsonpointer": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/jsonpointer/-/jsonpointer-5.0.1.tgz",
      "integrity": "sha512-p/nXbhSEcu3pZRdkW1OfJhpsVtW1gd4Wa1fnQc9YLiTfAjn0312eMKimbdIQzuZl9aa9xUGaRlP9T/CJE/ditQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/jsonwebtoken": {
      "version": "9.0.2",
      "resolved": "https://registry.npmjs.org/jsonwebtoken/-/jsonwebtoken-9.0.2.tgz",
      "integrity": "sha512-PRp66vJ865SSqOlgqS8hujT5U4AOgMfhrwYIuIhfKaoSCZcirrmASQr8CX7cUg+RMih+hgznrjp99o+W4pJLHQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "jws": "^3.2.2",
        "lodash.includes": "^4.3.0",
        "lodash.isboolean": "^3.0.3",
        "lodash.isinteger": "^4.0.4",
        "lodash.isnumber": "^3.0.3",
        "lodash.isplainobject": "^4.0.6",
        "lodash.isstring": "^4.0.1",
        "lodash.once": "^4.0.0",
        "ms": "^2.1.1",
        "semver": "^7.5.4"
      },
      "engines": {
        "node": ">=12",
        "npm": ">=6"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jwa": {
      "version": "1.4.2",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-1.4.2.tgz",
      "integrity": "sha512-eeH5JO+21J78qMvTIDdBXidBd6nG2kZjg5Ohz/1fpa28Z4CcsWUzJ1ZZyFq/3z3N17aZy+ZuBoHljASbL1WfOw==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jsonwebtoken/node_modules/jws": {
      "version": "3.2.2",
      "resolved": "https://registry.npmjs.org/jws/-/jws-3.2.2.tgz",
      "integrity": "sha512-YHlZCB6lMTllWDtSPHz/ZXTsi8S00usEV6v1tjq8tOUZzw7DpSDWVXjXDre6ed1w/pd495ODpHZYSdkRTsa0HA==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "jwa": "^1.4.1",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jsonwebtoken/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/jszip": {
      "version": "3.10.1",
      "resolved": "https://registry.npmjs.org/jszip/-/jszip-3.10.1.tgz",
      "integrity": "sha512-xXDvecyTpGLrqFrvkrUSoxxfJI5AH7U8zxxtVclpsUtMCq4JQ290LY8AW5c7Ggnr/Y/oK+bQMbqK2qmtk3pN4g==",
      "license": "(MIT OR GPL-3.0-or-later)",
      "dependencies": {
        "lie": "~3.3.0",
        "pako": "~1.0.2",
        "readable-stream": "~2.3.6",
        "setimmediate": "^1.0.5"
      }
    },
    "node_modules/jwa": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/jwa/-/jwa-2.0.1.tgz",
      "integrity": "sha512-hRF04fqJIP8Abbkq5NKGN0Bbr3JxlQ+qhZufXVr0DvujKy93ZCbXZMHDL4EOtodSbCWxOqR8MS1tXA5hwqCXDg==",
      "license": "MIT",
      "dependencies": {
        "buffer-equal-constant-time": "^1.0.1",
        "ecdsa-sig-formatter": "1.0.11",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/jws": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/jws/-/jws-4.0.0.tgz",
      "integrity": "sha512-KDncfTmOZoOMTFG4mBlG0qUIOlc03fmzH+ru6RgYVZhPkyiy/92Owlt/8UEN+a4TXR1FQetfIpJE8ApdvdVxTg==",
      "license": "MIT",
      "dependencies": {
        "jwa": "^2.0.0",
        "safe-buffer": "^5.0.1"
      }
    },
    "node_modules/kleur": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/kleur/-/kleur-3.0.3.tgz",
      "integrity": "sha512-eTIzlVOSUR+JxdDFepEYcBMtZ9Qqdef+rnzWdRZuMbOywu5tO2w2N7rqjoANZ5k9vywhL6Br1VRjUIgTQx4E8w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/langchain": {
      "version": "0.3.30",
      "resolved": "https://registry.npmjs.org/langchain/-/langchain-0.3.30.tgz",
      "integrity": "sha512-UyVsfwHDpHbrnWrjWuhJHqi8Non+Zcsf2kdpDTqyJF8NXrHBOpjdHT5LvPuW9fnE7miDTWf5mLcrWAGZgcrznQ==",
      "license": "MIT",
      "dependencies": {
        "@langchain/openai": ">=0.1.0 <0.7.0",
        "@langchain/textsplitters": ">=0.0.0 <0.2.0",
        "js-tiktoken": "^1.0.12",
        "js-yaml": "^4.1.0",
        "jsonpointer": "^5.0.1",
        "langsmith": "^0.3.33",
        "openapi-types": "^12.1.3",
        "p-retry": "4",
        "uuid": "^10.0.0",
        "yaml": "^2.2.1",
        "zod": "^3.25.32"
      },
      "engines": {
        "node": ">=18"
      },
      "peerDependencies": {
        "@langchain/anthropic": "*",
        "@langchain/aws": "*",
        "@langchain/cerebras": "*",
        "@langchain/cohere": "*",
        "@langchain/core": ">=0.3.58 <0.4.0",
        "@langchain/deepseek": "*",
        "@langchain/google-genai": "*",
        "@langchain/google-vertexai": "*",
        "@langchain/google-vertexai-web": "*",
        "@langchain/groq": "*",
        "@langchain/mistralai": "*",
        "@langchain/ollama": "*",
        "@langchain/xai": "*",
        "axios": "*",
        "cheerio": "*",
        "handlebars": "^4.7.8",
        "peggy": "^3.0.2",
        "typeorm": "*"
      },
      "peerDependenciesMeta": {
        "@langchain/anthropic": {
          "optional": true
        },
        "@langchain/aws": {
          "optional": true
        },
        "@langchain/cerebras": {
          "optional": true
        },
        "@langchain/cohere": {
          "optional": true
        },
        "@langchain/deepseek": {
          "optional": true
        },
        "@langchain/google-genai": {
          "optional": true
        },
        "@langchain/google-vertexai": {
          "optional": true
        },
        "@langchain/google-vertexai-web": {
          "optional": true
        },
        "@langchain/groq": {
          "optional": true
        },
        "@langchain/mistralai": {
          "optional": true
        },
        "@langchain/ollama": {
          "optional": true
        },
        "@langchain/xai": {
          "optional": true
        },
        "axios": {
          "optional": true
        },
        "cheerio": {
          "optional": true
        },
        "handlebars": {
          "optional": true
        },
        "peggy": {
          "optional": true
        },
        "typeorm": {
          "optional": true
        }
      }
    },
    "node_modules/langchain/node_modules/uuid": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-10.0.0.tgz",
      "integrity": "sha512-8XkAphELsDnEGrDxUOHB3RGvXz6TeuYSGEZBOjtTtPm2lwhGBjLgOzLHB63IUWfBpNucQjND6d3AOudO+H3RWQ==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/langsmith": {
      "version": "0.3.48",
      "resolved": "https://registry.npmjs.org/langsmith/-/langsmith-0.3.48.tgz",
      "integrity": "sha512-oEsj0Z8S2Chgb3vJzRX2vplLu4RWR1cpraIaVwv2PsNZ57VbHgZEdXdeh5kh16iP8PAv04JkBncP+KLRoKBFEw==",
      "license": "MIT",
      "dependencies": {
        "@types/uuid": "^10.0.0",
        "chalk": "^4.1.2",
        "console-table-printer": "^2.12.1",
        "p-queue": "^6.6.2",
        "p-retry": "4",
        "semver": "^7.6.3",
        "uuid": "^10.0.0"
      },
      "peerDependencies": {
        "@opentelemetry/api": "*",
        "@opentelemetry/exporter-trace-otlp-proto": "*",
        "@opentelemetry/sdk-trace-base": "*",
        "openai": "*"
      },
      "peerDependenciesMeta": {
        "@opentelemetry/api": {
          "optional": true
        },
        "@opentelemetry/exporter-trace-otlp-proto": {
          "optional": true
        },
        "@opentelemetry/sdk-trace-base": {
          "optional": true
        },
        "openai": {
          "optional": true
        }
      }
    },
    "node_modules/langsmith/node_modules/uuid": {
      "version": "10.0.0",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-10.0.0.tgz",
      "integrity": "sha512-8XkAphELsDnEGrDxUOHB3RGvXz6TeuYSGEZBOjtTtPm2lwhGBjLgOzLHB63IUWfBpNucQjND6d3AOudO+H3RWQ==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/lazystream": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/lazystream/-/lazystream-1.0.1.tgz",
      "integrity": "sha512-b94GiNHQNy6JNTrt5w6zNyffMrNkXZb3KTkCZJb2V1xaEGCk093vkZ2jk3tpaeP33/OiXC+WvK9AxUebnf5nbw==",
      "license": "MIT",
      "dependencies": {
        "readable-stream": "^2.0.5"
      },
      "engines": {
        "node": ">= 0.6.3"
      }
    },
    "node_modules/leven": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/leven/-/leven-3.1.0.tgz",
      "integrity": "sha512-qsda+H8jTaUaN/x5vzW2rzc+8Rw4TAQ/4KjB46IwK5VH+IlVeeeje/EoZRpiXvIqjFgK84QffqPztGI3VBLG1A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/lie": {
      "version": "3.3.0",
      "resolved": "https://registry.npmjs.org/lie/-/lie-3.3.0.tgz",
      "integrity": "sha512-UaiMJzeWRlEujzAuw5LokY1L5ecNQYZKfmyZ9L7wDHb/p5etKaxXhohBcrw0EYby+G/NA52vRSN4N39dxHAIwQ==",
      "license": "MIT",
      "dependencies": {
        "immediate": "~3.0.5"
      }
    },
    "node_modules/lines-and-columns": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/lines-and-columns/-/lines-and-columns-1.2.4.tgz",
      "integrity": "sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==",
      "license": "MIT"
    },
    "node_modules/locate-path": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/locate-path/-/locate-path-5.0.0.tgz",
      "integrity": "sha512-t7hw9pI+WvuwNJXwk5zVHpyhIqzg2qTlklJOf0mVxGSbe3Fp2VieZcduNYjaLDoy6p9uGpQEGWG87WpMKlNq8g==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-locate": "^4.1.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/lodash": {
      "version": "4.17.21",
      "resolved": "https://registry.npmjs.org/lodash/-/lodash-4.17.21.tgz",
      "integrity": "sha512-v2kDEe57lecTulaDIuNTPy3Ry4gLGJ6Z1O3vE1krgXZNrsQ+LFTGHVxVjcXPs17LhbZVGedAJv8XZ1tvj5FvSg==",
      "license": "MIT"
    },
    "node_modules/lodash.camelcase": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.camelcase/-/lodash.camelcase-4.3.0.tgz",
      "integrity": "sha512-TwuEnCnxbc3rAvhf/LbG7tJUDzhqXyFnv3dtzLOPgCG/hODL7WFnsbwktkD7yUV0RrreP/l1PALq/YSg6VvjlA==",
      "license": "MIT"
    },
    "node_modules/lodash.includes": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/lodash.includes/-/lodash.includes-4.3.0.tgz",
      "integrity": "sha512-W3Bx6mdkRTGtlJISOvVD/lbqjTlPPUDTMnlXZFnVwi9NKJ6tiAk6LVdlhZMm17VZisqhKcgzpO5Wz91PCt5b0w==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/lodash.isboolean": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isboolean/-/lodash.isboolean-3.0.3.tgz",
      "integrity": "sha512-Bz5mupy2SVbPHURB98VAcw+aHh4vRV5IPNhILUCsOzRmsTmSQ17jIuqopAentWoehktxGd9e/hbIXq980/1QJg==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/lodash.isinteger": {
      "version": "4.0.4",
      "resolved": "https://registry.npmjs.org/lodash.isinteger/-/lodash.isinteger-4.0.4.tgz",
      "integrity": "sha512-DBwtEWN2caHQ9/imiNeEA5ys1JoRtRfY3d7V9wkqtbycnAmTvRRmbHKDV4a0EYc678/dia0jrte4tjYwVBaZUA==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/lodash.isnumber": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/lodash.isnumber/-/lodash.isnumber-3.0.3.tgz",
      "integrity": "sha512-QYqzpfwO3/CWf3XP+Z+tkQsfaLL/EnUlXWVkIk5FUPc4sBdTehEqZONuyRt2P67PXAk+NXmTBcc97zw9t1FQrw==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/lodash.isplainobject": {
      "version": "4.0.6",
      "resolved": "https://registry.npmjs.org/lodash.isplainobject/-/lodash.isplainobject-4.0.6.tgz",
      "integrity": "sha512-oSXzaWypCMHkPC3NvBEaPHf0KsA5mvPrOPgQWDsbg8n7orZ290M0BmC/jgRZ4vcJ6DTAhjrsSYgdsW/F+MFOBA==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/lodash.isstring": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/lodash.isstring/-/lodash.isstring-4.0.1.tgz",
      "integrity": "sha512-0wJxfxH1wgO3GrbuP+dTTk7op+6L41QCXbGINEmD+ny/G/eCqGzxyCsh7159S+mgDDcoarnBw6PC1PS5+wUGgw==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/lodash.once": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/lodash.once/-/lodash.once-4.1.1.tgz",
      "integrity": "sha512-Sb487aTOCr9drQVL8pIxOzVhafOjZN9UU54hiN8PU3uAiSV7lx1yYNpbNmex2PK6dSJoNTSJUUswT651yww3Mg==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/long": {
      "version": "5.3.2",
      "resolved": "https://registry.npmjs.org/long/-/long-5.3.2.tgz",
      "integrity": "sha512-mNAgZ1GmyNhD7AuqnTG3/VQ26o760+ZYBPKjPvugO8+nLbYfX6TVpJPseBvopbdY+qpZ/lKUnmEc1LeZYS3QAA==",
      "license": "Apache-2.0"
    },
    "node_modules/lop": {
      "version": "0.4.2",
      "resolved": "https://registry.npmjs.org/lop/-/lop-0.4.2.tgz",
      "integrity": "sha512-RefILVDQ4DKoRZsJ4Pj22TxE3omDO47yFpkIBoDKzkqPRISs5U1cnAdg/5583YPkWPaLIYHOKRMQSvjFsO26cw==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "duck": "^0.1.12",
        "option": "~0.2.1",
        "underscore": "^1.13.1"
      }
    },
    "node_modules/lru-cache": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-6.0.0.tgz",
      "integrity": "sha512-Jo6dJ04CmSjuznwJSS3pUeWmd/H0ffTlkXXgwZi+eq1UCmqQwCh+eLsYOYCwY991i2Fah4h1BEMCx4qThGbsiA==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/make-dir": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/make-dir/-/make-dir-4.0.0.tgz",
      "integrity": "sha512-hXdUTZYIVOt1Ex//jAQi+wTZZpUpwBj/0QsOzqegb3rGMMeJiSEu5xLHnYfBrRV4RH2+OCSOO95Is/7x1WJ4bw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/make-fetch-happen": {
      "version": "9.1.0",
      "resolved": "https://registry.npmjs.org/make-fetch-happen/-/make-fetch-happen-9.1.0.tgz",
      "integrity": "sha512-+zopwDy7DNknmwPQplem5lAZX/eCOzSvSNNcSKm5eVwTkOBzoktEfXsa9L23J/GIRhxRsaxzkPEhrJEpE2F4Gg==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "agentkeepalive": "^4.1.3",
        "cacache": "^15.2.0",
        "http-cache-semantics": "^4.1.0",
        "http-proxy-agent": "^4.0.1",
        "https-proxy-agent": "^5.0.0",
        "is-lambda": "^1.0.1",
        "lru-cache": "^6.0.0",
        "minipass": "^3.1.3",
        "minipass-collect": "^1.0.2",
        "minipass-fetch": "^1.3.2",
        "minipass-flush": "^1.0.5",
        "minipass-pipeline": "^1.2.4",
        "negotiator": "^0.6.2",
        "promise-retry": "^2.0.1",
        "socks-proxy-agent": "^6.0.0",
        "ssri": "^8.0.0"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/makeerror": {
      "version": "1.0.12",
      "resolved": "https://registry.npmjs.org/makeerror/-/makeerror-1.0.12.tgz",
      "integrity": "sha512-JmqCvUhmt43madlpFzG4BQzG2Z3m6tvQDNKdClZnO3VbIudJYmxsT0FNJMeiB2+JTSlTQTSbU8QdesVmwJcmLg==",
      "dev": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "tmpl": "1.0.5"
      }
    },
    "node_modules/mammoth": {
      "version": "1.9.1",
      "resolved": "https://registry.npmjs.org/mammoth/-/mammoth-1.9.1.tgz",
      "integrity": "sha512-4S2v1eP4Yo4so0zGNicJKcP93su3wDPcUk+xvkjSG75nlNjSkDJu8BhWQ+e54BROM0HfA6nPzJn12S6bq2Ko6w==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "@xmldom/xmldom": "^0.8.6",
        "argparse": "~1.0.3",
        "base64-js": "^1.5.1",
        "bluebird": "~3.4.0",
        "dingbat-to-unicode": "^1.0.1",
        "jszip": "^3.7.1",
        "lop": "^0.4.2",
        "path-is-absolute": "^1.0.0",
        "underscore": "^1.13.1",
        "xmlbuilder": "^10.0.0"
      },
      "bin": {
        "mammoth": "bin/mammoth"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/math-intrinsics": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/math-intrinsics/-/math-intrinsics-1.1.0.tgz",
      "integrity": "sha512-/IXtbwEk5HTPyEwyKX6hGkYXxM9nbj64B+ilVJnC/R6B0pH5G4V3b0pVbL7DBj4tkhBAppbQUlf6F6Xl9LHu1g==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      }
    },
    "node_modules/media-typer": {
      "version": "0.3.0",
      "resolved": "https://registry.npmjs.org/media-typer/-/media-typer-0.3.0.tgz",
      "integrity": "sha512-dq+qelQ9akHpcOl/gUVRTxVIOkAJ1wR3QAvb4RsVjS8oVoFjDGTc679wJYmUmknUF5HwMLOgb5O+a3KxfWapPQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/merge-descriptors": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/merge-descriptors/-/merge-descriptors-1.0.3.tgz",
      "integrity": "sha512-gaNvAS7TZ897/rVaZ0nMtAyxNyi/pdbjbAwUpFQpN70GqnVfOiXpeUUMKRBmzXaSQ8DdTX4/0ms62r2K+hE6mQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/merge-stream": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/merge-stream/-/merge-stream-2.0.0.tgz",
      "integrity": "sha512-abv/qOcuPfk3URPfDzmZU1LKmuw8kT+0nIHvKrKgFrwifol/doWcdA4ZqsWQ8ENrFKkd67Mfpo/LovbIUsbt3w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/methods": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/methods/-/methods-1.1.2.tgz",
      "integrity": "sha512-iclAHeNqNm68zFtnZ0e+1L2yUIdvzNoauKU4WBA3VvH/vPFieF7qfRlwUZU+DA9P9bPXIS90ulxoUoCH23sV2w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/micromatch": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/micromatch/-/micromatch-4.0.8.tgz",
      "integrity": "sha512-PXwfBhYu0hBCPw8Dn0E+WDYb7af3dSLVWKi3HGv84IdF4TyFoC0ysxFd0Goxw7nSv4T/PzEJQxsYsEiFCKo2BA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "braces": "^3.0.3",
        "picomatch": "^2.3.1"
      },
      "engines": {
        "node": ">=8.6"
      }
    },
    "node_modules/mime": {
      "version": "1.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-1.6.0.tgz",
      "integrity": "sha512-x0Vn8spI+wuJ1O6S7gnbaQg8Pxh4NNHb7KSINmEWKiPE4RKOplvijn+NkmYmmRgP68mc70j2EbeTFRsrswaQeg==",
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/mime-db": {
      "version": "1.52.0",
      "resolved": "https://registry.npmjs.org/mime-db/-/mime-db-1.52.0.tgz",
      "integrity": "sha512-sPU4uV7dYlvtWJxwwxHD0PuihVNiE7TyAbQ5SWxDCB9mUYvOgroQOwYQQOKPJ8CIbE+1ETVlOoK1UC2nU3gYvg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mime-types": {
      "version": "2.1.35",
      "resolved": "https://registry.npmjs.org/mime-types/-/mime-types-2.1.35.tgz",
      "integrity": "sha512-ZDY+bPm5zTTF+YpCrAU9nK0UgICYPT0QtT1NZWFv4s++TNkcgVaT0g6+4R2uI4MjQjzysHB1zxuWL50hzaeXiw==",
      "license": "MIT",
      "dependencies": {
        "mime-db": "1.52.0"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/mimic-fn": {
      "version": "2.1.0",
      "resolved": "https://registry.npmjs.org/mimic-fn/-/mimic-fn-2.1.0.tgz",
      "integrity": "sha512-OqbOk5oEQeAZ8WXWydlu9HJjz9WVdEIvamMCcXmuqUYjTknH/sqsWvhQ3vgwKFRR1HpjvNBKQ37nbJgYzGqGcg==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/mimic-response": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/mimic-response/-/mimic-response-3.1.0.tgz",
      "integrity": "sha512-z0yWI+4FDrrweS8Zmt4Ej5HdJmky15+L2e6Wgn3+iK5fWzb6T3fhNFq2+MeTRb064c6Wr4N/wv0DzQTjNzHNGQ==",
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/minimatch": {
      "version": "3.1.2",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-3.1.2.tgz",
      "integrity": "sha512-J7p63hRiAjw1NDEww1W7i37+ByIrOWO5XQQAzZ3VOcL0PNybwpfmV/N05zFAzwQ9USyEcX6t3UO+K5aqBQOIHw==",
      "devOptional": true,
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^1.1.7"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/minimist": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/minimist/-/minimist-1.2.8.tgz",
      "integrity": "sha512-2yyAR8qBkN3YuheJanUpWC5U3bb5osDywNB8RzDVlDwDHbocAJveqqj1u8+SVD7jkWT4yvsHCpWqqWqAxb0zCA==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/minipass": {
      "version": "3.3.6",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-3.3.6.tgz",
      "integrity": "sha512-DxiNidxSEK+tHG6zOIklvNOwm3hvCrbUrdtzY74U6HKTJxvIDfOUL5W5P2Ghd3DTkhhKPYGqeNUIh5qcM4YBfw==",
      "license": "ISC",
      "dependencies": {
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minipass-collect": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/minipass-collect/-/minipass-collect-1.0.2.tgz",
      "integrity": "sha512-6T6lH0H8OG9kITm/Jm6tdooIbogG9e0tLgpY6mphXSm/A9u8Nq1ryBG+Qspiub9LjWlBPsPS3tWQ/Botq4FdxA==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minipass-fetch": {
      "version": "1.4.1",
      "resolved": "https://registry.npmjs.org/minipass-fetch/-/minipass-fetch-1.4.1.tgz",
      "integrity": "sha512-CGH1eblLq26Y15+Azk7ey4xh0J/XfJfrCox5LDJiKqI2Q2iwOLOKrlmIaODiSQS8d18jalF6y2K2ePUm0CmShw==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "minipass": "^3.1.0",
        "minipass-sized": "^1.0.3",
        "minizlib": "^2.0.0"
      },
      "engines": {
        "node": ">=8"
      },
      "optionalDependencies": {
        "encoding": "^0.1.12"
      }
    },
    "node_modules/minipass-flush": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/minipass-flush/-/minipass-flush-1.0.5.tgz",
      "integrity": "sha512-JmQSYYpPUqX5Jyn1mXaRwOda1uQ8HP5KAT/oDSLCzt1BYRhQU0/hDtsB1ufZfEEzMZ9aAVmsBw8+FWsIXlClWw==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/minipass-pipeline": {
      "version": "1.2.4",
      "resolved": "https://registry.npmjs.org/minipass-pipeline/-/minipass-pipeline-1.2.4.tgz",
      "integrity": "sha512-xuIq7cIOt09RPRJ19gdi4b+RiNvDFYe5JH+ggNvBqGqpQXcru3PcRmOZuHBKWK1Txf9+cQ+HMVN4d6z46LZP7A==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minipass-sized": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/minipass-sized/-/minipass-sized-1.0.3.tgz",
      "integrity": "sha512-MbkQQ2CTiBMlA2Dm/5cY+9SWFEN8pzzOXi6rlM5Xxq0Yqbda5ZQy9sU75a673FE9ZK0Zsbr6Y5iP6u9nktfg2g==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "minipass": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/minizlib": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/minizlib/-/minizlib-2.1.2.tgz",
      "integrity": "sha512-bAxsR8BVfj60DWXHE3u30oHzfl4G7khkSuPW+qvpd7jFRHm7dLxOjUk1EHACJ/hxLY8phGJ0YhYHZo7jil7Qdg==",
      "license": "MIT",
      "dependencies": {
        "minipass": "^3.0.0",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/mitt": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/mitt/-/mitt-3.0.1.tgz",
      "integrity": "sha512-vKivATfr97l2/QBCYAkXYDbrIWPM2IIKEl7YPhjCvKlG3kE2gm+uBo6nEXK3M5/Ffh/FLpKExzOQ3JJoJGFKBw==",
      "license": "MIT"
    },
    "node_modules/mkdirp": {
      "version": "0.5.6",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.6.tgz",
      "integrity": "sha512-FP+p8RB8OWpF3YZBCrP5gtADmtXApB5AMLn+vdyA+PyxCjrCs00mjyUozssO33cwDeT3wNGdLxJ5M//YqtHAJw==",
      "license": "MIT",
      "dependencies": {
        "minimist": "^1.2.6"
      },
      "bin": {
        "mkdirp": "bin/cmd.js"
      }
    },
    "node_modules/mkdirp-classic": {
      "version": "0.5.3",
      "resolved": "https://registry.npmjs.org/mkdirp-classic/-/mkdirp-classic-0.5.3.tgz",
      "integrity": "sha512-gKLcREMhtuZRwRAfqP3RFW+TK4JqApVBtOIftVgjuABpAtpxhPGaDcfvbhNvD0B8iD1oUr/txX35NjcaY6Ns/A==",
      "license": "MIT"
    },
    "node_modules/ms": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.0.0.tgz",
      "integrity": "sha512-Tpp60P6IUJDTuOq/5Z8cdskzJujfwqfOTkrwIwj7IRISpnkJnT6SyJ4PCPnGMoFjC9ddhal5KVIYtAt97ix05A==",
      "license": "MIT"
    },
    "node_modules/multer": {
      "version": "1.4.5-lts.2",
      "resolved": "https://registry.npmjs.org/multer/-/multer-1.4.5-lts.2.tgz",
      "integrity": "sha512-VzGiVigcG9zUAoCNU+xShztrlr1auZOlurXynNvO9GiWD1/mTBbUljOKY+qMeazBqXgRnjzeEgJI/wyjJUHg9A==",
      "deprecated": "Multer 1.x is impacted by a number of vulnerabilities, which have been patched in 2.x. You should upgrade to the latest 2.x version.",
      "license": "MIT",
      "dependencies": {
        "append-field": "^1.0.0",
        "busboy": "^1.0.0",
        "concat-stream": "^1.5.2",
        "mkdirp": "^0.5.4",
        "object-assign": "^4.1.1",
        "type-is": "^1.6.4",
        "xtend": "^4.0.0"
      },
      "engines": {
        "node": ">= 6.0.0"
      }
    },
    "node_modules/mustache": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/mustache/-/mustache-4.2.0.tgz",
      "integrity": "sha512-71ippSywq5Yb7/tVYyGbkBggbU8H3u5Rz56fH60jGFgr8uHwxs+aSKeqmluIVzM0m0kB7xQjKS6qPfd0b2ZoqQ==",
      "license": "MIT",
      "bin": {
        "mustache": "bin/mustache"
      }
    },
    "node_modules/napi-build-utils": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/napi-build-utils/-/napi-build-utils-2.0.0.tgz",
      "integrity": "sha512-GEbrYkbfF7MoNaoh2iGG84Mnf/WZfB0GdGEsM8wz7Expx/LlWf5U8t9nvJKXSp3qr5IsEbK04cBGhol/KwOsWA==",
      "license": "MIT"
    },
    "node_modules/natural-compare": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/natural-compare/-/natural-compare-1.4.0.tgz",
      "integrity": "sha512-OWND8ei3VtNC9h7V60qff3SVobHr996CTwgxubgyQYEpg290h9J0buyECNNJexkFm5sOajh5G116RYA1c8ZMSw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/negotiator": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/negotiator/-/negotiator-0.6.3.tgz",
      "integrity": "sha512-+EUsqGPLsM+j/zdChZjsnX51g4XrHFOIXwfnCVPGlQk/k5giakcKsuxCObBRu6DSm9opw/O6slWbJdghQM4bBg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/netmask": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/netmask/-/netmask-2.0.2.tgz",
      "integrity": "sha512-dBpDMdxv9Irdq66304OLfEmQ9tbNRFnFTuZiLo+bD+r332bBmMJ8GBLXklIXXgxd3+v9+KUnZaUR5PJMa75Gsg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/nice-grpc": {
      "version": "2.1.12",
      "resolved": "https://registry.npmjs.org/nice-grpc/-/nice-grpc-2.1.12.tgz",
      "integrity": "sha512-J1n4Wg+D3IhRhGQb+iqh2OpiM0GzTve/kf2lnlW4S+xczmIEd0aHUDV1OsJ5a3q8GSTqJf+s4Rgg1M8uJltarw==",
      "license": "MIT",
      "dependencies": {
        "@grpc/grpc-js": "^1.13.1",
        "abort-controller-x": "^0.4.0",
        "nice-grpc-common": "^2.0.2"
      }
    },
    "node_modules/nice-grpc-client-middleware-retry": {
      "version": "3.1.11",
      "resolved": "https://registry.npmjs.org/nice-grpc-client-middleware-retry/-/nice-grpc-client-middleware-retry-3.1.11.tgz",
      "integrity": "sha512-xW/imz/kNG2g0DwTfH2eYEGrg1chSLrXtvGp9fg2qkhTgGFfAS/Pq3+t+9G8KThcC4hK/xlEyKvZWKk++33S6A==",
      "license": "MIT",
      "dependencies": {
        "abort-controller-x": "^0.4.0",
        "nice-grpc-common": "^2.0.2"
      }
    },
    "node_modules/nice-grpc-common": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/nice-grpc-common/-/nice-grpc-common-2.0.2.tgz",
      "integrity": "sha512-7RNWbls5kAL1QVUOXvBsv1uO0wPQK3lHv+cY1gwkTzirnG1Nop4cBJZubpgziNbaVc/bl9QJcyvsf/NQxa3rjQ==",
      "license": "MIT",
      "dependencies": {
        "ts-error": "^1.0.6"
      }
    },
    "node_modules/node-abi": {
      "version": "3.75.0",
      "resolved": "https://registry.npmjs.org/node-abi/-/node-abi-3.75.0.tgz",
      "integrity": "sha512-OhYaY5sDsIka7H7AtijtI9jwGYLyl29eQn/W623DiN/MIv5sUqc4g7BIDThX+gb7di9f6xK02nkp8sdfFWZLTg==",
      "license": "MIT",
      "dependencies": {
        "semver": "^7.3.5"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/node-addon-api": {
      "version": "7.1.1",
      "resolved": "https://registry.npmjs.org/node-addon-api/-/node-addon-api-7.1.1.tgz",
      "integrity": "sha512-5m3bsyrjFWE1xf7nz7YXdN4udnVtXK6/Yfgn5qnahL6bCkf2yKt4k3nuTKAtT4r3IG8JNR2ncsIMdZuAzJjHQQ==",
      "license": "MIT"
    },
    "node_modules/node-domexception": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/node-domexception/-/node-domexception-1.0.0.tgz",
      "integrity": "sha512-/jKZoMpw0F8GRwl4/eLROPA3cfcXtLApP0QzLmUT/HuPCZWyB7IY9ZrMeKw2O/nFIqPQB3PVM9aYm0F312AXDQ==",
      "deprecated": "Use your platform's native DOMException instead",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/jimmywarting"
        },
        {
          "type": "github",
          "url": "https://paypal.me/jimmywarting"
        }
      ],
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=10.5.0"
      }
    },
    "node_modules/node-ensure": {
      "version": "0.0.0",
      "resolved": "https://registry.npmjs.org/node-ensure/-/node-ensure-0.0.0.tgz",
      "integrity": "sha512-DRI60hzo2oKN1ma0ckc6nQWlHU69RH6xN0sjQTjMpChPfTYvKZdcQFfdYK2RWbJcKyUizSIy/l8OTGxMAM1QDw==",
      "license": "MIT"
    },
    "node_modules/node-fetch": {
      "version": "2.7.0",
      "resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.7.0.tgz",
      "integrity": "sha512-c4FRfUm/dbcWZ7U+1Wq0AwCyFL+3nt2bEw05wfxSz+DWpWsitgmSgYmy2dQdWyKC1694ELPqMs/YzUSNozLt8A==",
      "license": "MIT",
      "dependencies": {
        "whatwg-url": "^5.0.0"
      },
      "engines": {
        "node": "4.x || >=6.0.0"
      },
      "peerDependencies": {
        "encoding": "^0.1.0"
      },
      "peerDependenciesMeta": {
        "encoding": {
          "optional": true
        }
      }
    },
    "node_modules/node-gyp": {
      "version": "8.4.1",
      "resolved": "https://registry.npmjs.org/node-gyp/-/node-gyp-8.4.1.tgz",
      "integrity": "sha512-olTJRgUtAb/hOXG0E93wZDs5YiJlgbXxTwQAFHyNlRsXQnYzUaF2aGgujZbw+hR8aF4ZG/rST57bWMWD16jr9w==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "env-paths": "^2.2.0",
        "glob": "^7.1.4",
        "graceful-fs": "^4.2.6",
        "make-fetch-happen": "^9.1.0",
        "nopt": "^5.0.0",
        "npmlog": "^6.0.0",
        "rimraf": "^3.0.2",
        "semver": "^7.3.5",
        "tar": "^6.1.2",
        "which": "^2.0.2"
      },
      "bin": {
        "node-gyp": "bin/node-gyp.js"
      },
      "engines": {
        "node": ">= 10.12.0"
      }
    },
    "node_modules/node-int64": {
      "version": "0.4.0",
      "resolved": "https://registry.npmjs.org/node-int64/-/node-int64-0.4.0.tgz",
      "integrity": "sha512-O5lz91xSOeoXP6DulyHfllpq+Eg00MWitZIbtPfoSEvqIHdl5gfcY6hYzDWnj0qD5tz52PI08u9qUvSVeUBeHw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/node-releases": {
      "version": "2.0.19",
      "resolved": "https://registry.npmjs.org/node-releases/-/node-releases-2.0.19.tgz",
      "integrity": "sha512-xxOWJsBKtzAq7DY0J+DTzuz58K8e7sJbdgwkbMWQe8UYB6ekmsQ45q0M/tJDsGaZmbC+l7n57UV8Hl5tHxO9uw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nodemon": {
      "version": "3.1.10",
      "resolved": "https://registry.npmjs.org/nodemon/-/nodemon-3.1.10.tgz",
      "integrity": "sha512-WDjw3pJ0/0jMFmyNDp3gvY2YizjLmmOUQo6DEBY+JgdvW/yQ9mEeSw6H5ythl5Ny2ytb7f9C2nIbjSxMNzbJXw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "chokidar": "^3.5.2",
        "debug": "^4",
        "ignore-by-default": "^1.0.1",
        "minimatch": "^3.1.2",
        "pstree.remy": "^1.1.8",
        "semver": "^7.5.3",
        "simple-update-notifier": "^2.0.0",
        "supports-color": "^5.5.0",
        "touch": "^3.1.0",
        "undefsafe": "^2.0.5"
      },
      "bin": {
        "nodemon": "bin/nodemon.js"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "opencollective",
        "url": "https://opencollective.com/nodemon"
      }
    },
    "node_modules/nodemon/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/nodemon/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/nopt": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/nopt/-/nopt-5.0.0.tgz",
      "integrity": "sha512-Tbj67rffqceeLpcRXrT7vKAN8CwfPeIBgM7E6iBkmKLV7bEMwpGgYLGv0jACUsECaa/vuxP0IjEont6umdMgtQ==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "abbrev": "1"
      },
      "bin": {
        "nopt": "bin/nopt.js"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/normalize-path": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/normalize-path/-/normalize-path-3.0.0.tgz",
      "integrity": "sha512-6eZs5Ls3WtCisHWp9S2GUy8dqkpGi4BVSz3GaqiE6ezub0512ESztXUwUB6C6IKbQkY2Pnb/mD4WYojCRwcwLA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/npm-run-path": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/npm-run-path/-/npm-run-path-4.0.1.tgz",
      "integrity": "sha512-S48WzZW777zhNIrn7gxOlISNAqi9ZC/uQFnRdbeIHhZhCA6UqpkOT8T1G7BvfdgP4Er8gF4sUbaS0i7QvIfCWw==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "path-key": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/npmlog": {
      "version": "6.0.2",
      "resolved": "https://registry.npmjs.org/npmlog/-/npmlog-6.0.2.tgz",
      "integrity": "sha512-/vBvz5Jfr9dT/aFWd0FIRf+T/Q2WBsLENygUaFUqstqsycmZAP/t5BvFJTK0viFmSUxiUKTUplWy5vt+rvKIxg==",
      "deprecated": "This package is no longer supported.",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "are-we-there-yet": "^3.0.0",
        "console-control-strings": "^1.1.0",
        "gauge": "^4.0.3",
        "set-blocking": "^2.0.0"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/nth-check": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/nth-check/-/nth-check-2.1.1.tgz",
      "integrity": "sha512-lqjrjmaOoAnWfMmBPL+XNnynZh2+swxiX3WUE0s4yEHI6m+AwrK2UZOimIRl3X/4QctVqS8AiZjFqyOGrMXb/w==",
      "license": "BSD-2-Clause",
      "dependencies": {
        "boolbase": "^1.0.0"
      },
      "funding": {
        "url": "https://github.com/fb55/nth-check?sponsor=1"
      }
    },
    "node_modules/object-assign": {
      "version": "4.1.1",
      "resolved": "https://registry.npmjs.org/object-assign/-/object-assign-4.1.1.tgz",
      "integrity": "sha512-rJgTQnkUnH1sFw8yT6VSU3zD3sWmu6sZhIseY8VX+GRu3P6F7Fu+JNDoXfklElbLJSnc3FUQHVe4cU5hj+BcUg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/object-inspect": {
      "version": "1.13.4",
      "resolved": "https://registry.npmjs.org/object-inspect/-/object-inspect-1.13.4.tgz",
      "integrity": "sha512-W67iLl4J2EXEGTbfeHCffrjDfitvLANg0UlX3wFUUSTx92KXRFegMHUVgSqE+wvhAbi4WqjGg9czysTV2Epbew==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/on-finished": {
      "version": "2.4.1",
      "resolved": "https://registry.npmjs.org/on-finished/-/on-finished-2.4.1.tgz",
      "integrity": "sha512-oVlzkg3ENAhCk2zdv7IJwd/QUD4z2RxRwpkcGY8psCVcCYZNq4wYnVWALHM+brtuJjePWiYF/ClmuDr8Ch5+kg==",
      "license": "MIT",
      "dependencies": {
        "ee-first": "1.1.1"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/once": {
      "version": "1.4.0",
      "resolved": "https://registry.npmjs.org/once/-/once-1.4.0.tgz",
      "integrity": "sha512-lNaJgI+2Q5URQBkccEKHTQOPaXdUxnZZElQTZY0MFUAuaEqe1E+Nyvgdz/aIyNi6Z9MzO5dv1H8n58/GELp3+w==",
      "license": "ISC",
      "dependencies": {
        "wrappy": "1"
      }
    },
    "node_modules/onetime": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/onetime/-/onetime-5.1.2.tgz",
      "integrity": "sha512-kbpaSSGJTWdAY5KPVeMOKXSrPtr8C8C7wodJbcsd51jRnmD+GZu8Y0VoU6Dm5Z4vWr0Ig/1NKuWRKf7j5aaYSg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "mimic-fn": "^2.1.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/openai": {
      "version": "4.104.0",
      "resolved": "https://registry.npmjs.org/openai/-/openai-4.104.0.tgz",
      "integrity": "sha512-p99EFNsA/yX6UhVO93f5kJsDRLAg+CTA2RBqdHK4RtK8u5IJw32Hyb2dTGKbnnFmnuoBv5r7Z2CURI9sGZpSuA==",
      "license": "Apache-2.0",
      "peer": true,
      "dependencies": {
        "@types/node": "^18.11.18",
        "@types/node-fetch": "^2.6.4",
        "abort-controller": "^3.0.0",
        "agentkeepalive": "^4.2.1",
        "form-data-encoder": "1.7.2",
        "formdata-node": "^4.3.2",
        "node-fetch": "^2.6.7"
      },
      "bin": {
        "openai": "bin/cli"
      },
      "peerDependencies": {
        "ws": "^8.18.0",
        "zod": "^3.23.8"
      },
      "peerDependenciesMeta": {
        "ws": {
          "optional": true
        },
        "zod": {
          "optional": true
        }
      }
    },
    "node_modules/openapi-types": {
      "version": "12.1.3",
      "resolved": "https://registry.npmjs.org/openapi-types/-/openapi-types-12.1.3.tgz",
      "integrity": "sha512-N4YtSYJqghVu4iek2ZUvcN/0aqH1kRDuNqzcycDxhOUpg7GdvLa2F3DgS6yBNhInhv2r/6I0Flkn7CqL8+nIcw==",
      "license": "MIT"
    },
    "node_modules/option": {
      "version": "0.2.4",
      "resolved": "https://registry.npmjs.org/option/-/option-0.2.4.tgz",
      "integrity": "sha512-pkEqbDyl8ou5cpq+VsnQbe/WlEy5qS7xPzMS1U55OCG9KPvwFD46zDbxQIj3egJSFc3D+XhYOPUzz49zQAVy7A==",
      "license": "BSD-2-Clause"
    },
    "node_modules/p-finally": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/p-finally/-/p-finally-1.0.0.tgz",
      "integrity": "sha512-LICb2p9CB7FS+0eR1oqWnHhp0FljGLZCWBE9aix0Uye9W8LTQPwMTYVGWQWIw9RdQiDg4+epXQODwIYJtSJaow==",
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/p-limit": {
      "version": "3.1.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-3.1.0.tgz",
      "integrity": "sha512-TYOanM3wGwNGsZN2cVTYPArw454xnXj5qmWF1bEoAc4+cU/ol7GVh7odevjp1FNHduHc3KZMcFduxU5Xc6uJRQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "yocto-queue": "^0.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-locate": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/p-locate/-/p-locate-4.1.0.tgz",
      "integrity": "sha512-R79ZZ/0wAxKGu3oYMlz8jy/kbhsNrS7SKZ7PxEHBgJ5+F2mtFW2fK2cOtBh1cHYkQsbzFV7I+EoRKe6Yt0oK7A==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-limit": "^2.2.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-locate/node_modules/p-limit": {
      "version": "2.3.0",
      "resolved": "https://registry.npmjs.org/p-limit/-/p-limit-2.3.0.tgz",
      "integrity": "sha512-//88mFWSJx8lxCzwdAABTJL2MyWB12+eIY7MDL2SqLmAkeKU9qxRvWuSyTjm3FUmpBEMuFfckAIqEaVGUDxb6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "p-try": "^2.0.0"
      },
      "engines": {
        "node": ">=6"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-map": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/p-map/-/p-map-4.0.0.tgz",
      "integrity": "sha512-/bjOqmgETBYB5BoEeGVea8dmvHb2m9GLy1E9W43yeyfP6QQCZGFNa+XRceJEuDB6zqr+gKpIAmlLebMpykw/MQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "aggregate-error": "^3.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-queue": {
      "version": "6.6.2",
      "resolved": "https://registry.npmjs.org/p-queue/-/p-queue-6.6.2.tgz",
      "integrity": "sha512-RwFpb72c/BhQLEXIZ5K2e+AhgNVmIejGlTgiB9MzZ0e93GRvqZ7uSi0dvRF7/XIXDeNkra2fNHBxTyPDGySpjQ==",
      "license": "MIT",
      "dependencies": {
        "eventemitter3": "^4.0.4",
        "p-timeout": "^3.2.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/p-retry": {
      "version": "4.6.2",
      "resolved": "https://registry.npmjs.org/p-retry/-/p-retry-4.6.2.tgz",
      "integrity": "sha512-312Id396EbJdvRONlngUx0NydfrIQ5lsYu0znKVUzVvArzEIt08V1qhtyESbGVd1FGX7UKtiFp5uwKZdM8wIuQ==",
      "license": "MIT",
      "dependencies": {
        "@types/retry": "0.12.0",
        "retry": "^0.13.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-retry/node_modules/retry": {
      "version": "0.13.1",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.13.1.tgz",
      "integrity": "sha512-XQBQ3I8W1Cge0Seh+6gjj03LbmRFWuoszgK9ooCpwYIrhhoO80pfq4cUkU5DkknwfOfFteRwlZ56PYOGYyFWdg==",
      "license": "MIT",
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/p-timeout": {
      "version": "3.2.0",
      "resolved": "https://registry.npmjs.org/p-timeout/-/p-timeout-3.2.0.tgz",
      "integrity": "sha512-rhIwUycgwwKcP9yTOOFK/AKsAopjjCakVqLHePO3CC6Mir1Z99xT+R63jZxAT5lFZLa2inS5h+ZS2GvR99/FBg==",
      "license": "MIT",
      "dependencies": {
        "p-finally": "^1.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/p-try": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/p-try/-/p-try-2.2.0.tgz",
      "integrity": "sha512-R4nPAVTAU0B9D35/Gk3uJf/7XYbQcyohSKdvAxIRSNghFl4e71hVoGnBNQz9cWaXxO2I10KTC+3jMdvvoKw6dQ==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/pac-proxy-agent": {
      "version": "7.2.0",
      "resolved": "https://registry.npmjs.org/pac-proxy-agent/-/pac-proxy-agent-7.2.0.tgz",
      "integrity": "sha512-TEB8ESquiLMc0lV8vcd5Ql/JAKAoyzHFXaStwjkzpOpC5Yv+pIzLfHvjTSdf3vpa2bMiUQrg9i6276yn8666aA==",
      "license": "MIT",
      "dependencies": {
        "@tootallnate/quickjs-emscripten": "^0.23.0",
        "agent-base": "^7.1.2",
        "debug": "^4.3.4",
        "get-uri": "^6.0.1",
        "http-proxy-agent": "^7.0.0",
        "https-proxy-agent": "^7.0.6",
        "pac-resolver": "^7.0.1",
        "socks-proxy-agent": "^8.0.5"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/pac-proxy-agent/node_modules/agent-base": {
      "version": "7.1.4",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.4.tgz",
      "integrity": "sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/pac-proxy-agent/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/pac-proxy-agent/node_modules/http-proxy-agent": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz",
      "integrity": "sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/pac-proxy-agent/node_modules/https-proxy-agent": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.2",
        "debug": "4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/pac-proxy-agent/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/pac-proxy-agent/node_modules/socks-proxy-agent": {
      "version": "8.0.5",
      "resolved": "https://registry.npmjs.org/socks-proxy-agent/-/socks-proxy-agent-8.0.5.tgz",
      "integrity": "sha512-HehCEsotFqbPW9sJ8WVYB6UbmIMv7kUUORIF2Nncq4VQvBfNBLibW9YZR5dlYCSUhwcD628pRllm7n+E+YTzJw==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.2",
        "debug": "^4.3.4",
        "socks": "^2.8.3"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/pac-resolver": {
      "version": "7.0.1",
      "resolved": "https://registry.npmjs.org/pac-resolver/-/pac-resolver-7.0.1.tgz",
      "integrity": "sha512-5NPgf87AT2STgwa2ntRMr45jTKrYBGkVU36yT0ig/n/GMAa3oPqhZfIQ2kMEimReg0+t9kZViDVZ83qfVUlckg==",
      "license": "MIT",
      "dependencies": {
        "degenerator": "^5.0.0",
        "netmask": "^2.0.2"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/package-json-from-dist": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/package-json-from-dist/-/package-json-from-dist-1.0.1.tgz",
      "integrity": "sha512-UEZIS3/by4OC8vL3P2dTXRETpebLI2NiI5vIrjaD/5UtrkFX/tNbwjTSRAGC/+7CAo2pIcBaRgWmcBBHcsaCIw==",
      "license": "BlueOak-1.0.0"
    },
    "node_modules/pako": {
      "version": "1.0.11",
      "resolved": "https://registry.npmjs.org/pako/-/pako-1.0.11.tgz",
      "integrity": "sha512-4hLB8Py4zZce5s4yd9XzopqwVv/yGNhV1Bl8NTmCq1763HeK2+EwVTv+leGeL13Dnh2wfbqowVPXCIO0z4taYw==",
      "license": "(MIT AND Zlib)"
    },
    "node_modules/parent-module": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/parent-module/-/parent-module-1.0.1.tgz",
      "integrity": "sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==",
      "license": "MIT",
      "dependencies": {
        "callsites": "^3.0.0"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/parse-json": {
      "version": "5.2.0",
      "resolved": "https://registry.npmjs.org/parse-json/-/parse-json-5.2.0.tgz",
      "integrity": "sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==",
      "license": "MIT",
      "dependencies": {
        "@babel/code-frame": "^7.0.0",
        "error-ex": "^1.3.1",
        "json-parse-even-better-errors": "^2.3.0",
        "lines-and-columns": "^1.1.6"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/parse5": {
      "version": "7.3.0",
      "resolved": "https://registry.npmjs.org/parse5/-/parse5-7.3.0.tgz",
      "integrity": "sha512-IInvU7fabl34qmi9gY8XOVxhYyMyuH2xUNpb2q8/Y+7552KlejkRvqvD19nMoUW/uQGGbqNpA6Tufu5FL5BZgw==",
      "license": "MIT",
      "dependencies": {
        "entities": "^6.0.0"
      },
      "funding": {
        "url": "https://github.com/inikulin/parse5?sponsor=1"
      }
    },
    "node_modules/parse5-htmlparser2-tree-adapter": {
      "version": "7.1.0",
      "resolved": "https://registry.npmjs.org/parse5-htmlparser2-tree-adapter/-/parse5-htmlparser2-tree-adapter-7.1.0.tgz",
      "integrity": "sha512-ruw5xyKs6lrpo9x9rCZqZZnIUntICjQAd0Wsmp396Ul9lN/h+ifgVV1x1gZHi8euej6wTfpqX8j+BFQxF0NS/g==",
      "license": "MIT",
      "dependencies": {
        "domhandler": "^5.0.3",
        "parse5": "^7.0.0"
      },
      "funding": {
        "url": "https://github.com/inikulin/parse5?sponsor=1"
      }
    },
    "node_modules/parse5-parser-stream": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/parse5-parser-stream/-/parse5-parser-stream-7.1.2.tgz",
      "integrity": "sha512-JyeQc9iwFLn5TbvvqACIF/VXG6abODeB3Fwmv/TGdLk2LfbWkaySGY72at4+Ty7EkPZj854u4CrICqNk2qIbow==",
      "license": "MIT",
      "dependencies": {
        "parse5": "^7.0.0"
      },
      "funding": {
        "url": "https://github.com/inikulin/parse5?sponsor=1"
      }
    },
    "node_modules/parse5/node_modules/entities": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/entities/-/entities-6.0.1.tgz",
      "integrity": "sha512-aN97NXWF6AWBTahfVOIrB/NShkzi5H7F9r1s9mD3cDj4Ko5f2qhhVoYMibXF7GlLveb/D2ioWay8lxI97Ven3g==",
      "license": "BSD-2-Clause",
      "engines": {
        "node": ">=0.12"
      },
      "funding": {
        "url": "https://github.com/fb55/entities?sponsor=1"
      }
    },
    "node_modules/parseurl": {
      "version": "1.3.3",
      "resolved": "https://registry.npmjs.org/parseurl/-/parseurl-1.3.3.tgz",
      "integrity": "sha512-CiyeOxFT/JZyN5m0z9PfXw4SCBJ6Sygz1Dpl0wqjlhDEGGBP1GnsUVEL0p63hoG1fcj3fHynXi9NYO4nWOL+qQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/path-exists": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/path-exists/-/path-exists-4.0.0.tgz",
      "integrity": "sha512-ak9Qy5Q7jYb2Wwcey5Fpvg2KoAc/ZIhLSLOSBmRmygPsGwkVVt0fZa0qrtMz+m6tJTAHfZQ8FnmB4MG4LWy7/w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-is-absolute": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/path-is-absolute/-/path-is-absolute-1.0.1.tgz",
      "integrity": "sha512-AVbw3UJ2e9bq64vSaS9Am0fje1Pa8pbGqTTsmXfaIiMpnr5DlDhfJOuLj9Sf95ZPVDAUerDfEk88MPmPe7UCQg==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/path-key": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/path-key/-/path-key-3.1.1.tgz",
      "integrity": "sha512-ojmeN0qd+y0jszEtoY48r0Peq5dwMEkIlCOu6Q5f41lfkswXuKtYrhgoTpLnyIcHm24Uhqx+5Tqm2InSwLhE6Q==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/path-parse": {
      "version": "1.0.7",
      "resolved": "https://registry.npmjs.org/path-parse/-/path-parse-1.0.7.tgz",
      "integrity": "sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/path-scurry": {
      "version": "1.11.1",
      "resolved": "https://registry.npmjs.org/path-scurry/-/path-scurry-1.11.1.tgz",
      "integrity": "sha512-Xa4Nw17FS9ApQFJ9umLiJS4orGjm7ZzwUrwamcGQuHSzDyth9boKDaycYdDcZDuqYATXw4HFXgaqWTctW/v1HA==",
      "license": "BlueOak-1.0.0",
      "dependencies": {
        "lru-cache": "^10.2.0",
        "minipass": "^5.0.0 || ^6.0.2 || ^7.0.0"
      },
      "engines": {
        "node": ">=16 || 14 >=14.18"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/path-scurry/node_modules/lru-cache": {
      "version": "10.4.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-10.4.3.tgz",
      "integrity": "sha512-JNAzZcXrCt42VGLuYz0zfAzDfAvJWW6AfYlDBQyDV5DClI2m5sAmK+OIO7s59XfsRsWHp02jAJrRadPRGTt6SQ==",
      "license": "ISC"
    },
    "node_modules/path-scurry/node_modules/minipass": {
      "version": "7.1.2",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-7.1.2.tgz",
      "integrity": "sha512-qOOzS1cBTWYF4BH8fVePDBOO9iptMnGUEZwNc/cMWnTV2nVLZ7VoNWEPHkYczZA0pdoA7dl6e7FL659nX9S2aw==",
      "license": "ISC",
      "engines": {
        "node": ">=16 || 14 >=14.17"
      }
    },
    "node_modules/path-to-regexp": {
      "version": "0.1.12",
      "resolved": "https://registry.npmjs.org/path-to-regexp/-/path-to-regexp-0.1.12.tgz",
      "integrity": "sha512-RA1GjUVMnvYFxuqovrEqZoxxW5NUZqbwKtYz/Tt7nXerk0LbLblQmrsgdeOxV5SFHf0UDggjS/bSeOZwt1pmEQ==",
      "license": "MIT"
    },
    "node_modules/pdf-parse": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/pdf-parse/-/pdf-parse-1.1.1.tgz",
      "integrity": "sha512-v6ZJ/efsBpGrGGknjtq9J/oC8tZWq0KWL5vQrk2GlzLEQPUDB1ex+13Rmidl1neNN358Jn9EHZw5y07FFtaC7A==",
      "license": "MIT",
      "dependencies": {
        "debug": "^3.1.0",
        "node-ensure": "^0.0.0"
      },
      "engines": {
        "node": ">=6.8.1"
      }
    },
    "node_modules/pdf-parse/node_modules/debug": {
      "version": "3.2.7",
      "resolved": "https://registry.npmjs.org/debug/-/debug-3.2.7.tgz",
      "integrity": "sha512-CFjzYYAi4ThfiQvizrFQevTTXHtnCqWfe7x1AhgEscTz6ZbLbfoLRLPugTQyBth6f8ZERVUSyWHFD/7Wu4t1XQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.1"
      }
    },
    "node_modules/pdf-parse/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/peek-readable": {
      "version": "4.1.0",
      "resolved": "https://registry.npmjs.org/peek-readable/-/peek-readable-4.1.0.tgz",
      "integrity": "sha512-ZI3LnwUv5nOGbQzD9c2iDG6toheuXSZP5esSHBjopsXH4dg19soufvpUGA3uohi5anFtGb2lhAVdHzH6R/Evvg==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/Borewit"
      }
    },
    "node_modules/pend": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/pend/-/pend-1.2.0.tgz",
      "integrity": "sha512-F3asv42UuXchdzt+xXqfW1OGlVBe+mxa2mqI0pg5yAHZPvFmY3Y6drSf/GQ1A86WgWEN9Kzh/WrgKa6iGcHXLg==",
      "license": "MIT"
    },
    "node_modules/picocolors": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/picocolors/-/picocolors-1.1.1.tgz",
      "integrity": "sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==",
      "license": "ISC"
    },
    "node_modules/picomatch": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/picomatch/-/picomatch-2.3.1.tgz",
      "integrity": "sha512-JU3teHTNjmE2VCGFzuY8EXzCDVwEqB2a8fsIvwaStHhAWJEeVd1o1QD80CU6+ZdEXXSLbSsuLwJjkCBWqRQUVA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/jonschlinkert"
      }
    },
    "node_modules/pirates": {
      "version": "4.0.7",
      "resolved": "https://registry.npmjs.org/pirates/-/pirates-4.0.7.tgz",
      "integrity": "sha512-TfySrs/5nm8fQJDcBDuUng3VOUKsd7S+zqvbOTiGXHfxX4wK31ard+hoNuvkicM/2YFzlpDgABOevKSsB4G/FA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/pkg-dir": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/pkg-dir/-/pkg-dir-4.2.0.tgz",
      "integrity": "sha512-HRDzbaKjC+AOWVXxAU/x54COGeIv9eb+6CkDSQoNTt4XyWoIJvuPsXizxu/Fr23EiekbtZwmh1IcIG/l/a10GQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "find-up": "^4.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/playwright": {
      "version": "1.54.1",
      "resolved": "https://registry.npmjs.org/playwright/-/playwright-1.54.1.tgz",
      "integrity": "sha512-peWpSwIBmSLi6aW2auvrUtf2DqY16YYcCMO8rTVx486jKmDTJg7UAhyrraP98GB8BoPURZP8+nxO7TSd4cPr5g==",
      "license": "Apache-2.0",
      "peer": true,
      "dependencies": {
        "playwright-core": "1.54.1"
      },
      "bin": {
        "playwright": "cli.js"
      },
      "engines": {
        "node": ">=18"
      },
      "optionalDependencies": {
        "fsevents": "2.3.2"
      }
    },
    "node_modules/playwright-core": {
      "version": "1.54.1",
      "resolved": "https://registry.npmjs.org/playwright-core/-/playwright-core-1.54.1.tgz",
      "integrity": "sha512-Nbjs2zjj0htNhzgiy5wu+3w09YetDx5pkrpI/kZotDlDUaYk0HVA5xrBVPdow4SAUIlhgKcJeJg4GRKW6xHusA==",
      "license": "Apache-2.0",
      "peer": true,
      "bin": {
        "playwright-core": "cli.js"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/playwright/node_modules/fsevents": {
      "version": "2.3.2",
      "resolved": "https://registry.npmjs.org/fsevents/-/fsevents-2.3.2.tgz",
      "integrity": "sha512-xiqMQR4xAeHTuB9uWm+fFRcIOgKBMiOBP+eXiyT7jsgVCq1bkVygt00oASowB7EdtpOHaaPgKt812P9ab+DDKA==",
      "hasInstallScript": true,
      "license": "MIT",
      "optional": true,
      "os": [
        "darwin"
      ],
      "peer": true,
      "engines": {
        "node": "^8.16.0 || ^10.6.0 || >=11.0.0"
      }
    },
    "node_modules/prebuild-install": {
      "version": "7.1.3",
      "resolved": "https://registry.npmjs.org/prebuild-install/-/prebuild-install-7.1.3.tgz",
      "integrity": "sha512-8Mf2cbV7x1cXPUILADGI3wuhfqWvtiLA1iclTDbFRZkgRQS0NqsPZphna9V+HyTEadheuPmjaJMsbzKQFOzLug==",
      "license": "MIT",
      "dependencies": {
        "detect-libc": "^2.0.0",
        "expand-template": "^2.0.3",
        "github-from-package": "0.0.0",
        "minimist": "^1.2.3",
        "mkdirp-classic": "^0.5.3",
        "napi-build-utils": "^2.0.0",
        "node-abi": "^3.3.0",
        "pump": "^3.0.0",
        "rc": "^1.2.7",
        "simple-get": "^4.0.0",
        "tar-fs": "^2.0.0",
        "tunnel-agent": "^0.6.0"
      },
      "bin": {
        "prebuild-install": "bin.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/pretty-format": {
      "version": "29.7.0",
      "resolved": "https://registry.npmjs.org/pretty-format/-/pretty-format-29.7.0.tgz",
      "integrity": "sha512-Pdlw/oPxN+aXdmM9R00JVC9WVFoCLTKJvDVLgmJ+qAffBMxsV85l/Lu7sNx4zSzPyoL2euImuEwHhOXdEgNFZQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "@jest/schemas": "^29.6.3",
        "ansi-styles": "^5.0.0",
        "react-is": "^18.0.0"
      },
      "engines": {
        "node": "^14.15.0 || ^16.10.0 || >=18.0.0"
      }
    },
    "node_modules/process": {
      "version": "0.11.10",
      "resolved": "https://registry.npmjs.org/process/-/process-0.11.10.tgz",
      "integrity": "sha512-cdGef/drWFoydD1JsMzuFf8100nZl+GT+yacc2bEced5f9Rjk4z+WtFUTBu9PhOi9j/jfmBPu0mMEY4wIdAF8A==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6.0"
      }
    },
    "node_modules/process-nextick-args": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/process-nextick-args/-/process-nextick-args-2.0.1.tgz",
      "integrity": "sha512-3ouUOpQhtgrbOa17J7+uxOTpITYWaGP7/AhoR3+A+/1e9skrzelGi/dXzEYyvbxubEF6Wn2ypscTKiKJFFn1ag==",
      "license": "MIT"
    },
    "node_modules/progress": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/progress/-/progress-2.0.3.tgz",
      "integrity": "sha512-7PiHtLll5LdnKIMw100I+8xJXR5gW2QwWYkT6iJva0bXitZKa/XMrSbdmg3r2Xnaidz9Qumd0VPaMrZlF9V9sA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4.0"
      }
    },
    "node_modules/promise-inflight": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/promise-inflight/-/promise-inflight-1.0.1.tgz",
      "integrity": "sha512-6zWPyEOFaQBJYcGMHBKTKJ3u6TBsnMFOIZSa6ce1e/ZrrsOlnHRHbabMjLiBYKp+n44X9eUI6VUPaukCXHuG4g==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/promise-retry": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/promise-retry/-/promise-retry-2.0.1.tgz",
      "integrity": "sha512-y+WKFlBR8BGXnsNlIHFGPZmyDf3DFMoLhaflAnyZgV6rG6xu+JwesTo2Q9R6XwYmtmwAFCkAk3e35jEdoeh/3g==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "err-code": "^2.0.2",
        "retry": "^0.12.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/prompts": {
      "version": "2.4.2",
      "resolved": "https://registry.npmjs.org/prompts/-/prompts-2.4.2.tgz",
      "integrity": "sha512-NxNv/kLguCA7p3jE8oL2aEBsrJWgAakBpgmgK6lpPWV+WuOmY6r2/zbAVnP+T8bQlA0nzHXSJSJW0Hq7ylaD2Q==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "kleur": "^3.0.3",
        "sisteransi": "^1.0.5"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/protobufjs": {
      "version": "7.5.3",
      "resolved": "https://registry.npmjs.org/protobufjs/-/protobufjs-7.5.3.tgz",
      "integrity": "sha512-sildjKwVqOI2kmFDiXQ6aEB0fjYTafpEvIBs8tOR8qI4spuL9OPROLVu2qZqi/xgCfsHIwVqlaF8JBjWFHnKbw==",
      "hasInstallScript": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "@protobufjs/aspromise": "^1.1.2",
        "@protobufjs/base64": "^1.1.2",
        "@protobufjs/codegen": "^2.0.4",
        "@protobufjs/eventemitter": "^1.1.0",
        "@protobufjs/fetch": "^1.1.0",
        "@protobufjs/float": "^1.0.2",
        "@protobufjs/inquire": "^1.1.0",
        "@protobufjs/path": "^1.1.2",
        "@protobufjs/pool": "^1.1.0",
        "@protobufjs/utf8": "^1.1.0",
        "@types/node": ">=13.7.0",
        "long": "^5.0.0"
      },
      "engines": {
        "node": ">=12.0.0"
      }
    },
    "node_modules/proxy-addr": {
      "version": "2.0.7",
      "resolved": "https://registry.npmjs.org/proxy-addr/-/proxy-addr-2.0.7.tgz",
      "integrity": "sha512-llQsMLSUDUPT44jdrU/O37qlnifitDP+ZwrmmZcoSKyLKvtZxpyV0n2/bD/N4tBAAZ/gJEdZU7KMraoK1+XYAg==",
      "license": "MIT",
      "dependencies": {
        "forwarded": "0.2.0",
        "ipaddr.js": "1.9.1"
      },
      "engines": {
        "node": ">= 0.10"
      }
    },
    "node_modules/proxy-agent": {
      "version": "6.5.0",
      "resolved": "https://registry.npmjs.org/proxy-agent/-/proxy-agent-6.5.0.tgz",
      "integrity": "sha512-TmatMXdr2KlRiA2CyDu8GqR8EjahTG3aY3nXjdzFyoZbmB8hrBsTyMezhULIXKnC0jpfjlmiZ3+EaCzoInSu/A==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.2",
        "debug": "^4.3.4",
        "http-proxy-agent": "^7.0.1",
        "https-proxy-agent": "^7.0.6",
        "lru-cache": "^7.14.1",
        "pac-proxy-agent": "^7.1.0",
        "proxy-from-env": "^1.1.0",
        "socks-proxy-agent": "^8.0.5"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/proxy-agent/node_modules/agent-base": {
      "version": "7.1.4",
      "resolved": "https://registry.npmjs.org/agent-base/-/agent-base-7.1.4.tgz",
      "integrity": "sha512-MnA+YT8fwfJPgBx3m60MNqakm30XOkyIoH1y6huTQvC0PwZG7ki8NacLBcrPbNoo8vEZy7Jpuk7+jMO+CUovTQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/proxy-agent/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/proxy-agent/node_modules/http-proxy-agent": {
      "version": "7.0.2",
      "resolved": "https://registry.npmjs.org/http-proxy-agent/-/http-proxy-agent-7.0.2.tgz",
      "integrity": "sha512-T1gkAiYYDWYx3V5Bmyu7HcfcvL7mUrTWiM6yOfa3PIphViJ/gFPbvidQ+veqSOHci/PxBcDabeUNCzpOODJZig==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.0",
        "debug": "^4.3.4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/proxy-agent/node_modules/https-proxy-agent": {
      "version": "7.0.6",
      "resolved": "https://registry.npmjs.org/https-proxy-agent/-/https-proxy-agent-7.0.6.tgz",
      "integrity": "sha512-vK9P5/iUfdl95AI+JVyUuIcVtd4ofvtrOr3HNtM2yxC9bnMbEdp3x01OhQNnjb8IJYi38VlTE3mBXwcfvywuSw==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.2",
        "debug": "4"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/proxy-agent/node_modules/lru-cache": {
      "version": "7.18.3",
      "resolved": "https://registry.npmjs.org/lru-cache/-/lru-cache-7.18.3.tgz",
      "integrity": "sha512-jumlc0BIUrS3qJGgIkWZsyfAM7NCWiBcCDhnd+3NNM5KbBmLTgHVfWBcg6W+rLUsIpzpERPsvwUP7CckAQSOoA==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/proxy-agent/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/proxy-agent/node_modules/socks-proxy-agent": {
      "version": "8.0.5",
      "resolved": "https://registry.npmjs.org/socks-proxy-agent/-/socks-proxy-agent-8.0.5.tgz",
      "integrity": "sha512-HehCEsotFqbPW9sJ8WVYB6UbmIMv7kUUORIF2Nncq4VQvBfNBLibW9YZR5dlYCSUhwcD628pRllm7n+E+YTzJw==",
      "license": "MIT",
      "dependencies": {
        "agent-base": "^7.1.2",
        "debug": "^4.3.4",
        "socks": "^2.8.3"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/proxy-from-env": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/proxy-from-env/-/proxy-from-env-1.1.0.tgz",
      "integrity": "sha512-D+zkORCbA9f1tdWRK0RaCR3GPv50cMxcrz4X8k5LTSUD1Dkw47mKJEZQNunItRTkWwgtaUSo1RVFRIG9ZXiFYg==",
      "license": "MIT"
    },
    "node_modules/psl": {
      "version": "1.15.0",
      "resolved": "https://registry.npmjs.org/psl/-/psl-1.15.0.tgz",
      "integrity": "sha512-JZd3gMVBAVQkSs6HdNZo9Sdo0LNcQeMNP3CozBJb3JYC/QUYZTnKxP+f8oWRX4rHP5EurWxqAHTSwUCjlNKa1w==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "punycode": "^2.3.1"
      },
      "funding": {
        "url": "https://github.com/sponsors/lupomontero"
      }
    },
    "node_modules/pstree.remy": {
      "version": "1.1.8",
      "resolved": "https://registry.npmjs.org/pstree.remy/-/pstree.remy-1.1.8.tgz",
      "integrity": "sha512-77DZwxQmxKnu3aR542U+X8FypNzbfJ+C5XQDk3uWjWxn6151aIMGthWYRXTqT1E5oJvg+ljaa2OJi+VfvCOQ8w==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/pump": {
      "version": "3.0.3",
      "resolved": "https://registry.npmjs.org/pump/-/pump-3.0.3.tgz",
      "integrity": "sha512-todwxLMY7/heScKmntwQG8CXVkWUOdYxIvY2s0VWAAMh/nd8SoYiRaKjlr7+iCs984f2P8zvrfWcDDYVb73NfA==",
      "license": "MIT",
      "dependencies": {
        "end-of-stream": "^1.1.0",
        "once": "^1.3.1"
      }
    },
    "node_modules/punycode": {
      "version": "2.3.1",
      "resolved": "https://registry.npmjs.org/punycode/-/punycode-2.3.1.tgz",
      "integrity": "sha512-vYt7UD1U9Wg6138shLtLOvdAu+8DsC/ilFtEVHcH+wydcSpNE20AfSOduf6MkRFahL5FY7X1oU7nKVZFtfq8Fg==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/puppeteer": {
      "version": "24.15.0",
      "resolved": "https://registry.npmjs.org/puppeteer/-/puppeteer-24.15.0.tgz",
      "integrity": "sha512-HPSOTw+DFsU/5s2TUUWEum9WjFbyjmvFDuGHtj2X4YUz2AzOzvKMkT3+A3FR+E+ZefiX/h3kyLyXzWJWx/eMLQ==",
      "hasInstallScript": true,
      "license": "Apache-2.0",
      "dependencies": {
        "@puppeteer/browsers": "2.10.6",
        "chromium-bidi": "7.2.0",
        "cosmiconfig": "^9.0.0",
        "devtools-protocol": "0.0.1464554",
        "puppeteer-core": "24.15.0",
        "typed-query-selector": "^2.12.0"
      },
      "bin": {
        "puppeteer": "lib/cjs/puppeteer/node/cli.js"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/puppeteer-core": {
      "version": "24.15.0",
      "resolved": "https://registry.npmjs.org/puppeteer-core/-/puppeteer-core-24.15.0.tgz",
      "integrity": "sha512-2iy0iBeWbNyhgiCGd/wvGrDSo73emNFjSxYOcyAqYiagkYt5q4cPfVXaVDKBsukgc2fIIfLAalBZlaxldxdDYg==",
      "license": "Apache-2.0",
      "dependencies": {
        "@puppeteer/browsers": "2.10.6",
        "chromium-bidi": "7.2.0",
        "debug": "^4.4.1",
        "devtools-protocol": "0.0.1464554",
        "typed-query-selector": "^2.12.0",
        "ws": "^8.18.3"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/puppeteer-core/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/puppeteer-core/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/pure-rand": {
      "version": "6.1.0",
      "resolved": "https://registry.npmjs.org/pure-rand/-/pure-rand-6.1.0.tgz",
      "integrity": "sha512-bVWawvoZoBYpp6yIoQtQXHZjmz35RSVHnUOTefl8Vcjr8snTPY1wnpSPMWekcFwbxI6gtmT7rSYPFvz71ldiOA==",
      "dev": true,
      "funding": [
        {
          "type": "individual",
          "url": "https://github.com/sponsors/dubzzz"
        },
        {
          "type": "opencollective",
          "url": "https://opencollective.com/fast-check"
        }
      ],
      "license": "MIT"
    },
    "node_modules/qs": {
      "version": "6.13.0",
      "resolved": "https://registry.npmjs.org/qs/-/qs-6.13.0.tgz",
      "integrity": "sha512-+38qI9SOr8tfZ4QmJNplMUxqjbe7LKvvZgWdExBOmd+egZTtjLB67Gu0HRX3u/XOq7UU2Nx6nsjvS16Z9uwfpg==",
      "license": "BSD-3-Clause",
      "dependencies": {
        "side-channel": "^1.0.6"
      },
      "engines": {
        "node": ">=0.6"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/querystringify": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/querystringify/-/querystringify-2.2.0.tgz",
      "integrity": "sha512-FIqgj2EUvTa7R50u0rGsyTftzjYmv/a3hO345bZNrqabNqjtgiDMgmo4mkUjd+nzU5oF3dClKqFIPUKybUyqoQ==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/range-parser": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/range-parser/-/range-parser-1.2.1.tgz",
      "integrity": "sha512-Hrgsx+orqoygnmhFbKaHE6c296J+HTAQXoxEF6gNupROmmGJRoyzfG3ccAveqCBrwr/2yxQ5BVd/GTl5agOwSg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/raw-body": {
      "version": "2.5.2",
      "resolved": "https://registry.npmjs.org/raw-body/-/raw-body-2.5.2.tgz",
      "integrity": "sha512-8zGqypfENjCIqGhgXToC8aB2r7YrBX+AQAfIPs/Mlk+BtPTztOvTS01NRW/3Eh60J+a48lt8qsCzirQ6loCVfA==",
      "license": "MIT",
      "dependencies": {
        "bytes": "3.1.2",
        "http-errors": "2.0.0",
        "iconv-lite": "0.4.24",
        "unpipe": "1.0.0"
      },
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/rc": {
      "version": "1.2.8",
      "resolved": "https://registry.npmjs.org/rc/-/rc-1.2.8.tgz",
      "integrity": "sha512-y3bGgqKj3QBdxLbLkomlohkvsA8gdAiUQlSBJnBhfn+BPxg4bc62d8TcBW15wavDfgexCgccckhcZvywyQYPOw==",
      "license": "(BSD-2-Clause OR MIT OR Apache-2.0)",
      "dependencies": {
        "deep-extend": "^0.6.0",
        "ini": "~1.3.0",
        "minimist": "^1.2.0",
        "strip-json-comments": "~2.0.1"
      },
      "bin": {
        "rc": "cli.js"
      }
    },
    "node_modules/react-is": {
      "version": "18.3.1",
      "resolved": "https://registry.npmjs.org/react-is/-/react-is-18.3.1.tgz",
      "integrity": "sha512-/LLMVyas0ljjAtoYiPqYiL8VWXzUUdThrmU5+n20DZv+a+ClRoevUzw5JxU+Ieh5/c87ytoTBV9G1FiKfNJdmg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/readable-stream": {
      "version": "2.3.8",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-2.3.8.tgz",
      "integrity": "sha512-8p0AUk4XODgIewSi0l8Epjs+EVnWiK7NoDIEGU0HhE7+ZyY8D1IMY7odu5lRrFXGg71L15KG8QrPmum45RTtdA==",
      "license": "MIT",
      "dependencies": {
        "core-util-is": "~1.0.0",
        "inherits": "~2.0.3",
        "isarray": "~1.0.0",
        "process-nextick-args": "~2.0.0",
        "safe-buffer": "~5.1.1",
        "string_decoder": "~1.1.1",
        "util-deprecate": "~1.0.1"
      }
    },
    "node_modules/readable-stream/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/readable-web-to-node-stream": {
      "version": "3.0.4",
      "resolved": "https://registry.npmjs.org/readable-web-to-node-stream/-/readable-web-to-node-stream-3.0.4.tgz",
      "integrity": "sha512-9nX56alTf5bwXQ3ZDipHJhusu9NTQJ/CVPtb/XHAJCXihZeitfJvIRS4GqQ/mfIoOE3IelHMrpayVrosdHBuLw==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "readable-stream": "^4.7.0"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/Borewit"
      }
    },
    "node_modules/readable-web-to-node-stream/node_modules/buffer": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.2.1"
      }
    },
    "node_modules/readable-web-to-node-stream/node_modules/readable-stream": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-4.7.0.tgz",
      "integrity": "sha512-oIGGmcpTLwPga8Bn6/Z75SVaH1z5dUut2ibSyAMVhmUggWpmDn2dapB0n7f8nwaSiRtepAsfJyfXIO5DCVAODg==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "abort-controller": "^3.0.0",
        "buffer": "^6.0.3",
        "events": "^3.3.0",
        "process": "^0.11.10",
        "string_decoder": "^1.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/readable-web-to-node-stream/node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/readdir-glob": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/readdir-glob/-/readdir-glob-1.1.3.tgz",
      "integrity": "sha512-v05I2k7xN8zXvPD9N+z/uhXPaj0sUFCe2rcWZIpBsqxfP7xXFQ0tipAd/wjj1YxWyWtUS5IDJpOG82JKt2EAVA==",
      "license": "Apache-2.0",
      "dependencies": {
        "minimatch": "^5.1.0"
      }
    },
    "node_modules/readdir-glob/node_modules/brace-expansion": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/brace-expansion/-/brace-expansion-2.0.2.tgz",
      "integrity": "sha512-Jt0vHyM+jmUBqojB7E1NIYadt0vI0Qxjxd2TErW94wDz+E2LAm5vKMXXwg6ZZBTHPuUlDgQHKXvjGBdfcF1ZDQ==",
      "license": "MIT",
      "dependencies": {
        "balanced-match": "^1.0.0"
      }
    },
    "node_modules/readdir-glob/node_modules/minimatch": {
      "version": "5.1.6",
      "resolved": "https://registry.npmjs.org/minimatch/-/minimatch-5.1.6.tgz",
      "integrity": "sha512-lKwV/1brpG6mBUFHtb7NUmtABCb2WZZmm2wNiOA5hAb8VdCS4B3dtMWyvcoViccwAW/COERjXLt0zP1zXUN26g==",
      "license": "ISC",
      "dependencies": {
        "brace-expansion": "^2.0.1"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/readdirp": {
      "version": "3.6.0",
      "resolved": "https://registry.npmjs.org/readdirp/-/readdirp-3.6.0.tgz",
      "integrity": "sha512-hOS089on8RduqdbhvQ5Z37A0ESjsqz6qnRcffsMU3495FuTdqSm+7bhJ29JvIOsBDEEnan5DPu9t3To9VRlMzA==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "picomatch": "^2.2.1"
      },
      "engines": {
        "node": ">=8.10.0"
      }
    },
    "node_modules/require-directory": {
      "version": "2.1.1",
      "resolved": "https://registry.npmjs.org/require-directory/-/require-directory-2.1.1.tgz",
      "integrity": "sha512-fGxEI7+wsG9xrvdjsrlmL22OMTTiHRwAMroiEeMgq8gzoLC/PQr7RsRDSTLUg/bZAZtF+TVIkHc6/4RIKrui+Q==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/requires-port": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/requires-port/-/requires-port-1.0.0.tgz",
      "integrity": "sha512-KigOCHcocU3XODJxsu8i/j8T9tzT4adHiecwORRQ0ZZFcp7ahwXuRU1m+yuO90C5ZUyGeGfocHDI14M3L3yDAQ==",
      "license": "MIT",
      "peer": true
    },
    "node_modules/resolve": {
      "version": "1.22.10",
      "resolved": "https://registry.npmjs.org/resolve/-/resolve-1.22.10.tgz",
      "integrity": "sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-core-module": "^2.16.0",
        "path-parse": "^1.0.7",
        "supports-preserve-symlinks-flag": "^1.0.0"
      },
      "bin": {
        "resolve": "bin/resolve"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/resolve-cwd": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/resolve-cwd/-/resolve-cwd-3.0.0.tgz",
      "integrity": "sha512-OrZaX2Mb+rJCpH/6CpSqt9xFVpN++x01XnN2ie9g6P5/3xelLAkXWVADpdz1IHD/KFfEXyE6V0U01OQ3UO2rEg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "resolve-from": "^5.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve-from": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/resolve-from/-/resolve-from-5.0.0.tgz",
      "integrity": "sha512-qYg9KP24dD5qka9J47d0aVky0N+b4fTU89LN9iDnjB5waksiC49rvMB0PrUJQGoTmH50XPiqOvAjDfaijGxYZw==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/resolve.exports": {
      "version": "2.0.3",
      "resolved": "https://registry.npmjs.org/resolve.exports/-/resolve.exports-2.0.3.tgz",
      "integrity": "sha512-OcXjMsGdhL4XnbShKpAcSqPMzQoYkYyhbEaeSko47MjRP9NfEQMhZkXL1DoFlt9LWQn4YttrdnV6X2OiyzBi+A==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/retry": {
      "version": "0.12.0",
      "resolved": "https://registry.npmjs.org/retry/-/retry-0.12.0.tgz",
      "integrity": "sha512-9LkiTwjUh6rT555DtE9rTX+BKByPfrMzEAtnlEtdEwr3Nkffwiihqe2bWADg+OQRjt9gl6ICdmB/ZFDCGAtSow==",
      "license": "MIT",
      "optional": true,
      "engines": {
        "node": ">= 4"
      }
    },
    "node_modules/retry-axios": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/retry-axios/-/retry-axios-2.6.0.tgz",
      "integrity": "sha512-pOLi+Gdll3JekwuFjXO3fTq+L9lzMQGcSq7M5gIjExcl3Gu1hd4XXuf5o3+LuSBsaULQH7DiNbsqPd1chVpQGQ==",
      "license": "Apache-2.0",
      "peer": true,
      "engines": {
        "node": ">=10.7.0"
      },
      "peerDependencies": {
        "axios": "*"
      }
    },
    "node_modules/rimraf": {
      "version": "3.0.2",
      "resolved": "https://registry.npmjs.org/rimraf/-/rimraf-3.0.2.tgz",
      "integrity": "sha512-JZkJMZkAGFFPP2YqXZXPbMlMBgsxzE8ILs4lMIX/2o0L9UBw9O/Y3o6wFw/i9YLapcUJWwqbi3kdxIPdC62TIA==",
      "deprecated": "Rimraf versions prior to v4 are no longer supported",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "glob": "^7.1.3"
      },
      "bin": {
        "rimraf": "bin.js"
      },
      "funding": {
        "url": "https://github.com/sponsors/isaacs"
      }
    },
    "node_modules/safe-buffer": {
      "version": "5.2.1",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.2.1.tgz",
      "integrity": "sha512-rp3So07KcdmmKbGvgaNxQSJr7bGVSVk5S9Eq1F+ppbRo70+YeaDxkw5Dd8NPN+GD6bjnYm2VuPuCXmpuYvmCXQ==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/safer-buffer": {
      "version": "2.1.2",
      "resolved": "https://registry.npmjs.org/safer-buffer/-/safer-buffer-2.1.2.tgz",
      "integrity": "sha512-YZo3K82SD7Riyi0E1EQPojLz7kpepnSQI9IyPbHHg1XXXevb5dJI7tpyN2ADxGcQbHG7vcyRHk0cbwqcQriUtg==",
      "license": "MIT"
    },
    "node_modules/semver": {
      "version": "7.7.2",
      "resolved": "https://registry.npmjs.org/semver/-/semver-7.7.2.tgz",
      "integrity": "sha512-RF0Fw+rO5AMf9MAyaRXI4AV0Ulj5lMHqVxxdSgiVbixSCXoEmmX/jk0CuJw4+3SqroYO9VoUh+HcuJivvtJemA==",
      "license": "ISC",
      "bin": {
        "semver": "bin/semver.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/send": {
      "version": "0.19.0",
      "resolved": "https://registry.npmjs.org/send/-/send-0.19.0.tgz",
      "integrity": "sha512-dW41u5VfLXu8SJh5bwRmyYUbAoSB3c9uQh6L8h/KtsFREPWpbX1lrljJo186Jc4nmci/sGUZ9a0a0J2zgfq2hw==",
      "license": "MIT",
      "dependencies": {
        "debug": "2.6.9",
        "depd": "2.0.0",
        "destroy": "1.2.0",
        "encodeurl": "~1.0.2",
        "escape-html": "~1.0.3",
        "etag": "~1.8.1",
        "fresh": "0.5.2",
        "http-errors": "2.0.0",
        "mime": "1.6.0",
        "ms": "2.1.3",
        "on-finished": "2.4.1",
        "range-parser": "~1.2.1",
        "statuses": "2.0.1"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/send/node_modules/encodeurl": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/encodeurl/-/encodeurl-1.0.2.tgz",
      "integrity": "sha512-TPJXq8JqFaVYm2CWmPvnP2Iyo4ZSM7/QKcSmuMLDObfpH5fi7RUGmd/rTDf+rut/saiDiQEeVTNgAmJEdAOx0w==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/send/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT"
    },
    "node_modules/serve-static": {
      "version": "1.16.2",
      "resolved": "https://registry.npmjs.org/serve-static/-/serve-static-1.16.2.tgz",
      "integrity": "sha512-VqpjJZKadQB/PEbEwvFdO43Ax5dFBZ2UECszz8bQ7pi7wt//PWe1P6MN7eCnjsatYtBT6EuiClbjSWP2WrIoTw==",
      "license": "MIT",
      "dependencies": {
        "encodeurl": "~2.0.0",
        "escape-html": "~1.0.3",
        "parseurl": "~1.3.3",
        "send": "0.19.0"
      },
      "engines": {
        "node": ">= 0.8.0"
      }
    },
    "node_modules/set-blocking": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/set-blocking/-/set-blocking-2.0.0.tgz",
      "integrity": "sha512-KiKBS8AnWGEyLzofFfmvKwpdPzqiy16LvQfK3yv/fVH7Bj13/wl3JSR1J+rfgRE9q7xUJK4qvgS8raSOeLUehw==",
      "license": "ISC",
      "optional": true
    },
    "node_modules/setimmediate": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/setimmediate/-/setimmediate-1.0.5.tgz",
      "integrity": "sha512-MATJdZp8sLqDl/68LfQmbP8zKPLQNV6BIZoIgrscFDQ+RsvK/BxeDQOgyxKKoh0y/8h3BqVFnCqQ/gd+reiIXA==",
      "license": "MIT"
    },
    "node_modules/setprototypeof": {
      "version": "1.2.0",
      "resolved": "https://registry.npmjs.org/setprototypeof/-/setprototypeof-1.2.0.tgz",
      "integrity": "sha512-E5LDX7Wrp85Kil5bhZv46j8jOeboKq5JMmYM3gVGdGH8xFpPWXUMsNrlODCrkoxMEeNi/XZIwuRvY4XNwYMJpw==",
      "license": "ISC"
    },
    "node_modules/shebang-command": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/shebang-command/-/shebang-command-2.0.0.tgz",
      "integrity": "sha512-kHxr2zZpYtdmrN1qDjrrX/Z1rR1kG8Dx+gkpK1G4eXmvXswmcE1hTWBWYUzlraYw1/yZp6YuDY77YtvbN0dmDA==",
      "license": "MIT",
      "dependencies": {
        "shebang-regex": "^3.0.0"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/shebang-regex": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/shebang-regex/-/shebang-regex-3.0.0.tgz",
      "integrity": "sha512-7++dFhtcx3353uBaq8DDR4NuxBetBzC7ZQOhmTQInHEd6bSrXdiEyzCvG07Z44UYdLShWUyXt5M/yhz8ekcb1A==",
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/side-channel": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/side-channel/-/side-channel-1.1.0.tgz",
      "integrity": "sha512-ZX99e6tRweoUXqR+VBrslhda51Nh5MTQwou5tnUDgbtyM0dBgmhEDtWGP/xbKn6hqfPRHujUNwz5fy/wbbhnpw==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3",
        "side-channel-list": "^1.0.0",
        "side-channel-map": "^1.0.1",
        "side-channel-weakmap": "^1.0.2"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-list": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/side-channel-list/-/side-channel-list-1.0.0.tgz",
      "integrity": "sha512-FCLHtRD/gnpCiCHEiJLOwdmFP+wzCmDEkc9y7NsYxeF4u7Btsn1ZuwgwJGxImImHicJArLP4R0yX4c2KCrMrTA==",
      "license": "MIT",
      "dependencies": {
        "es-errors": "^1.3.0",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-map": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/side-channel-map/-/side-channel-map-1.0.1.tgz",
      "integrity": "sha512-VCjCNfgMsby3tTdo02nbjtM/ewra6jPHmpThenkTYh8pG9ucZ/1P8So4u4FGBek/BjpOVsDCMoLA/iuBKIFXRA==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/side-channel-weakmap": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/side-channel-weakmap/-/side-channel-weakmap-1.0.2.tgz",
      "integrity": "sha512-WPS/HvHQTYnHisLo9McqBHOJk2FkHO/tlpvldyrnem4aeQp4hai3gythswg6p01oSoTl58rcpiFAjF2br2Ak2A==",
      "license": "MIT",
      "dependencies": {
        "call-bound": "^1.0.2",
        "es-errors": "^1.3.0",
        "get-intrinsic": "^1.2.5",
        "object-inspect": "^1.13.3",
        "side-channel-map": "^1.0.1"
      },
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/signal-exit": {
      "version": "3.0.7",
      "resolved": "https://registry.npmjs.org/signal-exit/-/signal-exit-3.0.7.tgz",
      "integrity": "sha512-wnD2ZE+l+SPC/uoS0vXeE9L1+0wuaMqKlfz9AMUo38JsyLSBWSFcHR1Rri62LZc12vLr1gb3jl7iwQhgwpAbGQ==",
      "devOptional": true,
      "license": "ISC"
    },
    "node_modules/simple-concat": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/simple-concat/-/simple-concat-1.0.1.tgz",
      "integrity": "sha512-cSFtAPtRhljv69IK0hTVZQ+OfE9nePi/rtJmw5UjHeVyVroEqJXP1sFztKUy1qU+xvz3u/sfYJLa947b7nAN2Q==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT"
    },
    "node_modules/simple-get": {
      "version": "4.0.1",
      "resolved": "https://registry.npmjs.org/simple-get/-/simple-get-4.0.1.tgz",
      "integrity": "sha512-brv7p5WgH0jmQJr1ZDDfKDOSeWWg+OVypG99A/5vYGPqJ6pxiaHLy8nxtFjBA7oMa01ebA9gfh1uMCFqOuXxvA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "decompress-response": "^6.0.0",
        "once": "^1.3.1",
        "simple-concat": "^1.0.0"
      }
    },
    "node_modules/simple-update-notifier": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/simple-update-notifier/-/simple-update-notifier-2.0.0.tgz",
      "integrity": "sha512-a2B9Y0KlNXl9u/vsW6sTIu9vGEpfKu2wRV6l1H3XEas/0gUIzGzBoP/IouTcUQbm9JWZLH3COxyn03TYlFax6w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "semver": "^7.5.3"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/simple-wcswidth": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/simple-wcswidth/-/simple-wcswidth-1.1.2.tgz",
      "integrity": "sha512-j7piyCjAeTDSjzTSQ7DokZtMNwNlEAyxqSZeCS+CXH7fJ4jx3FuJ/mTW3mE+6JLs4VJBbcll0Kjn+KXI5t21Iw==",
      "license": "MIT"
    },
    "node_modules/sisteransi": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/sisteransi/-/sisteransi-1.0.5.tgz",
      "integrity": "sha512-bLGGlR1QxBcynn2d5YmDX4MGjlZvy2MRBDRNHLJ8VI6l6+9FUiyTFNJ0IveOSP0bcXgVDPRcfGqA0pjaqUpfVg==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/slash": {
      "version": "3.0.0",
      "resolved": "https://registry.npmjs.org/slash/-/slash-3.0.0.tgz",
      "integrity": "sha512-g9Q1haeby36OSStwb4ntCGGGaKsaVSjQ68fBxoQcutl5fS1vuY18H3wSt3jFyFtrkx+Kz0V1G85A4MyAdDMi2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/smart-buffer": {
      "version": "4.2.0",
      "resolved": "https://registry.npmjs.org/smart-buffer/-/smart-buffer-4.2.0.tgz",
      "integrity": "sha512-94hK0Hh8rPqQl2xXc3HsaBoOXKV20MToPkcXvwbISWLEs+64sBq5kFgn2kJDHb1Pry9yrP0dxrCI9RRci7RXKg==",
      "license": "MIT",
      "engines": {
        "node": ">= 6.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/socks": {
      "version": "2.8.6",
      "resolved": "https://registry.npmjs.org/socks/-/socks-2.8.6.tgz",
      "integrity": "sha512-pe4Y2yzru68lXCb38aAqRf5gvN8YdjP1lok5o0J7BOHljkyCGKVz7H3vpVIXKD27rj2giOJ7DwVyk/GWrPHDWA==",
      "license": "MIT",
      "dependencies": {
        "ip-address": "^9.0.5",
        "smart-buffer": "^4.2.0"
      },
      "engines": {
        "node": ">= 10.0.0",
        "npm": ">= 3.0.0"
      }
    },
    "node_modules/socks-proxy-agent": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/socks-proxy-agent/-/socks-proxy-agent-6.2.1.tgz",
      "integrity": "sha512-a6KW9G+6B3nWZ1yB8G7pJwL3ggLy1uTzKAgCb7ttblwqdz9fMGJUuTy3uFzEP48FAs9FLILlmzDlE2JJhVQaXQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "agent-base": "^6.0.2",
        "debug": "^4.3.3",
        "socks": "^2.6.2"
      },
      "engines": {
        "node": ">= 10"
      }
    },
    "node_modules/socks-proxy-agent/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "license": "MIT",
      "optional": true,
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/socks-proxy-agent/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "license": "MIT",
      "optional": true
    },
    "node_modules/source-map": {
      "version": "0.6.1",
      "resolved": "https://registry.npmjs.org/source-map/-/source-map-0.6.1.tgz",
      "integrity": "sha512-UjgapumWlbMhkBgzT7Ykc5YXUT46F0iKu8SGXq0bcwP5dz/h0Plj6enJqjz1Zbq2l5WaqYnrVbwWOWMyF3F47g==",
      "devOptional": true,
      "license": "BSD-3-Clause",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/source-map-support": {
      "version": "0.5.13",
      "resolved": "https://registry.npmjs.org/source-map-support/-/source-map-support-0.5.13.tgz",
      "integrity": "sha512-SHSKFHadjVA5oR4PPqhtAVdcBWwRYVd6g6cAXnIbRiIwc2EhPrTuKUBdSLvlEKyIP3GCf89fltvcZiP9MMFA1w==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "buffer-from": "^1.0.0",
        "source-map": "^0.6.0"
      }
    },
    "node_modules/sprintf-js": {
      "version": "1.0.3",
      "resolved": "https://registry.npmjs.org/sprintf-js/-/sprintf-js-1.0.3.tgz",
      "integrity": "sha512-D9cPgkvLlV3t3IzL0D0YLvGA9Ahk4PcvVwUbN0dSGr1aP0Nrt4AEnTUbuGvquEC0mA64Gqt1fzirlRs5ibXx8g==",
      "license": "BSD-3-Clause"
    },
    "node_modules/sqlite3": {
      "version": "5.1.7",
      "resolved": "https://registry.npmjs.org/sqlite3/-/sqlite3-5.1.7.tgz",
      "integrity": "sha512-GGIyOiFaG+TUra3JIfkI/zGP8yZYLPQ0pl1bH+ODjiX57sPhrLU5sQJn1y9bDKZUFYkX1crlrPfSYt0BKKdkog==",
      "hasInstallScript": true,
      "license": "BSD-3-Clause",
      "dependencies": {
        "bindings": "^1.5.0",
        "node-addon-api": "^7.0.0",
        "prebuild-install": "^7.1.1",
        "tar": "^6.1.11"
      },
      "optionalDependencies": {
        "node-gyp": "8.x"
      },
      "peerDependencies": {
        "node-gyp": "8.x"
      },
      "peerDependenciesMeta": {
        "node-gyp": {
          "optional": true
        }
      }
    },
    "node_modules/ssri": {
      "version": "8.0.1",
      "resolved": "https://registry.npmjs.org/ssri/-/ssri-8.0.1.tgz",
      "integrity": "sha512-97qShzy1AiyxvPNIkLWoGua7xoQzzPjQ0HAH4B0rWKo7SZ6USuPcrUiAFrws0UH8RrbWmgq3LMTObhPIHbbBeQ==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "minipass": "^3.1.1"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/stack-utils": {
      "version": "2.0.6",
      "resolved": "https://registry.npmjs.org/stack-utils/-/stack-utils-2.0.6.tgz",
      "integrity": "sha512-XlkWvfIm6RmsWtNJx+uqtKLS8eqFbxUg0ZzLXqY0caEy9l7hruX8IpiDnjsLavoBgqCCR71TqWO8MaXYheJ3RQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "escape-string-regexp": "^2.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/statuses": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/statuses/-/statuses-2.0.1.tgz",
      "integrity": "sha512-RwNA9Z/7PrK06rYLIzFMlaF+l73iwpzsqRIFgbMLbTcLD6cOao82TaWefPXQvB2fOC4AjuYSEndS7N/mTCbkdQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/streamsearch": {
      "version": "1.1.0",
      "resolved": "https://registry.npmjs.org/streamsearch/-/streamsearch-1.1.0.tgz",
      "integrity": "sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==",
      "engines": {
        "node": ">=10.0.0"
      }
    },
    "node_modules/streamx": {
      "version": "2.22.1",
      "resolved": "https://registry.npmjs.org/streamx/-/streamx-2.22.1.tgz",
      "integrity": "sha512-znKXEBxfatz2GBNK02kRnCXjV+AA4kjZIUxeWSr3UGirZMJfTE9uiwKHobnbgxWyL/JWro8tTq+vOqAK1/qbSA==",
      "license": "MIT",
      "dependencies": {
        "fast-fifo": "^1.3.2",
        "text-decoder": "^1.1.0"
      },
      "optionalDependencies": {
        "bare-events": "^2.2.0"
      }
    },
    "node_modules/string_decoder": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.1.1.tgz",
      "integrity": "sha512-n/ShnvDi6FHbbVfviro+WojiFzv+s8MPMHBczVePfUpDJLwoLT0ht1l4YwBCbi8pJAveEEdnkHyPyTP/mzRfwg==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.1.0"
      }
    },
    "node_modules/string_decoder/node_modules/safe-buffer": {
      "version": "5.1.2",
      "resolved": "https://registry.npmjs.org/safe-buffer/-/safe-buffer-5.1.2.tgz",
      "integrity": "sha512-Gd2UZBJDkXlY7GbJxfsE8/nvKkUEU1G38c1siN6QP6a9PT9MmHB8GnpscSmMJSoF8LOIrt8ud/wPtojys4G6+g==",
      "license": "MIT"
    },
    "node_modules/string-length": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/string-length/-/string-length-4.0.2.tgz",
      "integrity": "sha512-+l6rNN5fYHNhZZy41RXsYptCjA2Igmq4EG7kZAYFQI1E1VTXarr6ZPXBg6eq7Y6eK4FEhY6AJlyuFIb/v/S0VQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "char-regex": "^1.0.2",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/string-width": {
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/string-width-cjs": {
      "name": "string-width",
      "version": "4.2.3",
      "resolved": "https://registry.npmjs.org/string-width/-/string-width-4.2.3.tgz",
      "integrity": "sha512-wKyQRQpjJ0sIp62ErSZdGsjMJWsap5oRNihHhu6G7JVO/9jIB6UyevL+tXuOqrng8j/cxKTWyWUwvSTriiZz/g==",
      "license": "MIT",
      "dependencies": {
        "emoji-regex": "^8.0.0",
        "is-fullwidth-code-point": "^3.0.0",
        "strip-ansi": "^6.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-ansi-cjs": {
      "name": "strip-ansi",
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/strip-ansi/-/strip-ansi-6.0.1.tgz",
      "integrity": "sha512-Y38VPSHcqkFrCpFnQ9vuSXmquuv5oXOKpGeT6aGrr3o3Gc9AlVa6JBfUSOCnbxGGZF+/0ooI7KrPuUSztUdU5A==",
      "license": "MIT",
      "dependencies": {
        "ansi-regex": "^5.0.1"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-bom": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/strip-bom/-/strip-bom-4.0.0.tgz",
      "integrity": "sha512-3xurFv5tEgii33Zi8Jtp55wEIILR9eh34FAW00PZf+JnSsTmV/ioewSgQl97JHvgjoRGwPShsWm+IdrxB35d0w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/strip-final-newline": {
      "version": "2.0.0",
      "resolved": "https://registry.npmjs.org/strip-final-newline/-/strip-final-newline-2.0.0.tgz",
      "integrity": "sha512-BrpvfNAE3dcvq7ll3xVumzjKjZQ5tI1sEUIKr3Uoks0XUl45St3FlatVqef9prk4jRDzhW6WZg+3bk93y6pLjA==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/strip-json-comments": {
      "version": "2.0.1",
      "resolved": "https://registry.npmjs.org/strip-json-comments/-/strip-json-comments-2.0.1.tgz",
      "integrity": "sha512-4gB8na07fecVVkOI6Rs4e7T6NOTki5EmL7TUduTs6bu3EdnSycntVJ4re8kgZA+wx9IueI2Y11bfbgwtzuE0KQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/strtok3": {
      "version": "6.3.0",
      "resolved": "https://registry.npmjs.org/strtok3/-/strtok3-6.3.0.tgz",
      "integrity": "sha512-fZtbhtvI9I48xDSywd/somNqgUHl2L2cstmXCCif0itOf96jeW18MBSyrLuNicYQVkvpOxkZtkzujiTJ9LW5Jw==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@tokenizer/token": "^0.3.0",
        "peek-readable": "^4.1.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/Borewit"
      }
    },
    "node_modules/superagent": {
      "version": "10.2.3",
      "resolved": "https://registry.npmjs.org/superagent/-/superagent-10.2.3.tgz",
      "integrity": "sha512-y/hkYGeXAj7wUMjxRbB21g/l6aAEituGXM9Rwl4o20+SX3e8YOSV6BxFXl+dL3Uk0mjSL3kCbNkwURm8/gEDig==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "component-emitter": "^1.3.1",
        "cookiejar": "^2.1.4",
        "debug": "^4.3.7",
        "fast-safe-stringify": "^2.1.1",
        "form-data": "^4.0.4",
        "formidable": "^3.5.4",
        "methods": "^1.1.2",
        "mime": "2.6.0",
        "qs": "^6.11.2"
      },
      "engines": {
        "node": ">=14.18.0"
      }
    },
    "node_modules/superagent/node_modules/debug": {
      "version": "4.4.1",
      "resolved": "https://registry.npmjs.org/debug/-/debug-4.4.1.tgz",
      "integrity": "sha512-KcKCqiftBJcZr++7ykoDIEwSa3XWowTfNPo92BYxjXiyYEVrUQh2aLyhxBCwww+heortUFxEJYcRzosstTEBYQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "ms": "^2.1.3"
      },
      "engines": {
        "node": ">=6.0"
      },
      "peerDependenciesMeta": {
        "supports-color": {
          "optional": true
        }
      }
    },
    "node_modules/superagent/node_modules/mime": {
      "version": "2.6.0",
      "resolved": "https://registry.npmjs.org/mime/-/mime-2.6.0.tgz",
      "integrity": "sha512-USPkMeET31rOMiarsBNIHZKLGgvKc/LrjofAnBlOttf5ajRvqiRA8QsenbcooctK6d6Ts6aqZXBA+XbkKthiQg==",
      "dev": true,
      "license": "MIT",
      "bin": {
        "mime": "cli.js"
      },
      "engines": {
        "node": ">=4.0.0"
      }
    },
    "node_modules/superagent/node_modules/ms": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/ms/-/ms-2.1.3.tgz",
      "integrity": "sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/supertest": {
      "version": "7.1.4",
      "resolved": "https://registry.npmjs.org/supertest/-/supertest-7.1.4.tgz",
      "integrity": "sha512-tjLPs7dVyqgItVFirHYqe2T+MfWc2VOBQ8QFKKbWTA3PU7liZR8zoSpAi/C1k1ilm9RsXIKYf197oap9wXGVYg==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "methods": "^1.1.2",
        "superagent": "^10.2.3"
      },
      "engines": {
        "node": ">=14.18.0"
      }
    },
    "node_modules/supports-color": {
      "version": "5.5.0",
      "resolved": "https://registry.npmjs.org/supports-color/-/supports-color-5.5.0.tgz",
      "integrity": "sha512-QjVjwdXIt408MIiAqCX4oUKsgU2EqAGzs2Ppkm4aQYbjm+ZEWEcW4SfFNTr4uMNZma0ey4f5lgLrkB0aX0QMow==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "has-flag": "^3.0.0"
      },
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/supports-preserve-symlinks-flag": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/supports-preserve-symlinks-flag/-/supports-preserve-symlinks-flag-1.0.0.tgz",
      "integrity": "sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">= 0.4"
      },
      "funding": {
        "url": "https://github.com/sponsors/ljharb"
      }
    },
    "node_modules/tar": {
      "version": "6.2.1",
      "resolved": "https://registry.npmjs.org/tar/-/tar-6.2.1.tgz",
      "integrity": "sha512-DZ4yORTwrbTj/7MZYq2w+/ZFdI6OZ/f9SFHR+71gIVUZhOQPHzVCLpvRnPgyaMpfWxxk/4ONva3GQSyNIKRv6A==",
      "license": "ISC",
      "dependencies": {
        "chownr": "^2.0.0",
        "fs-minipass": "^2.0.0",
        "minipass": "^5.0.0",
        "minizlib": "^2.1.1",
        "mkdirp": "^1.0.3",
        "yallist": "^4.0.0"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/tar-fs": {
      "version": "2.1.3",
      "resolved": "https://registry.npmjs.org/tar-fs/-/tar-fs-2.1.3.tgz",
      "integrity": "sha512-090nwYJDmlhwFwEW3QQl+vaNnxsO2yVsd45eTKRBzSzu+hlb1w2K9inVq5b0ngXuLVqQ4ApvsUHHnu/zQNkWAg==",
      "license": "MIT",
      "dependencies": {
        "chownr": "^1.1.1",
        "mkdirp-classic": "^0.5.2",
        "pump": "^3.0.0",
        "tar-stream": "^2.1.4"
      }
    },
    "node_modules/tar-fs/node_modules/chownr": {
      "version": "1.1.4",
      "resolved": "https://registry.npmjs.org/chownr/-/chownr-1.1.4.tgz",
      "integrity": "sha512-jJ0bqzaylmJtVnNgzTeSOs8DPavpbYgEr/b0YL8/2GO3xJEhInFmhKMUnEJQjZumK7KXGFhUy89PrsJWlakBVg==",
      "license": "ISC"
    },
    "node_modules/tar-stream": {
      "version": "2.2.0",
      "resolved": "https://registry.npmjs.org/tar-stream/-/tar-stream-2.2.0.tgz",
      "integrity": "sha512-ujeqbceABgwMZxEJnk2HDY2DlnUZ+9oEcb1KzTVfYHio0UE6dG71n60d8D2I4qNvleWrrXpmjpt7vZeF1LnMZQ==",
      "license": "MIT",
      "dependencies": {
        "bl": "^4.0.3",
        "end-of-stream": "^1.4.1",
        "fs-constants": "^1.0.0",
        "inherits": "^2.0.3",
        "readable-stream": "^3.1.1"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tar-stream/node_modules/readable-stream": {
      "version": "3.6.2",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-3.6.2.tgz",
      "integrity": "sha512-9u/sniCrY3D5WdsERHzHE4G2YCXqoG5FTHUiCC4SIbr6XcLZBY05ya9EKjYek9O5xOAwjGq+1JdGBAS7Q9ScoA==",
      "license": "MIT",
      "dependencies": {
        "inherits": "^2.0.3",
        "string_decoder": "^1.1.1",
        "util-deprecate": "^1.0.1"
      },
      "engines": {
        "node": ">= 6"
      }
    },
    "node_modules/tar/node_modules/minipass": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/minipass/-/minipass-5.0.0.tgz",
      "integrity": "sha512-3FnjYuehv9k6ovOEbyOswadCDPX1piCfhV8ncmYtHOjuPwylVWsghTLo7rabjC3Rx5xD4HDx8Wm1xnMF7S5qFQ==",
      "license": "ISC",
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/tar/node_modules/mkdirp": {
      "version": "1.0.4",
      "resolved": "https://registry.npmjs.org/mkdirp/-/mkdirp-1.0.4.tgz",
      "integrity": "sha512-vVqVZQyf3WLx2Shd0qJ9xuvqgAyKPLAiqITEtqW0oIUjzo3PePDd6fW9iFz30ef7Ysp/oiWqbhszeGWW2T6Gzw==",
      "license": "MIT",
      "bin": {
        "mkdirp": "bin/cmd.js"
      },
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/test-exclude": {
      "version": "6.0.0",
      "resolved": "https://registry.npmjs.org/test-exclude/-/test-exclude-6.0.0.tgz",
      "integrity": "sha512-cAGWPIyOHU6zlmg88jwm7VRyXnMN7iV68OGAbYDk/Mh/xC/pzVPlQtY6ngoIH/5/tciuhGfvESU8GrHrcxD56w==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@istanbuljs/schema": "^0.1.2",
        "glob": "^7.1.4",
        "minimatch": "^3.0.4"
      },
      "engines": {
        "node": ">=8"
      }
    },
    "node_modules/text-decoder": {
      "version": "1.2.3",
      "resolved": "https://registry.npmjs.org/text-decoder/-/text-decoder-1.2.3.tgz",
      "integrity": "sha512-3/o9z3X0X0fTupwsYvR03pJ/DjWuqqrfwBgTQzdWDiQSm9KitAyz/9WqsT2JQW7KV2m+bC2ol/zqpW37NHxLaA==",
      "license": "Apache-2.0",
      "dependencies": {
        "b4a": "^1.6.4"
      }
    },
    "node_modules/tmpl": {
      "version": "1.0.5",
      "resolved": "https://registry.npmjs.org/tmpl/-/tmpl-1.0.5.tgz",
      "integrity": "sha512-3f0uOEAQwIqGuWW2MVzYg8fV/QNnc/IpuJNG837rLuczAaLVHslWHZQj4IGiEl5Hs3kkbhwL9Ab7Hrsmuj+Smw==",
      "dev": true,
      "license": "BSD-3-Clause"
    },
    "node_modules/to-regex-range": {
      "version": "5.0.1",
      "resolved": "https://registry.npmjs.org/to-regex-range/-/to-regex-range-5.0.1.tgz",
      "integrity": "sha512-65P7iz6X5yEr1cwcgvQxbbIw7Uk3gOy5dIdtZ4rDveLqhrdJP+Li/Hx6tyK0NEb+2GCyneCMJiGqrADCSNk8sQ==",
      "dev": true,
      "license": "MIT",
      "dependencies": {
        "is-number": "^7.0.0"
      },
      "engines": {
        "node": ">=8.0"
      }
    },
    "node_modules/toidentifier": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/toidentifier/-/toidentifier-1.0.1.tgz",
      "integrity": "sha512-o5sSPKEkg/DIQNmH43V0/uerLrpzVedkUh8tGNvaeXpfpuwjKenlSox/2O/BTlZUtEe+JG7s5YhEz608PlAHRA==",
      "license": "MIT",
      "engines": {
        "node": ">=0.6"
      }
    },
    "node_modules/token-types": {
      "version": "4.2.1",
      "resolved": "https://registry.npmjs.org/token-types/-/token-types-4.2.1.tgz",
      "integrity": "sha512-6udB24Q737UD/SDsKAHI9FCRP7Bqc9D/MQUV02ORQg5iskjtLJlZJNdN4kKtcdtwCeWIwIHDGaUsTsCCAa8sFQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "@tokenizer/token": "^0.3.0",
        "ieee754": "^1.2.1"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "type": "github",
        "url": "https://github.com/sponsors/Borewit"
      }
    },
    "node_modules/touch": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/touch/-/touch-3.1.1.tgz",
      "integrity": "sha512-r0eojU4bI8MnHr8c5bNo7lJDdI2qXlWWJk6a9EAFG7vbhTjElYhBVS3/miuE0uOuoLdb8Mc/rVfsmm6eo5o9GA==",
      "dev": true,
      "license": "ISC",
      "bin": {
        "nodetouch": "bin/nodetouch.js"
      }
    },
    "node_modules/tough-cookie": {
      "version": "4.1.4",
      "resolved": "https://registry.npmjs.org/tough-cookie/-/tough-cookie-4.1.4.tgz",
      "integrity": "sha512-Loo5UUvLD9ScZ6jh8beX1T6sO1w2/MpCRpEP7V280GKMVUQ0Jzar2U3UJPsrdbziLEMMhu3Ujnq//rhiFuIeag==",
      "license": "BSD-3-Clause",
      "peer": true,
      "dependencies": {
        "psl": "^1.1.33",
        "punycode": "^2.1.1",
        "universalify": "^0.2.0",
        "url-parse": "^1.5.3"
      },
      "engines": {
        "node": ">=6"
      }
    },
    "node_modules/tr46": {
      "version": "0.0.3",
      "resolved": "https://registry.npmjs.org/tr46/-/tr46-0.0.3.tgz",
      "integrity": "sha512-N3WMsuqV66lT30CrXNbEjx4GEwlow3v6rr4mCcv6prnfwhS01rkgyFdjPNBYd9br7LpXV1+Emh01fHnq2Gdgrw==",
      "license": "MIT"
    },
    "node_modules/ts-error": {
      "version": "1.0.6",
      "resolved": "https://registry.npmjs.org/ts-error/-/ts-error-1.0.6.tgz",
      "integrity": "sha512-tLJxacIQUM82IR7JO1UUkKlYuUTmoY9HBJAmNWFzheSlDS5SPMcNIepejHJa4BpPQLAcbRhRf3GDJzyj6rbKvA==",
      "license": "MIT"
    },
    "node_modules/tslib": {
      "version": "2.8.1",
      "resolved": "https://registry.npmjs.org/tslib/-/tslib-2.8.1.tgz",
      "integrity": "sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==",
      "license": "0BSD"
    },
    "node_modules/tunnel-agent": {
      "version": "0.6.0",
      "resolved": "https://registry.npmjs.org/tunnel-agent/-/tunnel-agent-0.6.0.tgz",
      "integrity": "sha512-McnNiV1l8RYeY8tBgEpuodCC1mLUdbSN+CYBL7kJsJNInOP8UjDDEwdk6Mw60vdLLrr5NHKZhMAOSrR2NZuQ+w==",
      "license": "Apache-2.0",
      "dependencies": {
        "safe-buffer": "^5.0.1"
      },
      "engines": {
        "node": "*"
      }
    },
    "node_modules/type-detect": {
      "version": "4.0.8",
      "resolved": "https://registry.npmjs.org/type-detect/-/type-detect-4.0.8.tgz",
      "integrity": "sha512-0fr/mIH1dlO+x7TlcMy+bIDqKPsw/70tVyeHW787goQjhmqaZe10uwLujubK9q9Lg6Fiho1KUKDYz0Z7k7g5/g==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=4"
      }
    },
    "node_modules/type-fest": {
      "version": "0.21.3",
      "resolved": "https://registry.npmjs.org/type-fest/-/type-fest-0.21.3.tgz",
      "integrity": "sha512-t0rzBq87m3fVcduHDUFhKmyyX+9eo6WQjZvf51Ea/M0Q7+T374Jp1aUiyUl0GKxp8M/OETVHSDvmkyPgvX+X2w==",
      "dev": true,
      "license": "(MIT OR CC0-1.0)",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/type-is": {
      "version": "1.6.18",
      "resolved": "https://registry.npmjs.org/type-is/-/type-is-1.6.18.tgz",
      "integrity": "sha512-TkRKr9sUTxEH8MdfuCSP7VizJyzRNMjj2J2do2Jr3Kym598JVdEksuzPQCnlFPW4ky9Q+iA+ma9BGm06XQBy8g==",
      "license": "MIT",
      "dependencies": {
        "media-typer": "0.3.0",
        "mime-types": "~2.1.24"
      },
      "engines": {
        "node": ">= 0.6"
      }
    },
    "node_modules/typed-query-selector": {
      "version": "2.12.0",
      "resolved": "https://registry.npmjs.org/typed-query-selector/-/typed-query-selector-2.12.0.tgz",
      "integrity": "sha512-SbklCd1F0EiZOyPiW192rrHZzZ5sBijB6xM+cpmrwDqObvdtunOHHIk9fCGsoK5JVIYXoyEp4iEdE3upFH3PAg==",
      "license": "MIT"
    },
    "node_modules/typedarray": {
      "version": "0.0.6",
      "resolved": "https://registry.npmjs.org/typedarray/-/typedarray-0.0.6.tgz",
      "integrity": "sha512-/aCDEGatGvZ2BIk+HmLf4ifCJFwvKFNb9/JeZPMulfgFracn9QFcAf5GO8B/mweUjSoblS5In0cWhqpfs/5PQA==",
      "license": "MIT"
    },
    "node_modules/undefsafe": {
      "version": "2.0.5",
      "resolved": "https://registry.npmjs.org/undefsafe/-/undefsafe-2.0.5.tgz",
      "integrity": "sha512-WxONCrssBM8TSPRqN5EmsjVrsv4A8X12J4ArBiiayv3DyyG3ZlIg6yysuuSYdZsVz3TKcTg2fd//Ujd4CHV1iA==",
      "dev": true,
      "license": "MIT"
    },
    "node_modules/underscore": {
      "version": "1.13.7",
      "resolved": "https://registry.npmjs.org/underscore/-/underscore-1.13.7.tgz",
      "integrity": "sha512-GMXzWtsc57XAtguZgaQViUOzs0KTkk8ojr3/xAxXLITqf/3EMwxC0inyETfDFjH/Krbhuep0HNbbjI9i/q3F3g==",
      "license": "MIT"
    },
    "node_modules/undici": {
      "version": "7.12.0",
      "resolved": "https://registry.npmjs.org/undici/-/undici-7.12.0.tgz",
      "integrity": "sha512-GrKEsc3ughskmGA9jevVlIOPMiiAHJ4OFUtaAH+NhfTUSiZ1wMPIQqQvAJUrJspFXJt3EBWgpAeoHEDVT1IBug==",
      "license": "MIT",
      "engines": {
        "node": ">=20.18.1"
      }
    },
    "node_modules/undici-types": {
      "version": "5.26.5",
      "resolved": "https://registry.npmjs.org/undici-types/-/undici-types-5.26.5.tgz",
      "integrity": "sha512-JlCMO+ehdEIKqlFxk6IfVoAUVmgz7cU7zD/h9XZ0qzeosSHmUJVOzSQvvYSYWXkFXC+IfLKSIffhv0sVZup6pA==",
      "license": "MIT"
    },
    "node_modules/unique-filename": {
      "version": "1.1.1",
      "resolved": "https://registry.npmjs.org/unique-filename/-/unique-filename-1.1.1.tgz",
      "integrity": "sha512-Vmp0jIp2ln35UTXuryvjzkjGdRyf9b2lTXuSYUiPmzRcl3FDtYqAwOnTJkAngD9SWhnoJzDbTKwaOrZ+STtxNQ==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "unique-slug": "^2.0.0"
      }
    },
    "node_modules/unique-slug": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/unique-slug/-/unique-slug-2.0.2.tgz",
      "integrity": "sha512-zoWr9ObaxALD3DOPfjPSqxt4fnZiWblxHIgeWqW8x7UqDzEtHEQLzji2cuJYQFCU6KmoJikOYAZlrTHHebjx2w==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "imurmurhash": "^0.1.4"
      }
    },
    "node_modules/universalify": {
      "version": "0.2.0",
      "resolved": "https://registry.npmjs.org/universalify/-/universalify-0.2.0.tgz",
      "integrity": "sha512-CJ1QgKmNg3CwvAv/kOFmtnEN05f0D/cn9QntgNOQlQF9dgvVTHj3t+8JPdjqawCHk7V/KA+fbUqzZ9XWhcqPUg==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">= 4.0.0"
      }
    },
    "node_modules/unpipe": {
      "version": "1.0.0",
      "resolved": "https://registry.npmjs.org/unpipe/-/unpipe-1.0.0.tgz",
      "integrity": "sha512-pjy2bYhSsufwWlKwPc+l3cN7+wuJlK6uz0YdJEOlQDbl6jo/YlPi4mb8agUkVC8BF7V8NuzeyPNqRksA3hztKQ==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/update-browserslist-db": {
      "version": "1.1.3",
      "resolved": "https://registry.npmjs.org/update-browserslist-db/-/update-browserslist-db-1.1.3.tgz",
      "integrity": "sha512-UxhIZQ+QInVdunkDAaiazvvT/+fXL5Osr0JZlJulepYu6Jd7qJtDZjlur0emRlT71EN3ScPoE7gvsuIKKNavKw==",
      "dev": true,
      "funding": [
        {
          "type": "opencollective",
          "url": "https://opencollective.com/browserslist"
        },
        {
          "type": "tidelift",
          "url": "https://tidelift.com/funding/github/npm/browserslist"
        },
        {
          "type": "github",
          "url": "https://github.com/sponsors/ai"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "escalade": "^3.2.0",
        "picocolors": "^1.1.1"
      },
      "bin": {
        "update-browserslist-db": "cli.js"
      },
      "peerDependencies": {
        "browserslist": ">= 4.21.0"
      }
    },
    "node_modules/url-parse": {
      "version": "1.5.10",
      "resolved": "https://registry.npmjs.org/url-parse/-/url-parse-1.5.10.tgz",
      "integrity": "sha512-WypcfiRhfeUP9vvF0j6rw0J3hrWrw6iZv3+22h6iRMJ/8z1Tj6XfLP4DsUix5MhMPnXpiHDoKyoZ/bdCkwBCiQ==",
      "license": "MIT",
      "peer": true,
      "dependencies": {
        "querystringify": "^2.1.1",
        "requires-port": "^1.0.0"
      }
    },
    "node_modules/util-deprecate": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/util-deprecate/-/util-deprecate-1.0.2.tgz",
      "integrity": "sha512-EPD5q1uXyFxJpCrLnCc1nHnq3gOa6DZBocAIiI2TaSCA7VCJ1UJDMagCzIkXNsUYfD1daK//LTEQ8xiIbrHtcw==",
      "license": "MIT"
    },
    "node_modules/utils-merge": {
      "version": "1.0.1",
      "resolved": "https://registry.npmjs.org/utils-merge/-/utils-merge-1.0.1.tgz",
      "integrity": "sha512-pMZTvIkT1d+TFGvDOqodOclx0QWkkgi6Tdoa8gC8ffGAAqz9pzPTZWAybbsHHoED/ztMtkv/VoYTYyShUn81hA==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.4.0"
      }
    },
    "node_modules/uuid": {
      "version": "9.0.1",
      "resolved": "https://registry.npmjs.org/uuid/-/uuid-9.0.1.tgz",
      "integrity": "sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==",
      "funding": [
        "https://github.com/sponsors/broofa",
        "https://github.com/sponsors/ctavan"
      ],
      "license": "MIT",
      "bin": {
        "uuid": "dist/bin/uuid"
      }
    },
    "node_modules/v8-to-istanbul": {
      "version": "9.3.0",
      "resolved": "https://registry.npmjs.org/v8-to-istanbul/-/v8-to-istanbul-9.3.0.tgz",
      "integrity": "sha512-kiGUalWN+rgBJ/1OHZsBtU4rXZOfj/7rKQxULKlIzwzQSvMJUUNgPwJEEh7gU6xEVxC0ahoOBvN2YI8GH6FNgA==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "@jridgewell/trace-mapping": "^0.3.12",
        "@types/istanbul-lib-coverage": "^2.0.1",
        "convert-source-map": "^2.0.0"
      },
      "engines": {
        "node": ">=10.12.0"
      }
    },
    "node_modules/vary": {
      "version": "1.1.2",
      "resolved": "https://registry.npmjs.org/vary/-/vary-1.1.2.tgz",
      "integrity": "sha512-BNGbWLfd0eUPabhkXUVm0j8uuvREyTh5ovRa/dyow/BqAbZJyC+5fU+IzQOzmAKzYqYRAISoRhdQr3eIZ/PXqg==",
      "license": "MIT",
      "engines": {
        "node": ">= 0.8"
      }
    },
    "node_modules/walker": {
      "version": "1.0.8",
      "resolved": "https://registry.npmjs.org/walker/-/walker-1.0.8.tgz",
      "integrity": "sha512-ts/8E8l5b7kY0vlWLewOkDXMmPdLcVV4GmOQLyxuSswIJsweeFZtAsMF7k1Nszz+TYBQrlYRmzOnr398y1JemQ==",
      "dev": true,
      "license": "Apache-2.0",
      "dependencies": {
        "makeerror": "1.0.12"
      }
    },
    "node_modules/weaviate-client": {
      "version": "3.8.0",
      "resolved": "https://registry.npmjs.org/weaviate-client/-/weaviate-client-3.8.0.tgz",
      "integrity": "sha512-8yWNY3OIAh1H/W+414o17em/3CSDc5f4/sMjCrFksVppczHC1mB1f0fCFosg9fpQGegLT+Ll6un82sTGYxFhqw==",
      "license": "BSD 3-Clause",
      "dependencies": {
        "abort-controller-x": "^0.4.3",
        "graphql": "^16.11.0",
        "graphql-request": "^6.1.0",
        "long": "^5.3.2",
        "nice-grpc": "^2.1.12",
        "nice-grpc-client-middleware-retry": "^3.1.11",
        "nice-grpc-common": "^2.0.2",
        "uuid": "^9.0.1"
      },
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/web-streams-polyfill": {
      "version": "4.0.0-beta.3",
      "resolved": "https://registry.npmjs.org/web-streams-polyfill/-/web-streams-polyfill-4.0.0-beta.3.tgz",
      "integrity": "sha512-QW95TCTaHmsYfHDybGMwO5IJIM93I/6vTRk+daHTWFPhwh+C8Cg7j7XyKrwrj8Ib6vYXe0ocYNrmzY4xAAN6ug==",
      "license": "MIT",
      "peer": true,
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/webidl-conversions": {
      "version": "3.0.1",
      "resolved": "https://registry.npmjs.org/webidl-conversions/-/webidl-conversions-3.0.1.tgz",
      "integrity": "sha512-2JAn3z8AR6rjK8Sm8orRC0h/bcl/DqL7tRPdGZ4I1CjdF+EaMLmYxBHyXuKL849eucPFhvBoxMsflfOb8kxaeQ==",
      "license": "BSD-2-Clause"
    },
    "node_modules/whatwg-encoding": {
      "version": "3.1.1",
      "resolved": "https://registry.npmjs.org/whatwg-encoding/-/whatwg-encoding-3.1.1.tgz",
      "integrity": "sha512-6qN4hJdMwfYBtE3YBTTHhoeuUrDBPZmbQaxWAqSALV/MeEnR5z1xd8UKud2RAkFoPkmB+hli1TZSnyi84xz1vQ==",
      "license": "MIT",
      "dependencies": {
        "iconv-lite": "0.6.3"
      },
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/whatwg-encoding/node_modules/iconv-lite": {
      "version": "0.6.3",
      "resolved": "https://registry.npmjs.org/iconv-lite/-/iconv-lite-0.6.3.tgz",
      "integrity": "sha512-4fCk79wshMdzMp2rH06qWrJE4iolqLhCUH+OiuIgU++RB0+94NlDL81atO7GX55uUKueo0txHNtvEyI6D7WdMw==",
      "license": "MIT",
      "dependencies": {
        "safer-buffer": ">= 2.1.2 < 3.0.0"
      },
      "engines": {
        "node": ">=0.10.0"
      }
    },
    "node_modules/whatwg-mimetype": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-mimetype/-/whatwg-mimetype-4.0.0.tgz",
      "integrity": "sha512-QaKxh0eNIi2mE9p2vEdzfagOKHCcj1pJ56EEHGQOVxp8r9/iszLUUV7v89x9O1p/T+NlTM5W7jW6+cz4Fq1YVg==",
      "license": "MIT",
      "engines": {
        "node": ">=18"
      }
    },
    "node_modules/whatwg-url": {
      "version": "5.0.0",
      "resolved": "https://registry.npmjs.org/whatwg-url/-/whatwg-url-5.0.0.tgz",
      "integrity": "sha512-saE57nupxk6v3HY35+jzBwYa0rKSy0XR8JSxZPwgLr7ys0IBzhGviA1/TUGJLmSVqs8pb9AnvICXEuOHLprYTw==",
      "license": "MIT",
      "dependencies": {
        "tr46": "~0.0.3",
        "webidl-conversions": "^3.0.0"
      }
    },
    "node_modules/which": {
      "version": "2.0.2",
      "resolved": "https://registry.npmjs.org/which/-/which-2.0.2.tgz",
      "integrity": "sha512-BLI3Tl1TW3Pvl70l3yq3Y64i+awpwXqsGBYWkkqMtnbXgrMD+yj7rhW0kuEDxzJaYXGjEW5ogapKNMEKNMjibA==",
      "license": "ISC",
      "dependencies": {
        "isexe": "^2.0.0"
      },
      "bin": {
        "node-which": "bin/node-which"
      },
      "engines": {
        "node": ">= 8"
      }
    },
    "node_modules/wide-align": {
      "version": "1.1.5",
      "resolved": "https://registry.npmjs.org/wide-align/-/wide-align-1.1.5.tgz",
      "integrity": "sha512-eDMORYaPNZ4sQIuuYPDHdQvf4gyCF9rEEV/yPxGfwPkRodwEgiMUUXTx/dex+Me0wxx53S+NgUHaP7y3MGlDmg==",
      "license": "ISC",
      "optional": true,
      "dependencies": {
        "string-width": "^1.0.2 || 2 || 3 || 4"
      }
    },
    "node_modules/wrap-ansi": {
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs": {
      "name": "wrap-ansi",
      "version": "7.0.0",
      "resolved": "https://registry.npmjs.org/wrap-ansi/-/wrap-ansi-7.0.0.tgz",
      "integrity": "sha512-YVGIj2kamLSTxw6NsZjoBxfSwsn0ycdesmc4p+Q21c5zPuZ1pl+NfxVdxPtdHvmNVOQ6XSYG4AUtyt/Fi7D16Q==",
      "license": "MIT",
      "dependencies": {
        "ansi-styles": "^4.0.0",
        "string-width": "^4.1.0",
        "strip-ansi": "^6.0.0"
      },
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/chalk/wrap-ansi?sponsor=1"
      }
    },
    "node_modules/wrap-ansi-cjs/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrap-ansi/node_modules/ansi-styles": {
      "version": "4.3.0",
      "resolved": "https://registry.npmjs.org/ansi-styles/-/ansi-styles-4.3.0.tgz",
      "integrity": "sha512-zbB9rCJAT1rbjiVDb2hqKFHNYLxgtk8NURxZ3IZwD3F6NtxbXZQCnnSi1Lkx+IDohdPlFp222wVALIheZJQSEg==",
      "license": "MIT",
      "dependencies": {
        "color-convert": "^2.0.1"
      },
      "engines": {
        "node": ">=8"
      },
      "funding": {
        "url": "https://github.com/chalk/ansi-styles?sponsor=1"
      }
    },
    "node_modules/wrappy": {
      "version": "1.0.2",
      "resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
      "integrity": "sha512-l4Sp/DRseor9wL6EvV2+TuQn63dMkPjZ/sp9XkghTEbV9KlPS1xUsZ3u7/IQO4wxtcFB4bgpQPRcR3QCvezPcQ==",
      "license": "ISC"
    },
    "node_modules/write-file-atomic": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/write-file-atomic/-/write-file-atomic-4.0.2.tgz",
      "integrity": "sha512-7KxauUdBmSdWnmpaGFg+ppNjKF8uNLry8LyzjauQDOVONfFLNKrKvQOxZ/VuTIcS/gge/YNahf5RIIQWTSarlg==",
      "dev": true,
      "license": "ISC",
      "dependencies": {
        "imurmurhash": "^0.1.4",
        "signal-exit": "^3.0.7"
      },
      "engines": {
        "node": "^12.13.0 || ^14.15.0 || >=16.0.0"
      }
    },
    "node_modules/ws": {
      "version": "8.18.3",
      "resolved": "https://registry.npmjs.org/ws/-/ws-8.18.3.tgz",
      "integrity": "sha512-PEIGCY5tSlUt50cqyMXfCzX+oOPqN0vuGqWzbcJ2xvnkzkq46oOpz7dQaTDBdfICb4N14+GARUDw2XV2N4tvzg==",
      "license": "MIT",
      "engines": {
        "node": ">=10.0.0"
      },
      "peerDependencies": {
        "bufferutil": "^4.0.1",
        "utf-8-validate": ">=5.0.2"
      },
      "peerDependenciesMeta": {
        "bufferutil": {
          "optional": true
        },
        "utf-8-validate": {
          "optional": true
        }
      }
    },
    "node_modules/xmlbuilder": {
      "version": "10.1.1",
      "resolved": "https://registry.npmjs.org/xmlbuilder/-/xmlbuilder-10.1.1.tgz",
      "integrity": "sha512-OyzrcFLL/nb6fMGHbiRDuPup9ljBycsdCypwuyg5AAHvyWzGfChJpCXMG88AGTIMFhGZ9RccFN1e6lhg3hkwKg==",
      "license": "MIT",
      "engines": {
        "node": ">=4.0"
      }
    },
    "node_modules/xtend": {
      "version": "4.0.2",
      "resolved": "https://registry.npmjs.org/xtend/-/xtend-4.0.2.tgz",
      "integrity": "sha512-LKYU1iAXJXUgAXn9URjiu+MWhyUXHsvfp7mcuYm9dSUKK0/CjtrUwFAxD82/mCWbtLsGjFIad0wIsod4zrTAEQ==",
      "license": "MIT",
      "engines": {
        "node": ">=0.4"
      }
    },
    "node_modules/y18n": {
      "version": "5.0.8",
      "resolved": "https://registry.npmjs.org/y18n/-/y18n-5.0.8.tgz",
      "integrity": "sha512-0pfFzegeDWJHJIAmTLRP2DwHjdF5s7jo9tuztdQxAhINCdvS+3nGINqPd00AphqJR/0LhANUS6/+7SCb98YOfA==",
      "license": "ISC",
      "engines": {
        "node": ">=10"
      }
    },
    "node_modules/yallist": {
      "version": "4.0.0",
      "resolved": "https://registry.npmjs.org/yallist/-/yallist-4.0.0.tgz",
      "integrity": "sha512-3wdGidZyq5PB084XLES5TpOSRA3wjXAlIWMhum2kRcv/41Sn2emQ0dycQW4uZXLejwKvg6EsvbdlVL+FYEct7A==",
      "license": "ISC"
    },
    "node_modules/yaml": {
      "version": "2.8.0",
      "resolved": "https://registry.npmjs.org/yaml/-/yaml-2.8.0.tgz",
      "integrity": "sha512-4lLa/EcQCB0cJkyts+FpIRx5G/llPxfP6VQU5KByHEhLxY3IJCH0f0Hy1MHI8sClTvsIb8qwRJ6R/ZdlDJ/leQ==",
      "license": "ISC",
      "bin": {
        "yaml": "bin.mjs"
      },
      "engines": {
        "node": ">= 14.6"
      }
    },
    "node_modules/yargs": {
      "version": "17.7.2",
      "resolved": "https://registry.npmjs.org/yargs/-/yargs-17.7.2.tgz",
      "integrity": "sha512-7dSzzRQ++CKnNI/krKnYRV7JKKPUXMEh61soaHKg9mrWEhzFWhFnxPxGl+69cD1Ou63C13NUPCnmIcrvqCuM6w==",
      "license": "MIT",
      "dependencies": {
        "cliui": "^8.0.1",
        "escalade": "^3.1.1",
        "get-caller-file": "^2.0.5",
        "require-directory": "^2.1.1",
        "string-width": "^4.2.3",
        "y18n": "^5.0.5",
        "yargs-parser": "^21.1.1"
      },
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yargs-parser": {
      "version": "21.1.1",
      "resolved": "https://registry.npmjs.org/yargs-parser/-/yargs-parser-21.1.1.tgz",
      "integrity": "sha512-tVpsJW7DdjecAiFpbIB1e3qxIQsE6NoPc5/eTdrbbIC4h0LVsWhnoa3g+m2HclBIujHzsxZ4VJVA+GUuc2/LBw==",
      "license": "ISC",
      "engines": {
        "node": ">=12"
      }
    },
    "node_modules/yauzl": {
      "version": "2.10.0",
      "resolved": "https://registry.npmjs.org/yauzl/-/yauzl-2.10.0.tgz",
      "integrity": "sha512-p4a9I6X6nu6IhoGmBqAcbJy1mlC4j27vEPZX9F4L4/vZT3Lyq1VkFHw/V/PUcB9Buo+DG3iHkT0x3Qya58zc3g==",
      "license": "MIT",
      "dependencies": {
        "buffer-crc32": "~0.2.3",
        "fd-slicer": "~1.1.0"
      }
    },
    "node_modules/yocto-queue": {
      "version": "0.1.0",
      "resolved": "https://registry.npmjs.org/yocto-queue/-/yocto-queue-0.1.0.tgz",
      "integrity": "sha512-rVksvsnNCdJ/ohGc6xgPwyN8eheCxsiLM8mxuE/t/mOVqJewPuO1miLpTHQiRgTKCLexL4MeAFVagts7HmNZ2Q==",
      "dev": true,
      "license": "MIT",
      "engines": {
        "node": ">=10"
      },
      "funding": {
        "url": "https://github.com/sponsors/sindresorhus"
      }
    },
    "node_modules/youtube-transcript": {
      "version": "1.2.1",
      "resolved": "https://registry.npmjs.org/youtube-transcript/-/youtube-transcript-1.2.1.tgz",
      "integrity": "sha512-TvEGkBaajKw+B6y91ziLuBLsa5cawgowou+Bk0ciGpjELDfAzSzTGXaZmeSSkUeknCPpEr/WGApOHDwV7V+Y9Q==",
      "license": "MIT",
      "engines": {
        "node": ">=18.0.0"
      }
    },
    "node_modules/youtubei.js": {
      "version": "15.0.1",
      "resolved": "https://registry.npmjs.org/youtubei.js/-/youtubei.js-15.0.1.tgz",
      "integrity": "sha512-2slapqJS5NuXKHvcACEknyVz0AjH/TrXaOhDM0q2twQKa54kCmfj+7B/2nGfd20uzAe29zW1ejk2qOc4ABuGkg==",
      "funding": [
        "https://github.com/sponsors/LuanRT"
      ],
      "license": "MIT",
      "dependencies": {
        "@bufbuild/protobuf": "^2.0.0",
        "jintr": "^3.3.1",
        "undici": "^6.21.3"
      }
    },
    "node_modules/youtubei.js/node_modules/undici": {
      "version": "6.21.3",
      "resolved": "https://registry.npmjs.org/undici/-/undici-6.21.3.tgz",
      "integrity": "sha512-gBLkYIlEnSp8pFbT64yFgGE6UIB9tAkhukC23PmMDCe5Nd+cRqKxSjw5y54MK2AZMgZfJWMaNE4nYUHgi1XEOw==",
      "license": "MIT",
      "engines": {
        "node": ">=18.17"
      }
    },
    "node_modules/zip-stream": {
      "version": "6.0.1",
      "resolved": "https://registry.npmjs.org/zip-stream/-/zip-stream-6.0.1.tgz",
      "integrity": "sha512-zK7YHHz4ZXpW89AHXUPbQVGKI7uvkd3hzusTdotCg1UxyaVtg0zFJSTfW/Dq5f7OBBVnq6cZIaC8Ti4hb6dtCA==",
      "license": "MIT",
      "dependencies": {
        "archiver-utils": "^5.0.0",
        "compress-commons": "^6.0.2",
        "readable-stream": "^4.0.0"
      },
      "engines": {
        "node": ">= 14"
      }
    },
    "node_modules/zip-stream/node_modules/buffer": {
      "version": "6.0.3",
      "resolved": "https://registry.npmjs.org/buffer/-/buffer-6.0.3.tgz",
      "integrity": "sha512-FTiCpNxtwiZZHEZbcbTIcZjERVICn9yq/pDFkTl95/AxzD1naBctN7YO68riM/gLSDY7sdrMby8hofADYuuqOA==",
      "funding": [
        {
          "type": "github",
          "url": "https://github.com/sponsors/feross"
        },
        {
          "type": "patreon",
          "url": "https://www.patreon.com/feross"
        },
        {
          "type": "consulting",
          "url": "https://feross.org/support"
        }
      ],
      "license": "MIT",
      "dependencies": {
        "base64-js": "^1.3.1",
        "ieee754": "^1.2.1"
      }
    },
    "node_modules/zip-stream/node_modules/readable-stream": {
      "version": "4.7.0",
      "resolved": "https://registry.npmjs.org/readable-stream/-/readable-stream-4.7.0.tgz",
      "integrity": "sha512-oIGGmcpTLwPga8Bn6/Z75SVaH1z5dUut2ibSyAMVhmUggWpmDn2dapB0n7f8nwaSiRtepAsfJyfXIO5DCVAODg==",
      "license": "MIT",
      "dependencies": {
        "abort-controller": "^3.0.0",
        "buffer": "^6.0.3",
        "events": "^3.3.0",
        "process": "^0.11.10",
        "string_decoder": "^1.3.0"
      },
      "engines": {
        "node": "^12.22.0 || ^14.17.0 || >=16.0.0"
      }
    },
    "node_modules/zip-stream/node_modules/string_decoder": {
      "version": "1.3.0",
      "resolved": "https://registry.npmjs.org/string_decoder/-/string_decoder-1.3.0.tgz",
      "integrity": "sha512-hkRX8U1WjJFd8LsDJ2yQ/wWWxaopEsABU1XfkM8A+j0+85JAGppt16cr1Whg6KIbb4okU6Mql6BOj+uup/wKeA==",
      "license": "MIT",
      "dependencies": {
        "safe-buffer": "~5.2.0"
      }
    },
    "node_modules/zod": {
      "version": "3.25.76",
      "resolved": "https://registry.npmjs.org/zod/-/zod-3.25.76.tgz",
      "integrity": "sha512-gzUt/qt81nXsFGKIFcC3YnfEAx5NkunCfnDlvuBSSFS02bcXu4Lmea0AFIUwbLWxWPx3d9p8S5QoaujKcNQxcQ==",
      "license": "MIT",
      "funding": {
        "url": "https://github.com/sponsors/colinhacks"
      }
    },
    "node_modules/zod-to-json-schema": {
      "version": "3.24.6",
      "resolved": "https://registry.npmjs.org/zod-to-json-schema/-/zod-to-json-schema-3.24.6.tgz",
      "integrity": "sha512-h/z3PKvcTcTetyjl1fkj79MHNEjm+HpD6NXheWjzOekY7kV+lwDYnHw+ivHkijnCSMz1yJaWBD9vu/Fcmk+vEg==",
      "license": "ISC",
      "peerDependencies": {
        "zod": "^3.24.1"
      }
    }
  }
}



---
File: /package.json
---

{
  "name": "sawron-knowledge-app",
  "version": "1.0.0",
  "description": "SAWRON - Connect the Dots & Fill the Gaps - Local Knowledge Processing App",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "test:coverage": "jest --coverage"
  },
  "dependencies": {
    "@google/genai": "^0.3.0",
    "@google/generative-ai": "^0.24.1",
    "@langchain/community": "^0.3.49",
    "@langchain/core": "^0.3.66",
    "archiver": "^7.0.1",
    "axios": "^1.6.2",
    "cheerio": "^1.0.0-rc.12",
    "cors": "^2.8.5",
    "express": "^4.18.2",
    "mammoth": "^1.6.0",
    "multer": "^1.4.5-lts.1",
    "pdf-parse": "^1.1.1",
    "puppeteer": "^24.15.0",
    "sqlite3": "^5.1.6",
    "youtube-transcript": "^1.0.6",
    "youtubei.js": "^15.0.1"
  },
  "devDependencies": {
    "jest": "^29.7.0",
    "nodemon": "^3.0.2",
    "supertest": "^7.1.4"
  },
  "keywords": [
    "knowledge",
    "local",
    "llm",
    "ollama",
    "knowledge-distillation"
  ],
  "author": "SAWRON",
  "license": "MIT"
}



---
File: /README.md
---

# 💠 SAWRON - Connect the Dots & Fill the Gaps 💠

**The Ultimate Knowledge Distillation AI Processing Platform**

---

## What is SAWRON?

SAWRON is a powerful knowledge distillation platform that transforms diverse content sources into structured, actionable insights using advanced AI. You have complete control over your data processing - choose between **local AI processing** for maximum privacy or **online AI providers** for enhanced capabilities. The application runs locally on your machine, but you decide where the AI processing happens.

### Core Purpose

SAWRON distills complex information from various sources into clear, numbered insights that help you:
- **Connect scattered information** across different content types
- **Fill knowledge gaps** with AI-powered analysis and research
- **Build a searchable knowledge base** of distilled insights
- **Choose your privacy level** - use local AI models or online providers based on your needs

---

## Key Features

- **🔒 Privacy Control** - Choose between local AI processing (private) or online providers (enhanced capabilities)
- **🤖 Multi-AI Support** - Works with OpenAI, Anthropic, Google, Grok, DeepSeek, and Ollama
- **📚 Universal Content Processing** - YouTube videos/playlists, web pages and documents
- **⚡ Real-time Processing** - Live status updates and progress tracking
- **💾 Local Knowledge Base** - SQLite-powered storage with full-text search
- **📊 Bulk Operations** - Process multiple items, bulk download, and batch management
- **🎨 Modern Interface** - Clean, intuitive browser-based UI

---

## Installation


1. **Clone and Install**
   ```bash
   git clone https://github.com/your-username/sawron.git
   cd sawron
   npm install
   ```

2. **Start the Application**
   ```bash
   npm start
   ```

3. **Open in Browser**
   ```
   http://localhost:3000
   ```

4. **Configure AI Provider** (see Configuration section below)

### Configuration Steps
1. Click the Settings button (⚙️)
2. **Choose your processing approach**:
   - **Local**: Select Ollama for privacy-first processing
   - **Online**: Choose OpenAI, Anthropic, Google, Grok, or DeepSeek for enhanced capabilities
3. Enter your API key (for online providers) or configure Ollama endpoint (for local)
4. Select your preferred model
5. Test the connection and save


---

## Future Enhancements

- **Web Search**: Real time web search to complement processing for all AI providers (only available in Gemini models at the moment)
- **Additional AI Providers**: Integration with more AI services and local models
- **Export Formats**: Markdown, JSON, XML, and custom templates
- **Automation**: Scheduled processing, webhooks, and workflow triggers
- **App**: Native applications for Windows, MacOS, Linux, iOS and Android

---

## License

This project is licensed under the MIT License:

```
MIT License

Copyright (c) 2024 SAWRON

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
```


---
File: /server.js
---

const express = require('express');
const cors = require('cors');
const path = require('path');
const multer = require('multer');
const fs = require('fs');

// Import services
const database = require('./services/database');
const processor = require('./services/processor');
const ollamaService = require('./services/ollama');

const app = express();
const PORT = 3000;

// Configure multer for file uploads
const uploadDir = path.join(__dirname, 'uploads');
if (!fs.existsSync(uploadDir)) {
    fs.mkdirSync(uploadDir, { recursive: true });
}

const storage = multer.diskStorage({
    destination: (req, file, cb) => {
        cb(null, uploadDir);
    },
    filename: (req, file, cb) => {
        cb(null, `${Date.now()}-${file.originalname}`);
    }
});

const upload = multer({
    storage,
    limits: { fileSize: 50 * 1024 * 1024 }, // 50MB limit
    fileFilter: (req, file, cb) => {
        const allowedTypes = ['.pdf', '.docx', '.txt'];
        const ext = path.extname(file.originalname).toLowerCase();
        if (allowedTypes.includes(ext)) {
            cb(null, true);
        } else {
            cb(new Error(`Unsupported file type: ${ext}. Allowed types: ${allowedTypes.join(', ')}`));
        }
    }
});

// CORS middleware - simplified and working configuration
app.use(cors({
    origin: true, // Allow all origins for local development
    credentials: true,
    methods: ['GET', 'POST', 'PUT', 'DELETE', 'OPTIONS'],
    allowedHeaders: ['Content-Type', 'Authorization', 'X-Requested-With']
}));

// Remove the old CORS setup since we're handling it manually above

app.use(express.json({ limit: '50mb' }));
app.use(express.urlencoded({ extended: true, limit: '50mb' }));

// Serve static files
app.use(express.static('public'));

// Import AI settings routes
const aiSettingsRoutes = require('./routes/ai-settings');
app.use('/api', aiSettingsRoutes);

// API Routes
app.get('/api/health', async (req, res) => {
    try {
        const ollamaAvailable = await ollamaService.checkAvailability();
        res.json({
            status: 'ok',
            ollama: ollamaAvailable ? 'available' : 'unavailable'
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});



// Get all distillations
app.get('/api/summaries', async (req, res) => {
    try {
        const distillations = await database.getAllSummaries();
        res.json(distillations);
    } catch (error) {
        console.error('Error in /api/summaries:', error);
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// Get a specific distillation
app.get('/api/summaries/:id', async (req, res) => {
    try {
        const distillation = await database.getDistillation(req.params.id);
        if (!distillation) {
            return res.status(404).json({
                status: 'error',
                message: 'Distillation not found'
            });
        }
        res.json(distillation);
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// Process a URL
app.post('/api/process/url', async (req, res) => {
    try {
        const { url } = req.body;

        if (!url) {
            return res.status(400).json({
                status: 'error',
                message: 'URL is required'
            });
        }

        const distillation = await processor.processUrl(url);
        res.status(202).json(distillation);
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// Process a file
app.post('/api/process/file', upload.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            return res.status(400).json({
                status: 'error',
                message: 'No file uploaded'
            });
        }

        const distillation = await processor.processFile(req.file);
        res.status(202).json(distillation);
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// Delete a distillation
app.delete('/api/summaries/:id', async (req, res) => {
    try {
        const success = await database.deleteDistillation(req.params.id);
        if (!success) {
            return res.status(404).json({
                status: 'error',
                message: 'Distillation not found'
            });
        }
        res.json({ status: 'ok' });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// Stop a running process
app.post('/api/summaries/:id/stop', async (req, res) => {
    try {
        const success = await processor.stopProcess(req.params.id);
        if (!success) {
            return res.status(404).json({
                status: 'error',
                message: 'Process not found or already completed'
            });
        }
        res.json({ status: 'ok' });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// Retry a failed distillation
app.post('/api/summaries/:id/retry', async (req, res) => {
    console.log(`Retry endpoint hit for distillation ID: ${req.params.id}`);
    try {
        console.log('Attempting to get distillation from database...');
        const distillation = await database.getDistillation(req.params.id);
        console.log('Distillation retrieved:', distillation ? 'Found' : 'Not found');

        if (!distillation) {
            console.log('Distillation not found, returning 404');
            return res.status(404).json({
                status: 'error',
                message: 'Distillation not found'
            });
        }

        console.log(`Distillation status: ${distillation.status}`);
        console.log('Distillation sourceUrl:', distillation.sourceUrl);
        console.log('Distillation sourceFile:', distillation.sourceFile);
        console.log('Distillation sourceType:', distillation.sourceType);

        // Allow retrying any distillation (successful or failed)
        console.log(`Retrying distillation with status: ${distillation.status}`);

        // Retry the distillation based on its source type
        let retryResult;

        if ((distillation.sourceType === 'url' || distillation.sourceType === 'youtube' || distillation.sourceType === 'channel') && distillation.sourceUrl) {
            // Retry URL processing
            console.log('Retrying URL processing for:', distillation.sourceUrl);
            retryResult = await processor.processUrl(distillation.sourceUrl);
        } else if (distillation.sourceType === 'file' && distillation.sourceFile) {
            // For file retries, we need to check if we still have the raw content
            if (!distillation.rawContent) {
                return res.status(400).json({
                    status: 'error',
                    message: 'Cannot retry file processing - original file content not available'
                });
            }

            console.log('Retrying file processing for:', distillation.sourceFile.name);

            // Create a mock file object from the stored data
            const mockFile = {
                originalname: distillation.sourceFile.name,
                mimetype: distillation.sourceFile.type,
                size: distillation.sourceFile.size,
                path: null // We'll use rawContent instead
            };

            retryResult = await processor.retryFileProcessing(req.params.id, mockFile, distillation.rawContent);
        } else {
            console.log('Cannot determine retry method. sourceType:', distillation.sourceType, 'sourceUrl:', !!distillation.sourceUrl, 'sourceFile:', !!distillation.sourceFile, 'rawContent:', !!distillation.rawContent);
            return res.status(400).json({
                status: 'error',
                message: 'Cannot determine how to retry this distillation'
            });
        }

        // Delete the old failed distillation
        await database.deleteDistillation(req.params.id);

        res.json({
            status: 'ok',
            message: 'Distillation retry initiated successfully',
            newId: retryResult.id
        });

    } catch (error) {
        console.error('Error retrying distillation:', error);
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// Download distillation as PDF
app.get('/api/summaries/:id/pdf', async (req, res) => {
    try {
        const distillation = await database.getDistillation(req.params.id);
        if (!distillation) {
            return res.status(404).json({
                status: 'error',
                message: 'Distillation not found'
            });
        }

        if (distillation.status !== 'completed') {
            return res.status(400).json({
                status: 'error',
                message: 'Distillation is not yet completed'
            });
        }

        // Generate PDF for the requested distillation

        // Generate PDF
        const { buffer, filename } = await processor.generatePdf(req.params.id);

        // Set headers for PDF download
        res.setHeader('Content-Type', 'application/pdf');
        res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
        res.setHeader('Content-Length', buffer.length);
        res.setHeader('Cache-Control', 'no-cache');

        // Send PDF buffer
        res.end(buffer, 'binary');

    } catch (error) {
        console.error('PDF generation error:', error);
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// Bulk download distillations as ZIP
app.post('/api/summaries/bulk-download', async (req, res) => {
    try {
        const { ids } = req.body;

        if (!ids || !Array.isArray(ids) || ids.length === 0) {
            return res.status(400).json({
                status: 'error',
                message: 'IDs array is required'
            });
        }

        // If only one item, redirect to single PDF download
        if (ids.length === 1) {
            const distillation = await database.getDistillation(ids[0]);
            if (!distillation) {
                return res.status(404).json({
                    status: 'error',
                    message: 'Distillation not found'
                });
            }

            if (distillation.status !== 'completed') {
                return res.status(400).json({
                    status: 'error',
                    message: 'Distillation is not yet completed'
                });
            }

            const { buffer, filename } = await processor.generatePdf(ids[0]);

            res.setHeader('Content-Type', 'application/pdf');
            res.setHeader('Content-Disposition', `attachment; filename="${filename}"`);
            res.setHeader('Content-Length', buffer.length);
            res.setHeader('Cache-Control', 'no-cache');

            return res.end(buffer, 'binary');
        }

        // Multiple items - create ZIP
        const archiver = require('archiver');
        const archive = archiver('zip', { zlib: { level: 9 } });

        // Set headers for ZIP download
        const zipFilename = `sawron-download.zip`;
        res.setHeader('Content-Type', 'application/zip');
        res.setHeader('Content-Disposition', `attachment; filename="${zipFilename}"`);
        res.setHeader('Cache-Control', 'no-cache');

        // Handle archive errors
        archive.on('error', (err) => {
            console.error('Archive error:', err);
            if (!res.headersSent) {
                res.status(500).json({
                    status: 'error',
                    message: 'Failed to create ZIP archive'
                });
            }
        });

        // Pipe archive to response
        archive.pipe(res);

        const usedFilenames = new Set();

        // Process each ID sequentially
        for (const id of ids) {
            try {
                const distillation = await database.getDistillation(id);
                if (!distillation || distillation.status !== 'completed') {
                    console.log(`Skipping distillation ${id} - not found or not completed`);
                    continue;
                }

                // Generate PDF
                const pdfResult = await processor.generatePdf(id);
                const { buffer, filename } = pdfResult;

                // Convert buffer to Node.js Buffer if needed
                let finalBuffer;
                if (Buffer.isBuffer(buffer)) {
                    finalBuffer = buffer;
                } else if (buffer instanceof Uint8Array) {
                    finalBuffer = Buffer.from(buffer);
                } else {
                    finalBuffer = Buffer.from(buffer);
                }

                if (finalBuffer.length === 0) {
                    console.log(`Empty buffer for distillation ${id}, skipping`);
                    continue;
                }

                let finalFilename = filename || `distillation-${id}.pdf`;

                // Handle duplicate filenames
                let counter = 1;
                let uniqueFilename = finalFilename;
                while (usedFilenames.has(uniqueFilename)) {
                    const nameWithoutExt = finalFilename.replace('.pdf', '');
                    uniqueFilename = `${nameWithoutExt}-(${counter}).pdf`;
                    counter++;
                }
                usedFilenames.add(uniqueFilename);

                // Add PDF to ZIP archive
                archive.append(finalBuffer, { name: uniqueFilename });

            } catch (error) {
                console.error(`Error processing distillation ${id}:`, error);
            }
        }

        // Finalize the archive
        archive.finalize();

    } catch (error) {
        console.error('Bulk download error:', error);
        if (!res.headersSent) {
            res.status(500).json({
                status: 'error',
                message: error.message
            });
        }
    }
});

// Bulk delete distillations
app.post('/api/summaries/bulk-delete', async (req, res) => {
    try {
        const { ids } = req.body;

        if (!ids || !Array.isArray(ids) || ids.length === 0) {
            return res.status(400).json({
                status: 'error',
                message: 'IDs array is required'
            });
        }

        // Process bulk delete request

        let deletedCount = 0;
        const errors = [];

        // Process each ID
        for (const id of ids) {
            try {
                const success = await database.deleteDistillation(id);
                if (success) {
                    deletedCount++;
                } else {
                    errors.push({
                        id: id,
                        error: 'Distillation not found'
                    });
                }
            } catch (error) {
                console.error(`Error deleting distillation ${id}:`, error);
                errors.push({
                    id: id,
                    error: error.message
                });
            }
        }

        // Bulk delete operation completed

        res.json({
            deletedCount: deletedCount,
            errors: errors
        });

    } catch (error) {
        console.error('Bulk delete error:', error);
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// Cancel individual download
app.post('/api/summaries/:id/cancel-download', async (req, res) => {
    try {
        // For now, just return success since downloads are client-side
        // In a real implementation, you might track server-side download processes
        res.json({
            status: 'ok',
            message: 'Download cancellation requested'
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// Cancel bulk download
app.post('/api/summaries/cancel-bulk-download', async (req, res) => {
    try {
        // For now, just return success since downloads are client-side
        // In a real implementation, you might track server-side download processes
        res.json({
            status: 'ok',
            message: 'Bulk download cancellation requested'
        });
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// Search distillations
app.get('/api/search', async (req, res) => {
    try {
        const { query } = req.query;
        if (!query) {
            return res.status(400).json({
                status: 'error',
                message: 'Search query is required'
            });
        }

        const results = await database.searchSummaries(query);
        res.json(results);
    } catch (error) {
        res.status(500).json({
            status: 'error',
            message: error.message
        });
    }
});

// Main route
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Error handler
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).json({
        status: 'error',
        message: err.message
    });
});

// Start the Express server
app.listen(PORT, () => {
    console.log(`SAWRON server up and running on http://localhost:${PORT}`);
});
